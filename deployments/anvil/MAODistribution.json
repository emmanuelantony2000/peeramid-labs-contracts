{
  "address": "0x7f5b3d109fbb2570188aB211Fdcac98FbdA079c0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "tokenVotingPluginRepo",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "daoFactory",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "trustedForwarder",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "rankTokenCodeId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "ACIDDIistributionId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "accessManagerId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "governanceERC20BaseId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "distributionName",
          "type": "bytes32"
        },
        {
          "components": [
            {
              "internalType": "uint64",
              "name": "major",
              "type": "uint64"
            },
            {
              "internalType": "uint64",
              "name": "minor",
              "type": "uint64"
            },
            {
              "internalType": "uint128",
              "name": "patch",
              "type": "uint128"
            }
          ],
          "internalType": "struct LibSemver.Version",
          "name": "distributionVersion",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "ERC1167FailedCreateClone",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "instances",
          "type": "address[]"
        }
      ],
      "name": "Distributed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "contractURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "distributionSchema",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "daoURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "subdomain",
                  "type": "string"
                },
                {
                  "internalType": "bytes",
                  "name": "metadata",
                  "type": "bytes"
                },
                {
                  "internalType": "string",
                  "name": "tokenName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "tokenSymbol",
                  "type": "string"
                }
              ],
              "internalType": "struct MAODistribution.OSxDistributionArguments",
              "name": "DAOSEttings",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "timePerTurn",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxPlayersSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "minPlayersSize",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "timeToJoin",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "maxTurns",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "voteCredits",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "gamePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "address",
                  "name": "paymentToken",
                  "type": "address"
                },
                {
                  "internalType": "uint256",
                  "name": "joinGamePrice",
                  "type": "uint256"
                },
                {
                  "internalType": "string",
                  "name": "metadata",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "rankTokenURI",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "RankTokenContractURI",
                  "type": "string"
                }
              ],
              "internalType": "struct MAODistribution.UserACIDSettings",
              "name": "ACIDSettings",
              "type": "tuple"
            }
          ],
          "internalType": "struct MAODistribution.DistributorArguments",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "get",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "sources",
          "type": "address[]"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "instantiate",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "instances",
          "type": "address[]"
        },
        {
          "internalType": "bytes32",
          "name": "distributionName",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "distributionVersion",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x25b85ed42d4ec9a44150801d00a04f97b5085a9b1dd533f7b1bd6257e25b77e3",
  "receipt": {
    "to": null,
    "from": "0x6Cf8d74C7875de8C2FfB09228F4bf2A21b25e583",
    "contractAddress": "0x7f5b3d109fbb2570188aB211Fdcac98FbdA079c0",
    "transactionIndex": 0,
    "gasUsed": "2506326",
    "logsBloom": "0x
    "blockHash": "0xd80b2afb487abae21848f858429986e029102cb48a752344b98bde127aee013e",
    "transactionHash": "0x25b85ed42d4ec9a44150801d00a04f97b5085a9b1dd533f7b1bd6257e25b77e3",
    "logs": [],
    "blockNumber": 6137960,
    "cumulativeGasUsed": "2506326",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1AeD2BEb470aeFD65B43f905Bd5371b1E4749d18",
    "0x08633901DdF9cD8e2DC3a073594d0A7DaD6f3f57",
    "0x0000000000000000000000000000000000000000",
    "0xcfbddc4ef9938401c9f998db20cd97e3dba0a5c283be0458c118ec898dce4a33",
    "0x857fa7136daab4c1b026d1786091c122b1903deb60cbbbdfbffeb8aa1e2f72f3",
    "0xc5dfea654e5a5438eb1b706acaa6a261ce0c6dfd3fb6d15986e0d51e3beee05b",
    "0x0b410f1e670163dcc524c39830c5c489777c6a12235344c5ffab3c4558ec9cd0",
    "0x4d414f0000000000000000000000000000000000000000000000000000000000",
    {
      "major": 0,
      "minor": 1,
      "patch": 0
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "8b178e5db390f3cab8ab670750551215",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenVotingPluginRepo\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"daoFactory\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"trustedForwarder\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"rankTokenCodeId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"ACIDDIistributionId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"accessManagerId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"governanceERC20BaseId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"distributionName\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint64\",\"name\":\"major\",\"type\":\"uint64\"},{\"internalType\":\"uint64\",\"name\":\"minor\",\"type\":\"uint64\"},{\"internalType\":\"uint128\",\"name\":\"patch\",\"type\":\"uint128\"}],\"internalType\":\"struct LibSemver.Version\",\"name\":\"distributionVersion\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ERC1167FailedCreateClone\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"instances\",\"type\":\"address[]\"}],\"name\":\"Distributed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"contractURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"distributionSchema\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"daoURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"subdomain\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"},{\"internalType\":\"string\",\"name\":\"tokenName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"tokenSymbol\",\"type\":\"string\"}],\"internalType\":\"struct MAODistribution.OSxDistributionArguments\",\"name\":\"DAOSEttings\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"timePerTurn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxPlayersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"minPlayersSize\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timeToJoin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxTurns\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"voteCredits\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gamePrice\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"paymentToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"joinGamePrice\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"metadata\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"rankTokenURI\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"RankTokenContractURI\",\"type\":\"string\"}],\"internalType\":\"struct MAODistribution.UserACIDSettings\",\"name\":\"ACIDSettings\",\"type\":\"tuple\"}],\"internalType\":\"struct MAODistribution.DistributorArguments\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"get\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"sources\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"instantiate\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"instances\",\"type\":\"address[]\"},{\"internalType\":\"bytes32\",\"name\":\"distributionName\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"distributionVersion\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Peeramid Labs, 2024\",\"details\":\"This contract implements the IDistribution and CodeIndexer interfaces. It uses the Clones library for address cloning.\",\"errors\":{\"ERC1167FailedCreateClone()\":[{\"details\":\"A clone instance deployment failed.\"}]},\"events\":{\"Distributed(address,address[])\":{\"params\":{\"distributor\":\"The address of the entity that performed the distribution.\",\"instances\":\"An array of addresses that were produced.\"}}},\"kind\":\"dev\",\"methods\":{\"constructor\":{\"details\":\"- retrieves contract addresses from a contract index using the provided identifiers. - checks if the access manager supports the ERC7746 interface. - EIP712 compatible name/version can be extracted with use of LibSemver WARNING: _trustedForwarder functionality hasn't been yet reviewed nor implemented for ACID distribution and if set will affect only OSx DAO setup.\",\"params\":{\"ACIDDIistributionId\":\"Identifier for the ACID distribution.\",\"accessManagerId\":\"Identifier for the access manager.\",\"daoFactory\":\"Address of the Aragons DAO factory.\",\"distributionName\":\"Name of the distribution.\",\"distributionVersion\":\"Version of the distribution as a `LibSemver.Version` struct.\",\"governanceERC20BaseId\":\"Identifier for the governance ERC20 base.\",\"rankTokenCodeId\":\"Identifier for the rank token code.\",\"tokenVotingPluginRepo\":\"Address of the token voting plugin repository.\",\"trustedForwarder\":\"Address of the trusted forwarder.\"}},\"distributionSchema()\":{\"details\":\"This is only needed to ensure `DistributorArguments` are provided in ABI, as it would be internal otherwise.\",\"returns\":{\"_0\":\"DistributorArguments The schema of the distribution.\"}},\"get()\":{\"returns\":{\"_1\":\"The name of the distribution.\",\"_2\":\"The version of the distribution.\",\"sources\":\"An array of addresses that are used for instantiation.\"}},\"instantiate(bytes)\":{\"details\":\"`instances` array contents: DAO, GovernanceToken, Gov Token AccessManager, ACID Diamond, 8x ACID Diamond facets, RankTokenAccessManager, RankToken\",\"params\":{\"data\":\"The initialization data for the new instance, typeof {DistributorArguments}.\"},\"returns\":{\"distributionName\":\"A bytes32 value representing the name of the distribution.\",\"distributionVersion\":\"A uint256 value representing the version of the distribution.\",\"instances\":\"An array of addresses representing the new instances.\"}}},\"title\":\"MAODistribution\",\"version\":1},\"userdoc\":{\"events\":{\"Distributed(address,address[])\":{\"notice\":\"Emitted when a distribution occurs.\"}},\"kind\":\"user\",\"methods\":{\"constructor\":{\"notice\":\"Initializes the contract with the provided parameters and performs necessary checks.\"},\"distributionSchema()\":{\"notice\":\"Returns the schema of the distribution.\"},\"get()\":{\"notice\":\"Retrieves the current distribution sources.\"},\"instantiate(bytes)\":{\"notice\":\"Instantiates a new instance with the provided data.\"}},\"notice\":\"The contract is responsible for creating and managing DAOs and ACID distributions.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/distributions/MAODistribution.sol\":\"MAODistribution\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":2000},\"remappings\":[]},\"sources\":{\"@aragon/osx/core/dao/IDAO.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\n/// @title IDAO\\n/// @author Aragon Association - 2022-2023\\n/// @notice The interface required for DAOs within the Aragon App DAO framework.\\ninterface IDAO {\\n    /// @notice The action struct to be consumed by the DAO's `execute` function resulting in an external call.\\n    /// @param to The address to call.\\n    /// @param value The native token value to be sent with the call.\\n    /// @param data The bytes-encoded function selector and calldata for the call.\\n    struct Action {\\n        address to;\\n        uint256 value;\\n        bytes data;\\n    }\\n\\n    /// @notice Checks if an address has permission on a contract via a permission identifier and considers if `ANY_ADDRESS` was used in the granting process.\\n    /// @param _where The address of the contract.\\n    /// @param _who The address of a EOA or contract to give the permissions.\\n    /// @param _permissionId The permission identifier.\\n    /// @param _data The optional data passed to the `PermissionCondition` registered.\\n    /// @return Returns true if the address has permission, false if not.\\n    function hasPermission(\\n        address _where,\\n        address _who,\\n        bytes32 _permissionId,\\n        bytes memory _data\\n    ) external view returns (bool);\\n\\n    /// @notice Updates the DAO metadata (e.g., an IPFS hash).\\n    /// @param _metadata The IPFS hash of the new metadata object.\\n    function setMetadata(bytes calldata _metadata) external;\\n\\n    /// @notice Emitted when the DAO metadata is updated.\\n    /// @param metadata The IPFS hash of the new metadata object.\\n    event MetadataSet(bytes metadata);\\n\\n    /// @notice Executes a list of actions. If a zero allow-failure map is provided, a failing action reverts the entire execution. If a non-zero allow-failure map is provided, allowed actions can fail without the entire call being reverted.\\n    /// @param _callId The ID of the call. The definition of the value of `callId` is up to the calling contract and can be used, e.g., as a nonce.\\n    /// @param _actions The array of actions.\\n    /// @param _allowFailureMap A bitmap allowing execution to succeed, even if individual actions might revert. If the bit at index `i` is 1, the execution succeeds even if the `i`th action reverts. A failure map value of 0 requires every action to not revert.\\n    /// @return The array of results obtained from the executed actions in `bytes`.\\n    /// @return The resulting failure map containing the actions have actually failed.\\n    function execute(\\n        bytes32 _callId,\\n        Action[] memory _actions,\\n        uint256 _allowFailureMap\\n    ) external returns (bytes[] memory, uint256);\\n\\n    /// @notice Emitted when a proposal is executed.\\n    /// @param actor The address of the caller.\\n    /// @param callId The ID of the call.\\n    /// @param actions The array of actions executed.\\n    /// @param allowFailureMap The allow failure map encoding which actions are allowed to fail.\\n    /// @param failureMap The failure map encoding which actions have failed.\\n    /// @param execResults The array with the results of the executed actions.\\n    /// @dev The value of `callId` is defined by the component/contract calling the execute function. A `Plugin` implementation can use it, for example, as a nonce.\\n    event Executed(\\n        address indexed actor,\\n        bytes32 callId,\\n        Action[] actions,\\n        uint256 allowFailureMap,\\n        uint256 failureMap,\\n        bytes[] execResults\\n    );\\n\\n    /// @notice Emitted when a standard callback is registered.\\n    /// @param interfaceId The ID of the interface.\\n    /// @param callbackSelector The selector of the callback function.\\n    /// @param magicNumber The magic number to be registered for the callback function selector.\\n    event StandardCallbackRegistered(\\n        bytes4 interfaceId,\\n        bytes4 callbackSelector,\\n        bytes4 magicNumber\\n    );\\n\\n    /// @notice Deposits (native) tokens to the DAO contract with a reference string.\\n    /// @param _token The address of the token or address(0) in case of the native token.\\n    /// @param _amount The amount of tokens to deposit.\\n    /// @param _reference The reference describing the deposit reason.\\n    function deposit(address _token, uint256 _amount, string calldata _reference) external payable;\\n\\n    /// @notice Emitted when a token deposit has been made to the DAO.\\n    /// @param sender The address of the sender.\\n    /// @param token The address of the deposited token.\\n    /// @param amount The amount of tokens deposited.\\n    /// @param _reference The reference describing the deposit reason.\\n    event Deposited(\\n        address indexed sender,\\n        address indexed token,\\n        uint256 amount,\\n        string _reference\\n    );\\n\\n    /// @notice Emitted when a native token deposit has been made to the DAO.\\n    /// @dev This event is intended to be emitted in the `receive` function and is therefore bound by the gas limitations for `send`/`transfer` calls introduced by [ERC-2929](https://eips.ethereum.org/EIPS/eip-2929).\\n    /// @param sender The address of the sender.\\n    /// @param amount The amount of native tokens deposited.\\n    event NativeTokenDeposited(address sender, uint256 amount);\\n\\n    /// @notice Setter for the trusted forwarder verifying the meta transaction.\\n    /// @param _trustedForwarder The trusted forwarder address.\\n    function setTrustedForwarder(address _trustedForwarder) external;\\n\\n    /// @notice Getter for the trusted forwarder verifying the meta transaction.\\n    /// @return The trusted forwarder address.\\n    function getTrustedForwarder() external view returns (address);\\n\\n    /// @notice Emitted when a new TrustedForwarder is set on the DAO.\\n    /// @param forwarder the new forwarder address.\\n    event TrustedForwarderSet(address forwarder);\\n\\n    /// @notice Setter for the [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _signatureValidator The address of the signature validator.\\n    function setSignatureValidator(address _signatureValidator) external;\\n\\n    /// @notice Emitted when the signature validator address is updated.\\n    /// @param signatureValidator The address of the signature validator.\\n    event SignatureValidatorSet(address signatureValidator);\\n\\n    /// @notice Checks whether a signature is valid for the provided hash by forwarding the call to the set [ERC-1271](https://eips.ethereum.org/EIPS/eip-1271) signature validator contract.\\n    /// @param _hash The hash of the data to be signed.\\n    /// @param _signature The signature byte array associated with `_hash`.\\n    /// @return Returns the `bytes4` magic value `0x1626ba7e` if the signature is valid.\\n    function isValidSignature(bytes32 _hash, bytes memory _signature) external returns (bytes4);\\n\\n    /// @notice Registers an ERC standard having a callback by registering its [ERC-165](https://eips.ethereum.org/EIPS/eip-165) interface ID and callback function signature.\\n    /// @param _interfaceId The ID of the interface.\\n    /// @param _callbackSelector The selector of the callback function.\\n    /// @param _magicNumber The magic number to be registered for the function signature.\\n    function registerStandardCallback(\\n        bytes4 _interfaceId,\\n        bytes4 _callbackSelector,\\n        bytes4 _magicNumber\\n    ) external;\\n}\\n\",\"keccak256\":\"0x3876d62c73312234c1e2ab4e75cdac2783a6688c3445a67a15b767cd98e01f80\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {ContextUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\\\";\\n\\nimport {IDAO} from \\\"../../dao/IDAO.sol\\\";\\nimport {_auth} from \\\"../../utils/auth.sol\\\";\\n\\n/// @title DaoAuthorizableUpgradeable\\n/// @author Aragon Association - 2022-2023\\n/// @notice An abstract contract providing a meta-transaction compatible modifier for upgradeable or cloneable contracts to authorize function calls through an associated DAO.\\n/// @dev Make sure to call `__DaoAuthorizableUpgradeable_init` during initialization of the inheriting contract.\\nabstract contract DaoAuthorizableUpgradeable is ContextUpgradeable {\\n    /// @notice The associated DAO managing the permissions of inheriting contracts.\\n    IDAO private dao_;\\n\\n    /// @notice Initializes the contract by setting the associated DAO.\\n    /// @param _dao The associated DAO address.\\n    function __DaoAuthorizableUpgradeable_init(IDAO _dao) internal onlyInitializing {\\n        dao_ = _dao;\\n    }\\n\\n    /// @notice Returns the DAO contract.\\n    /// @return The DAO contract.\\n    function dao() public view returns (IDAO) {\\n        return dao_;\\n    }\\n\\n    /// @notice A modifier to make functions on inheriting contracts authorized. Permissions to call the function are checked through the associated DAO's permission manager.\\n    /// @param _permissionId The permission identifier required to call the method this modifier is applied to.\\n    modifier auth(bytes32 _permissionId) {\\n        _auth(dao_, address(this), _msgSender(), _permissionId, _msgData());\\n        _;\\n    }\\n\\n    /// @notice This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain (see [OpenZeppelin's guide about storage gaps](https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps)).\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0xd21dcde806070ad8f62acc81d986e517edb5a60ebdff8419660763018f7895e8\",\"license\":\"AGPL-3.0-or-later\"},\"@aragon/osx/core/utils/auth.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity ^0.8.8;\\n\\nimport {IDAO} from \\\"../dao/IDAO.sol\\\";\\n\\n/// @notice Thrown if a call is unauthorized in the associated DAO.\\n/// @param dao The associated DAO.\\n/// @param where The context in which the authorization reverted.\\n/// @param who The address (EOA or contract) missing the permission.\\n/// @param permissionId The permission identifier.\\nerror DaoUnauthorized(address dao, address where, address who, bytes32 permissionId);\\n\\n/// @notice A free function checking if a caller is granted permissions on a target contract via a permission identifier that redirects the approval to a `PermissionCondition` if this was specified in the setup.\\n/// @param _where The address of the target contract for which `who` receives permission.\\n/// @param _who The address (EOA or contract) owning the permission.\\n/// @param _permissionId The permission identifier.\\n/// @param _data The optional data passed to the `PermissionCondition` registered.\\nfunction _auth(\\n    IDAO _dao,\\n    address _where,\\n    address _who,\\n    bytes32 _permissionId,\\n    bytes calldata _data\\n) view {\\n    if (!_dao.hasPermission(_where, _who, _permissionId, _data))\\n        revert DaoUnauthorized({\\n            dao: address(_dao),\\n            where: _where,\\n            who: _who,\\n            permissionId: _permissionId\\n        });\\n}\\n\",\"keccak256\":\"0x1c9cf22583c8b5a08c6d2c02a68d9f05e58900a9bb27efa3b30abca2ecfabfe4\",\"license\":\"AGPL-3.0-or-later\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/Votes.sol)\\npragma solidity ^0.8.20;\\n\\nimport {IERC5805} from \\\"@openzeppelin/contracts/interfaces/IERC5805.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {NoncesUpgradeable} from \\\"../../utils/NoncesUpgradeable.sol\\\";\\nimport {EIP712Upgradeable} from \\\"../../utils/cryptography/EIP712Upgradeable.sol\\\";\\nimport {Checkpoints} from \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {SafeCast} from \\\"@openzeppelin/contracts/utils/math/SafeCast.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {Time} from \\\"@openzeppelin/contracts/utils/types/Time.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev This is a base abstract contract that tracks voting units, which are a measure of voting power that can be\\n * transferred, and provides a system of vote delegation, where an account can delegate its voting units to a sort of\\n * \\\"representative\\\" that will pool delegated voting units from different accounts and can then use it to vote in\\n * decisions. In fact, voting units _must_ be delegated in order to count as actual votes, and an account has to\\n * delegate those votes to itself if it wishes to participate in decisions and does not have a trusted representative.\\n *\\n * This contract is often combined with a token contract such that voting units correspond to token units. For an\\n * example, see {ERC721Votes}.\\n *\\n * The full history of delegate votes is tracked on-chain so that governance protocols can consider votes as distributed\\n * at a particular block number to protect against flash loans and double voting. The opt-in delegate system makes the\\n * cost of this history tracking optional.\\n *\\n * When using this module the derived contract must implement {_getVotingUnits} (for example, make it return\\n * {ERC721-balanceOf}), and can use {_transferVotingUnits} to track a change in the distribution of those units (in the\\n * previous example, it would be included in {ERC721-_update}).\\n */\\nabstract contract VotesUpgradeable is Initializable, ContextUpgradeable, EIP712Upgradeable, NoncesUpgradeable, IERC5805 {\\n    using Checkpoints for Checkpoints.Trace208;\\n\\n    bytes32 private constant DELEGATION_TYPEHASH =\\n        keccak256(\\\"Delegation(address delegatee,uint256 nonce,uint256 expiry)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Votes\\n    struct VotesStorage {\\n        mapping(address account => address) _delegatee;\\n\\n        mapping(address delegatee => Checkpoints.Trace208) _delegateCheckpoints;\\n\\n        Checkpoints.Trace208 _totalCheckpoints;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Votes\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant VotesStorageLocation = 0xe8b26c30fad74198956032a3533d903385d56dd795af560196f9c78d4af40d00;\\n\\n    function _getVotesStorage() private pure returns (VotesStorage storage $) {\\n        assembly {\\n            $.slot := VotesStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The clock was incorrectly modified.\\n     */\\n    error ERC6372InconsistentClock();\\n\\n    /**\\n     * @dev Lookup to future votes is not available.\\n     */\\n    error ERC5805FutureLookup(uint256 timepoint, uint48 clock);\\n\\n    function __Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __Votes_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based\\n     * checkpoints (and voting), in which case {CLOCK_MODE} should be overridden as well to match.\\n     */\\n    function clock() public view virtual returns (uint48) {\\n        return Time.blockNumber();\\n    }\\n\\n    /**\\n     * @dev Machine-readable description of the clock as specified in EIP-6372.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() public view virtual returns (string memory) {\\n        // Check that the clock was not modified\\n        if (clock() != Time.blockNumber()) {\\n            revert ERC6372InconsistentClock();\\n        }\\n        return \\\"mode=blocknumber&from=default\\\";\\n    }\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].latest();\\n    }\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        uint48 currentTimepoint = clock();\\n        if (timepoint >= currentTimepoint) {\\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\\n        }\\n        return $._delegateCheckpoints[account].upperLookupRecent(SafeCast.toUint48(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     *\\n     * Requirements:\\n     *\\n     * - `timepoint` must be in the past. If operating using block numbers, the block must be already mined.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) public view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        uint48 currentTimepoint = clock();\\n        if (timepoint >= currentTimepoint) {\\n            revert ERC5805FutureLookup(timepoint, currentTimepoint);\\n        }\\n        return $._totalCheckpoints.upperLookupRecent(SafeCast.toUint48(timepoint));\\n    }\\n\\n    /**\\n     * @dev Returns the current total supply of votes.\\n     */\\n    function _getTotalSupply() internal view virtual returns (uint256) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._totalCheckpoints.latest();\\n    }\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) public view virtual returns (address) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegatee[account];\\n    }\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) public virtual {\\n        address account = _msgSender();\\n        _delegate(account, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(\\n        address delegatee,\\n        uint256 nonce,\\n        uint256 expiry,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) public virtual {\\n        if (block.timestamp > expiry) {\\n            revert VotesExpiredSignature(expiry);\\n        }\\n        address signer = ECDSA.recover(\\n            _hashTypedDataV4(keccak256(abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry))),\\n            v,\\n            r,\\n            s\\n        );\\n        _useCheckedNonce(signer, nonce);\\n        _delegate(signer, delegatee);\\n    }\\n\\n    /**\\n     * @dev Delegate all of `account`'s voting units to `delegatee`.\\n     *\\n     * Emits events {IVotes-DelegateChanged} and {IVotes-DelegateVotesChanged}.\\n     */\\n    function _delegate(address account, address delegatee) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        address oldDelegate = delegates(account);\\n        $._delegatee[account] = delegatee;\\n\\n        emit DelegateChanged(account, oldDelegate, delegatee);\\n        _moveDelegateVotes(oldDelegate, delegatee, _getVotingUnits(account));\\n    }\\n\\n    /**\\n     * @dev Transfers, mints, or burns voting units. To register a mint, `from` should be zero. To register a burn, `to`\\n     * should be zero. Total supply of voting units will be adjusted with mints and burns.\\n     */\\n    function _transferVotingUnits(address from, address to, uint256 amount) internal virtual {\\n        VotesStorage storage $ = _getVotesStorage();\\n        if (from == address(0)) {\\n            _push($._totalCheckpoints, _add, SafeCast.toUint208(amount));\\n        }\\n        if (to == address(0)) {\\n            _push($._totalCheckpoints, _subtract, SafeCast.toUint208(amount));\\n        }\\n        _moveDelegateVotes(delegates(from), delegates(to), amount);\\n    }\\n\\n    /**\\n     * @dev Moves delegated votes from one delegate to another.\\n     */\\n    function _moveDelegateVotes(address from, address to, uint256 amount) private {\\n        VotesStorage storage $ = _getVotesStorage();\\n        if (from != to && amount > 0) {\\n            if (from != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    $._delegateCheckpoints[from],\\n                    _subtract,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(from, oldValue, newValue);\\n            }\\n            if (to != address(0)) {\\n                (uint256 oldValue, uint256 newValue) = _push(\\n                    $._delegateCheckpoints[to],\\n                    _add,\\n                    SafeCast.toUint208(amount)\\n                );\\n                emit DelegateVotesChanged(to, oldValue, newValue);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function _numCheckpoints(address account) internal view virtual returns (uint32) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return SafeCast.toUint32($._delegateCheckpoints[account].length());\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function _checkpoints(\\n        address account,\\n        uint32 pos\\n    ) internal view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        VotesStorage storage $ = _getVotesStorage();\\n        return $._delegateCheckpoints[account].at(pos);\\n    }\\n\\n    function _push(\\n        Checkpoints.Trace208 storage store,\\n        function(uint208, uint208) view returns (uint208) op,\\n        uint208 delta\\n    ) private returns (uint208, uint208) {\\n        return store.push(clock(), op(store.latest(), delta));\\n    }\\n\\n    function _add(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a + b;\\n    }\\n\\n    function _subtract(uint208 a, uint208 b) private pure returns (uint208) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Must return the voting units held by an account.\\n     */\\n    function _getVotingUnits(address) internal view virtual returns (uint256);\\n}\\n\",\"keccak256\":\"0xa9db28430d1e949a78a2040f08ce0062b39f1ee436d2ca4f7bb3c99001ae0bc3\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/ERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC1155Receiver} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\nimport {IERC1155MetadataURI} from \\\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {ERC165Upgradeable} from \\\"../../utils/introspection/ERC165Upgradeable.sol\\\";\\nimport {Arrays} from \\\"@openzeppelin/contracts/utils/Arrays.sol\\\";\\nimport {IERC1155Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the basic standard multi-token.\\n * See https://eips.ethereum.org/EIPS/eip-1155\\n * Originally based on code by Enjin: https://github.com/enjin/erc-1155\\n */\\nabstract contract ERC1155Upgradeable is Initializable, ContextUpgradeable, ERC165Upgradeable, IERC1155, IERC1155MetadataURI, IERC1155Errors {\\n    using Arrays for uint256[];\\n    using Arrays for address[];\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC1155\\n    struct ERC1155Storage {\\n        mapping(uint256 id => mapping(address account => uint256)) _balances;\\n\\n        mapping(address account => mapping(address operator => bool)) _operatorApprovals;\\n\\n        // Used as the URI for all token types by relying on ID substitution, e.g. https://token-cdn-domain/{id}.json\\n        string _uri;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC1155\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC1155StorageLocation = 0x88be536d5240c274a3b1d3a1be54482fd9caa294f08c62a7cde569f49a3c4500;\\n\\n    function _getERC1155Storage() private pure returns (ERC1155Storage storage $) {\\n        assembly {\\n            $.slot := ERC1155StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev See {_setURI}.\\n     */\\n    function __ERC1155_init(string memory uri_) internal onlyInitializing {\\n        __ERC1155_init_unchained(uri_);\\n    }\\n\\n    function __ERC1155_init_unchained(string memory uri_) internal onlyInitializing {\\n        _setURI(uri_);\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165Upgradeable, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC1155).interfaceId ||\\n            interfaceId == type(IERC1155MetadataURI).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155MetadataURI-uri}.\\n     *\\n     * This implementation returns the same URI for *all* token types. It relies\\n     * on the token type ID substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * Clients calling this function must replace the `\\\\{id\\\\}` substring with the\\n     * actual token type ID.\\n     */\\n    function uri(uint256 /* id */) public view virtual returns (string memory) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._uri;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOf}.\\n     */\\n    function balanceOf(address account, uint256 id) public view virtual returns (uint256) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._balances[id][account];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-balanceOfBatch}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] memory accounts,\\n        uint256[] memory ids\\n    ) public view virtual returns (uint256[] memory) {\\n        if (accounts.length != ids.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, accounts.length);\\n        }\\n\\n        uint256[] memory batchBalances = new uint256[](accounts.length);\\n\\n        for (uint256 i = 0; i < accounts.length; ++i) {\\n            batchBalances[i] = balanceOf(accounts.unsafeMemoryAccess(i), ids.unsafeMemoryAccess(i));\\n        }\\n\\n        return batchBalances;\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) public view virtual returns (bool) {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        return $._operatorApprovals[account][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeTransferFrom(from, to, id, value, data);\\n    }\\n\\n    /**\\n     * @dev See {IERC1155-safeBatchTransferFrom}.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) public virtual {\\n        address sender = _msgSender();\\n        if (from != sender && !isApprovedForAll(from, sender)) {\\n            revert ERC1155MissingApprovalForAll(sender, from);\\n        }\\n        _safeBatchTransferFrom(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`. Will mint (or burn) if `from`\\n     * (or `to`) is the zero address.\\n     *\\n     * Emits a {TransferSingle} event if the arrays contain one element, and {TransferBatch} otherwise.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement either {IERC1155Receiver-onERC1155Received}\\n     *   or {IERC1155Receiver-onERC1155BatchReceived} and return the acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     *\\n     * NOTE: The ERC-1155 acceptance check is not performed in this function. See {_updateWithAcceptanceCheck} instead.\\n     */\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (ids.length != values.length) {\\n            revert ERC1155InvalidArrayLength(ids.length, values.length);\\n        }\\n\\n        address operator = _msgSender();\\n\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            uint256 id = ids.unsafeMemoryAccess(i);\\n            uint256 value = values.unsafeMemoryAccess(i);\\n\\n            if (from != address(0)) {\\n                uint256 fromBalance = $._balances[id][from];\\n                if (fromBalance < value) {\\n                    revert ERC1155InsufficientBalance(from, fromBalance, value, id);\\n                }\\n                unchecked {\\n                    // Overflow not possible: value <= fromBalance\\n                    $._balances[id][from] = fromBalance - value;\\n                }\\n            }\\n\\n            if (to != address(0)) {\\n                $._balances[id][to] += value;\\n            }\\n        }\\n\\n        if (ids.length == 1) {\\n            uint256 id = ids.unsafeMemoryAccess(0);\\n            uint256 value = values.unsafeMemoryAccess(0);\\n            emit TransferSingle(operator, from, to, id, value);\\n        } else {\\n            emit TransferBatch(operator, from, to, ids, values);\\n        }\\n    }\\n\\n    /**\\n     * @dev Version of {_update} that performs the token acceptance check by calling\\n     * {IERC1155Receiver-onERC1155Received} or {IERC1155Receiver-onERC1155BatchReceived} on the receiver address if it\\n     * contains code (eg. is a smart contract at the moment of execution).\\n     *\\n     * IMPORTANT: Overriding this function is discouraged because it poses a reentrancy risk from the receiver. So any\\n     * update to the contract state after this function would break the check-effect-interaction pattern. Consider\\n     * overriding {_update} instead.\\n     */\\n    function _updateWithAcceptanceCheck(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal virtual {\\n        _update(from, to, ids, values);\\n        if (to != address(0)) {\\n            address operator = _msgSender();\\n            if (ids.length == 1) {\\n                uint256 id = ids.unsafeMemoryAccess(0);\\n                uint256 value = values.unsafeMemoryAccess(0);\\n                _doSafeTransferAcceptanceCheck(operator, from, to, id, value, data);\\n            } else {\\n                _doSafeBatchTransferAcceptanceCheck(operator, from, to, ids, values, data);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` tokens of token type `id` from `from` to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_safeTransferFrom}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Sets a new URI for all token types, by relying on the token type ID\\n     * substitution mechanism\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata[defined in the EIP].\\n     *\\n     * By this mechanism, any occurrence of the `\\\\{id\\\\}` substring in either the\\n     * URI or any of the values in the JSON file at said URI will be replaced by\\n     * clients with the token type ID.\\n     *\\n     * For example, the `https://token-cdn-domain/\\\\{id\\\\}.json` URI would be\\n     * interpreted by clients as\\n     * `https://token-cdn-domain/000000000000000000000000000000000000000000000000000000000004cce0.json`\\n     * for token type ID 0x4cce0.\\n     *\\n     * See {uri}.\\n     *\\n     * Because these URIs cannot be meaningfully represented by the {URI} event,\\n     * this function emits no events.\\n     */\\n    function _setURI(string memory newuri) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        $._uri = newuri;\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens of type `id`, and assigns them to `to`.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function _mint(address to, uint256 id, uint256 value, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_mint}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - `to` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function _mintBatch(address to, uint256[] memory ids, uint256[] memory values, bytes memory data) internal {\\n        if (to == address(0)) {\\n            revert ERC1155InvalidReceiver(address(0));\\n        }\\n        _updateWithAcceptanceCheck(address(0), to, ids, values, data);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens of type `id` from `from`\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     */\\n    function _burn(address from, uint256 id, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        (uint256[] memory ids, uint256[] memory values) = _asSingletonArrays(id, value);\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {_burn}.\\n     *\\n     * Emits a {TransferBatch} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `from` must have at least `value` amount of tokens of type `id`.\\n     * - `ids` and `values` must have the same length.\\n     */\\n    function _burnBatch(address from, uint256[] memory ids, uint256[] memory values) internal {\\n        if (from == address(0)) {\\n            revert ERC1155InvalidSender(address(0));\\n        }\\n        _updateWithAcceptanceCheck(from, address(0), ids, values, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the zero address.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        ERC1155Storage storage $ = _getERC1155Storage();\\n        if (operator == address(0)) {\\n            revert ERC1155InvalidOperator(address(0));\\n        }\\n        $._operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Performs an acceptance check by calling {IERC1155-onERC1155Received} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 id,\\n        uint256 value,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155Received(operator, from, id, value, data) returns (bytes4 response) {\\n                if (response != IERC1155Receiver.onERC1155Received.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a batch acceptance check by calling {IERC1155-onERC1155BatchReceived} on the `to` address\\n     * if it contains code at the moment of execution.\\n     */\\n    function _doSafeBatchTransferAcceptanceCheck(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values,\\n        bytes memory data\\n    ) private {\\n        if (to.code.length > 0) {\\n            try IERC1155Receiver(to).onERC1155BatchReceived(operator, from, ids, values, data) returns (\\n                bytes4 response\\n            ) {\\n                if (response != IERC1155Receiver.onERC1155BatchReceived.selector) {\\n                    // Tokens rejected\\n                    revert ERC1155InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    // non-ERC1155Receiver implementer\\n                    revert ERC1155InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Creates an array in memory with only one value for each of the elements provided.\\n     */\\n    function _asSingletonArrays(\\n        uint256 element1,\\n        uint256 element2\\n    ) private pure returns (uint256[] memory array1, uint256[] memory array2) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Load the free memory pointer\\n            array1 := mload(0x40)\\n            // Set array length to 1\\n            mstore(array1, 1)\\n            // Store the single element at the next word after the length (where content starts)\\n            mstore(add(array1, 0x20), element1)\\n\\n            // Repeat for next array locating it right after the first array\\n            array2 := add(array1, 0x40)\\n            mstore(array2, 1)\\n            mstore(add(array2, 0x20), element2)\\n\\n            // Update the free memory pointer by pointing after the second array\\n            mstore(0x40, add(array2, 0x40))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x070826217a19b56724fe97adc7e5daef1d614e45b98ab964bda02b3be01e9870\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ContextUpgradeable} from \\\"../../utils/ContextUpgradeable.sol\\\";\\nimport {IERC20Errors} from \\\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20Upgradeable is Initializable, ContextUpgradeable, IERC20, IERC20Metadata, IERC20Errors {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ERC20\\n    struct ERC20Storage {\\n        mapping(address account => uint256) _balances;\\n\\n        mapping(address account => mapping(address spender => uint256)) _allowances;\\n\\n        uint256 _totalSupply;\\n\\n        string _name;\\n        string _symbol;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ERC20\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ERC20StorageLocation = 0x52c63247e1f47db19d5ce0460030c497f067ca4cebf71ba98eeadabe20bace00;\\n\\n    function _getERC20Storage() private pure returns (ERC20Storage storage $) {\\n        assembly {\\n            $.slot := ERC20StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    function __ERC20_init(string memory name_, string memory symbol_) internal onlyInitializing {\\n        __ERC20_init_unchained(name_, symbol_);\\n    }\\n\\n    function __ERC20_init_unchained(string memory name_, string memory symbol_) internal onlyInitializing {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        $._name = name_;\\n        $._symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        return $._allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            $._totalSupply += value;\\n        } else {\\n            uint256 fromBalance = $._balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                $._balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                $._totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                $._balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        ERC20Storage storage $ = _getERC20Storage();\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        $._allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9a1766b1921bf91b3e61eb53c7a6e70725254befd4bdcbbcd3af40bd9f66856f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Votes.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20Upgradeable} from \\\"../ERC20Upgradeable.sol\\\";\\nimport {VotesUpgradeable} from \\\"../../../governance/utils/VotesUpgradeable.sol\\\";\\nimport {Checkpoints} from \\\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\\\";\\nimport {Initializable} from \\\"../../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Extension of ERC20 to support Compound-like voting and delegation. This version is more generic than Compound's,\\n * and supports token supply up to 2^208^ - 1, while COMP is limited to 2^96^ - 1.\\n *\\n * NOTE: This contract does not provide interface compatibility with Compound's COMP token.\\n *\\n * This extension keeps a history (checkpoints) of each account's vote power. Vote power can be delegated either\\n * by calling the {delegate} function directly, or by providing a signature to be used with {delegateBySig}. Voting\\n * power can be queried through the public accessors {getVotes} and {getPastVotes}.\\n *\\n * By default, token balance does not account for voting power. This makes transfers cheaper. The downside is that it\\n * requires users to delegate to themselves in order to activate checkpoints and have their voting power tracked.\\n */\\nabstract contract ERC20VotesUpgradeable is Initializable, ERC20Upgradeable, VotesUpgradeable {\\n    /**\\n     * @dev Total supply cap has been exceeded, introducing a risk of votes overflowing.\\n     */\\n    error ERC20ExceededSafeSupply(uint256 increasedSupply, uint256 cap);\\n\\n    function __ERC20Votes_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC20Votes_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Maximum token supply. Defaults to `type(uint208).max` (2^208^ - 1).\\n     *\\n     * This maximum is enforced in {_update}. It limits the total supply of the token, which is otherwise a uint256,\\n     * so that checkpoints can be stored in the Trace208 structure used by {{Votes}}. Increasing this value will not\\n     * remove the underlying limitation, and will cause {_update} to fail because of a math overflow in\\n     * {_transferVotingUnits}. An override could be used to further restrict the total supply (to a lower value) if\\n     * additional logic requires it. When resolving override conflicts on this function, the minimum should be\\n     * returned.\\n     */\\n    function _maxSupply() internal view virtual returns (uint256) {\\n        return type(uint208).max;\\n    }\\n\\n    /**\\n     * @dev Move voting power when tokens are transferred.\\n     *\\n     * Emits a {IVotes-DelegateVotesChanged} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual override {\\n        super._update(from, to, value);\\n        if (from == address(0)) {\\n            uint256 supply = totalSupply();\\n            uint256 cap = _maxSupply();\\n            if (supply > cap) {\\n                revert ERC20ExceededSafeSupply(supply, cap);\\n            }\\n        }\\n        _transferVotingUnits(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Returns the voting units of an `account`.\\n     *\\n     * WARNING: Overriding this function may compromise the internal vote accounting.\\n     * `ERC20Votes` assumes tokens map to voting units 1:1 and this is not easy to change.\\n     */\\n    function _getVotingUnits(address account) internal view virtual override returns (uint256) {\\n        return balanceOf(account);\\n    }\\n\\n    /**\\n     * @dev Get number of checkpoints for `account`.\\n     */\\n    function numCheckpoints(address account) public view virtual returns (uint32) {\\n        return _numCheckpoints(account);\\n    }\\n\\n    /**\\n     * @dev Get the `pos`-th checkpoint for `account`.\\n     */\\n    function checkpoints(address account, uint32 pos) public view virtual returns (Checkpoints.Checkpoint208 memory) {\\n        return _checkpoints(account, pos);\\n    }\\n}\\n\",\"keccak256\":\"0x804fafbc589e3c29f075239c21a0f3ee8eff5bb5579cdd27992beb5126a050f2\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/NoncesUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract NoncesUpgradeable is Initializable {\\n    /**\\n     * @dev The nonce used for an `account` is not the expected current nonce.\\n     */\\n    error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Nonces\\n    struct NoncesStorage {\\n        mapping(address account => uint256) _nonces;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Nonces\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant NoncesStorageLocation = 0x5ab42ced628888259c08ac98db1eb0cf702fc1501344311d8b100cd1bfe4bb00;\\n\\n    function _getNoncesStorage() private pure returns (NoncesStorage storage $) {\\n        assembly {\\n            $.slot := NoncesStorageLocation\\n        }\\n    }\\n\\n    function __Nonces_init() internal onlyInitializing {\\n    }\\n\\n    function __Nonces_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the next unused nonce for an address.\\n     */\\n    function nonces(address owner) public view virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        return $._nonces[owner];\\n    }\\n\\n    /**\\n     * @dev Consumes a nonce.\\n     *\\n     * Returns the current value and increments nonce.\\n     */\\n    function _useNonce(address owner) internal virtual returns (uint256) {\\n        NoncesStorage storage $ = _getNoncesStorage();\\n        // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n        // decremented or reset. This guarantees that the nonce never overflows.\\n        unchecked {\\n            // It is important to do x++ and not ++x here.\\n            return $._nonces[owner]++;\\n        }\\n    }\\n\\n    /**\\n     * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n     */\\n    function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n        uint256 current = _useNonce(owner);\\n        if (nonce != current) {\\n            revert InvalidAccountNonce(owner, current);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x778f4a1546a1c6c726ecc8e2348a2789690fb8f26e12bd9d89537669167b79a4\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuardUpgradeable is Initializable {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant NOT_ENTERED = 1;\\n    uint256 private constant ENTERED = 2;\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.ReentrancyGuard\\n    struct ReentrancyGuardStorage {\\n        uint256 _status;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.ReentrancyGuard\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant ReentrancyGuardStorageLocation = 0x9b779b17422d0df92223018b32b4d1fa46e071723d6817e2486d003becc55f00;\\n\\n    function _getReentrancyGuardStorage() private pure returns (ReentrancyGuardStorage storage $) {\\n        assembly {\\n            $.slot := ReentrancyGuardStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Unauthorized reentrant call.\\n     */\\n    error ReentrancyGuardReentrantCall();\\n\\n    function __ReentrancyGuard_init() internal onlyInitializing {\\n        __ReentrancyGuard_init_unchained();\\n    }\\n\\n    function __ReentrancyGuard_init_unchained() internal onlyInitializing {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // On the first call to nonReentrant, _status will be NOT_ENTERED\\n        if ($._status == ENTERED) {\\n            revert ReentrancyGuardReentrantCall();\\n        }\\n\\n        // Any calls to nonReentrant after this point will fail\\n        $._status = ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        $._status = NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Returns true if the reentrancy guard is currently set to \\\"entered\\\", which indicates there is a\\n     * `nonReentrant` function in the call stack.\\n     */\\n    function _reentrancyGuardEntered() internal view returns (bool) {\\n        ReentrancyGuardStorage storage $ = _getReentrancyGuardStorage();\\n        return $._status == ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0xb44e086e941292cdc7f440de51478493894ef0b1aeccb0c4047445919f667f74\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/cryptography/EIP712Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {MessageHashUtils} from \\\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\\\";\\nimport {IERC5267} from \\\"@openzeppelin/contracts/interfaces/IERC5267.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP 712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP 712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n */\\nabstract contract EIP712Upgradeable is Initializable, IERC5267 {\\n    bytes32 private constant TYPE_HASH =\\n        keccak256(\\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\");\\n\\n    /// @custom:storage-location erc7201:openzeppelin.storage.EIP712\\n    struct EIP712Storage {\\n        /// @custom:oz-renamed-from _HASHED_NAME\\n        bytes32 _hashedName;\\n        /// @custom:oz-renamed-from _HASHED_VERSION\\n        bytes32 _hashedVersion;\\n\\n        string _name;\\n        string _version;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.EIP712\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant EIP712StorageLocation = 0xa16a46d94261c7517cc8ff89f61c0ce93598e3c849801011dee649a6a557d100;\\n\\n    function _getEIP712Storage() private pure returns (EIP712Storage storage $) {\\n        assembly {\\n            $.slot := EIP712StorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev Initializes the domain separator and parameter caches.\\n     *\\n     * The meaning of `name` and `version` is specified in\\n     * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP 712]:\\n     *\\n     * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n     * - `version`: the current major version of the signing domain.\\n     *\\n     * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n     * contract upgrade].\\n     */\\n    function __EIP712_init(string memory name, string memory version) internal onlyInitializing {\\n        __EIP712_init_unchained(name, version);\\n    }\\n\\n    function __EIP712_init_unchained(string memory name, string memory version) internal onlyInitializing {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        $._name = name;\\n        $._version = version;\\n\\n        // Reset prior values in storage if upgrading\\n        $._hashedName = 0;\\n        $._hashedVersion = 0;\\n    }\\n\\n    /**\\n     * @dev Returns the domain separator for the current chain.\\n     */\\n    function _domainSeparatorV4() internal view returns (bytes32) {\\n        return _buildDomainSeparator();\\n    }\\n\\n    function _buildDomainSeparator() private view returns (bytes32) {\\n        return keccak256(abi.encode(TYPE_HASH, _EIP712NameHash(), _EIP712VersionHash(), block.chainid, address(this)));\\n    }\\n\\n    /**\\n     * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n     * function returns the hash of the fully encoded EIP712 message for this domain.\\n     *\\n     * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n     *\\n     * ```solidity\\n     * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n     *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n     *     mailTo,\\n     *     keccak256(bytes(mailContents))\\n     * )));\\n     * address signer = ECDSA.recover(digest, signature);\\n     * ```\\n     */\\n    function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n        return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n    }\\n\\n    /**\\n     * @dev See {IERC-5267}.\\n     */\\n    function eip712Domain()\\n        public\\n        view\\n        virtual\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        )\\n    {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        // If the hashed name and version in storage are non-zero, the contract hasn't been properly initialized\\n        // and the EIP712 domain is not reliable, as it will be missing name and version.\\n        require($._hashedName == 0 && $._hashedVersion == 0, \\\"EIP712: Uninitialized\\\");\\n\\n        return (\\n            hex\\\"0f\\\", // 01111\\n            _EIP712Name(),\\n            _EIP712Version(),\\n            block.chainid,\\n            address(this),\\n            bytes32(0),\\n            new uint256[](0)\\n        );\\n    }\\n\\n    /**\\n     * @dev The name parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Name() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._name;\\n    }\\n\\n    /**\\n     * @dev The version parameter for the EIP712 domain.\\n     *\\n     * NOTE: This function reads from storage by default, but can be redefined to return a constant value if gas costs\\n     * are a concern.\\n     */\\n    function _EIP712Version() internal view virtual returns (string memory) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        return $._version;\\n    }\\n\\n    /**\\n     * @dev The hash of the name parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Name` instead.\\n     */\\n    function _EIP712NameHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory name = _EIP712Name();\\n        if (bytes(name).length > 0) {\\n            return keccak256(bytes(name));\\n        } else {\\n            // If the name is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the name hash in storage if non-zero, otherwise we assume the name is empty by design.\\n            bytes32 hashedName = $._hashedName;\\n            if (hashedName != 0) {\\n                return hashedName;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev The hash of the version parameter for the EIP712 domain.\\n     *\\n     * NOTE: In previous versions this function was virtual. In this version you should override `_EIP712Version` instead.\\n     */\\n    function _EIP712VersionHash() internal view returns (bytes32) {\\n        EIP712Storage storage $ = _getEIP712Storage();\\n        string memory version = _EIP712Version();\\n        if (bytes(version).length > 0) {\\n            return keccak256(bytes(version));\\n        } else {\\n            // If the version is empty, the contract may have been upgraded without initializing the new storage.\\n            // We return the version hash in storage if non-zero, otherwise we assume the version is empty by design.\\n            bytes32 hashedVersion = $._hashedVersion;\\n            if (hashedVersion != 0) {\\n                return hashedVersion;\\n            } else {\\n                return keccak256(\\\"\\\");\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x85462422a22578744581e012e9aa0a391958cb360288b0b63f29bf0431d70327\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {Initializable} from \\\"../../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165Upgradeable is Initializable, IERC165 {\\n    function __ERC165_init() internal onlyInitializing {\\n    }\\n\\n    function __ERC165_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xdaba3f7c42c55b2896353f32bd27d4d5f8bae741b3b05d4c53f67abc4dc47ce8\",\"license\":\"MIT\"},\"@openzeppelin/contracts/governance/utils/IVotes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (governance/utils/IVotes.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Common interface for {ERC20Votes}, {ERC721Votes}, and other {Votes}-enabled contracts.\\n */\\ninterface IVotes {\\n    /**\\n     * @dev The signature used has expired.\\n     */\\n    error VotesExpiredSignature(uint256 expiry);\\n\\n    /**\\n     * @dev Emitted when an account changes their delegate.\\n     */\\n    event DelegateChanged(address indexed delegator, address indexed fromDelegate, address indexed toDelegate);\\n\\n    /**\\n     * @dev Emitted when a token transfer or delegate change results in changes to a delegate's number of voting units.\\n     */\\n    event DelegateVotesChanged(address indexed delegate, uint256 previousVotes, uint256 newVotes);\\n\\n    /**\\n     * @dev Returns the current amount of votes that `account` has.\\n     */\\n    function getVotes(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of votes that `account` had at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     */\\n    function getPastVotes(address account, uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the total supply of votes available at a specific moment in the past. If the `clock()` is\\n     * configured to use block numbers, this will return the value at the end of the corresponding block.\\n     *\\n     * NOTE: This value is the sum of all available votes, which is not necessarily the sum of all delegated votes.\\n     * Votes that have not been delegated are still part of total supply, even though they would not participate in a\\n     * vote.\\n     */\\n    function getPastTotalSupply(uint256 timepoint) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the delegate that `account` has chosen.\\n     */\\n    function delegates(address account) external view returns (address);\\n\\n    /**\\n     * @dev Delegates votes from the sender to `delegatee`.\\n     */\\n    function delegate(address delegatee) external;\\n\\n    /**\\n     * @dev Delegates votes from signer to `delegatee`.\\n     */\\n    function delegateBySig(address delegatee, uint256 nonce, uint256 expiry, uint8 v, bytes32 r, bytes32 s) external;\\n}\\n\",\"keccak256\":\"0x5e2b397ae88fd5c68e4f6762eb9f65f65c36702eb57796495f471d024ce70947\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../token/ERC1155/IERC1155.sol\\\";\\n\",\"keccak256\":\"0x1528f3ef49ef2750b428564df007feb2d5c7a792bf79c6d125409c96322a4c00\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC5267 {\\n    /**\\n     * @dev MAY be emitted to signal that the domain could have changed.\\n     */\\n    event EIP712DomainChanged();\\n\\n    /**\\n     * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n     * signature.\\n     */\\n    function eip712Domain()\\n        external\\n        view\\n        returns (\\n            bytes1 fields,\\n            string memory name,\\n            string memory version,\\n            uint256 chainId,\\n            address verifyingContract,\\n            bytes32 salt,\\n            uint256[] memory extensions\\n        );\\n}\\n\",\"keccak256\":\"0x92aa1df62dc3d33f1656d63bede0923e0df0b706ad4137c8b10b0a8fe549fd92\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC5805.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5805.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IVotes} from \\\"../governance/utils/IVotes.sol\\\";\\nimport {IERC6372} from \\\"./IERC6372.sol\\\";\\n\\ninterface IERC5805 is IERC6372, IVotes {}\\n\",\"keccak256\":\"0x4b9b89f91adbb7d3574f85394754cfb08c5b4eafca8a7061e2094a019ab8f818\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC6372.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC6372.sol)\\n\\npragma solidity ^0.8.20;\\n\\ninterface IERC6372 {\\n    /**\\n     * @dev Clock used for flagging checkpoints. Can be overridden to implement timestamp based checkpoints (and voting).\\n     */\\n    function clock() external view returns (uint48);\\n\\n    /**\\n     * @dev Description of the clock\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function CLOCK_MODE() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xeb2857b7dafb7e0d8526dbfe794e6c047df2851c9e6ee91dc4a55f3c34af5d33\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n */\\nlibrary Clones {\\n    /**\\n     * @dev A clone instance deployment failed.\\n     */\\n    error ERC1167FailedCreateClone();\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        if (instance == address(0)) {\\n            revert ERC1167FailedCreateClone();\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt\\n    ) internal view returns (address predicted) {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0xd18408af8a91bedb3d56343eeb9b30eb852e6dea93a5e2d5c6db9ca4cb905155\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (token/ERC1155/IERC1155.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC1155 compliant contract, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-1155[EIP].\\n */\\ninterface IERC1155 is IERC165 {\\n    /**\\n     * @dev Emitted when `value` amount of tokens of type `id` are transferred from `from` to `to` by `operator`.\\n     */\\n    event TransferSingle(address indexed operator, address indexed from, address indexed to, uint256 id, uint256 value);\\n\\n    /**\\n     * @dev Equivalent to multiple {TransferSingle} events, where `operator`, `from` and `to` are the same for all\\n     * transfers.\\n     */\\n    event TransferBatch(\\n        address indexed operator,\\n        address indexed from,\\n        address indexed to,\\n        uint256[] ids,\\n        uint256[] values\\n    );\\n\\n    /**\\n     * @dev Emitted when `account` grants or revokes permission to `operator` to transfer their tokens, according to\\n     * `approved`.\\n     */\\n    event ApprovalForAll(address indexed account, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Emitted when the URI for token type `id` changes to `value`, if it is a non-programmatic URI.\\n     *\\n     * If an {URI} event was emitted for `id`, the standard\\n     * https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[guarantees] that `value` will equal the value\\n     * returned by {IERC1155MetadataURI-uri}.\\n     */\\n    event URI(string value, uint256 indexed id);\\n\\n    /**\\n     * @dev Returns the value of tokens of token type `id` owned by `account`.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function balanceOf(address account, uint256 id) external view returns (uint256);\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {balanceOf}.\\n     *\\n     * Requirements:\\n     *\\n     * - `accounts` and `ids` must have the same length.\\n     */\\n    function balanceOfBatch(\\n        address[] calldata accounts,\\n        uint256[] calldata ids\\n    ) external view returns (uint256[] memory);\\n\\n    /**\\n     * @dev Grants or revokes permission to `operator` to transfer the caller's tokens, according to `approved`,\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `operator` cannot be the caller.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns true if `operator` is approved to transfer ``account``'s tokens.\\n     *\\n     * See {setApprovalForAll}.\\n     */\\n    function isApprovedForAll(address account, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens of type `id` from `from` to `to`.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155Received} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits a {TransferSingle} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - If the caller is not `from`, it must have been approved to spend ``from``'s tokens via {setApprovalForAll}.\\n     * - `from` must have a balance of tokens of type `id` of at least `value` amount.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155Received} and return the\\n     * acceptance magic value.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 id, uint256 value, bytes calldata data) external;\\n\\n    /**\\n     * @dev xref:ROOT:erc1155.adoc#batch-operations[Batched] version of {safeTransferFrom}.\\n     *\\n     * WARNING: This function can potentially allow a reentrancy attack when transferring tokens\\n     * to an untrusted contract, when invoking {onERC1155BatchReceived} on the receiver.\\n     * Ensure to follow the checks-effects-interactions pattern and consider employing\\n     * reentrancy guards when interacting with untrusted contracts.\\n     *\\n     * Emits either a {TransferSingle} or a {TransferBatch} event, depending on the length of the array arguments.\\n     *\\n     * Requirements:\\n     *\\n     * - `ids` and `values` must have the same length.\\n     * - If `to` refers to a smart contract, it must implement {IERC1155Receiver-onERC1155BatchReceived} and return the\\n     * acceptance magic value.\\n     */\\n    function safeBatchTransferFrom(\\n        address from,\\n        address to,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0x6caffc9cfdc623eca9f87a686071708af5d5c17454d65022843fdddbc53c0cce\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Interface that must be implemented by smart contracts in order to receive\\n * ERC-1155 token transfers.\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xb69597a63b202e28401128bed6a6d259e8730191274471af7303eafb247881a3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/extensions/IERC1155MetadataURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC1155/extensions/IERC1155MetadataURI.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"../IERC1155.sol\\\";\\n\\n/**\\n * @dev Interface of the optional ERC1155MetadataExtension interface, as defined\\n * in the https://eips.ethereum.org/EIPS/eip-1155#metadata-extensions[EIP].\\n */\\ninterface IERC1155MetadataURI is IERC1155 {\\n    /**\\n     * @dev Returns the URI for token type `id`.\\n     *\\n     * If the `\\\\{id\\\\}` substring is present in the URI, it must be replaced by\\n     * clients with the actual token type ID.\\n     */\\n    function uri(uint256 id) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xe92b5e199b963d108ad6e06feeede151ba23849e0d064956535489ff967ffe68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Arrays.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Arrays.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {StorageSlot} from \\\"./StorageSlot.sol\\\";\\nimport {Math} from \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev Collection of functions related to array types.\\n */\\nlibrary Arrays {\\n    using StorageSlot for bytes32;\\n\\n    /**\\n     * @dev Searches a sorted `array` and returns the first index that contains\\n     * a value greater or equal to `element`. If no such index exists (i.e. all\\n     * values in the array are strictly less than `element`), the array length is\\n     * returned. Time complexity O(log n).\\n     *\\n     * `array` is expected to be sorted in ascending order, and to contain no\\n     * repeated elements.\\n     */\\n    function findUpperBound(uint256[] storage array, uint256 element) internal view returns (uint256) {\\n        uint256 low = 0;\\n        uint256 high = array.length;\\n\\n        if (high == 0) {\\n            return 0;\\n        }\\n\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n\\n            // Note that mid will always be strictly less than high (i.e. it will be a valid array index)\\n            // because Math.average rounds towards zero (it does integer division with truncation).\\n            if (unsafeAccess(array, mid).value > element) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        // At this point `low` is the exclusive upper bound. We will return the inclusive upper bound.\\n        if (low > 0 && unsafeAccess(array, low - 1).value == element) {\\n            return low - 1;\\n        } else {\\n            return low;\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(address[] storage arr, uint256 pos) internal pure returns (StorageSlot.AddressSlot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getAddressSlot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(bytes32[] storage arr, uint256 pos) internal pure returns (StorageSlot.Bytes32Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getBytes32Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeAccess(uint256[] storage arr, uint256 pos) internal pure returns (StorageSlot.Uint256Slot storage) {\\n        bytes32 slot;\\n        // We use assembly to calculate the storage slot of the element at index `pos` of the dynamic array `arr`\\n        // following https://docs.soliditylang.org/en/v0.8.20/internals/layout_in_storage.html#mappings-and-dynamic-arrays.\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0, arr.slot)\\n            slot := add(keccak256(0, 0x20), pos)\\n        }\\n        return slot.getUint256Slot();\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(uint256[] memory arr, uint256 pos) internal pure returns (uint256 res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n\\n    /**\\n     * @dev Access an array in an \\\"unsafe\\\" way. Skips solidity \\\"index-out-of-range\\\" check.\\n     *\\n     * WARNING: Only use if you are certain `pos` is lower than the array length.\\n     */\\n    function unsafeMemoryAccess(address[] memory arr, uint256 pos) internal pure returns (address res) {\\n        assembly {\\n            res := mload(add(add(arr, 0x20), mul(pos, 0x20)))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x8806d620b6571932b662cfd48fbd518d4f70df1f88a23b5724cacde64a77bda1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    struct StringSlot {\\n        string value;\\n    }\\n\\n    struct BytesSlot {\\n        bytes value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\\n     */\\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n     */\\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\\n     */\\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n     */\\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := store.slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x32ba59b4b7299237c8ba56319110989d7978a039faf754793064e967e5894418\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS\\n    }\\n\\n    /**\\n     * @dev The signature derives the `address(0)`.\\n     */\\n    error ECDSAInvalidSignature();\\n\\n    /**\\n     * @dev The signature has an invalid length.\\n     */\\n    error ECDSAInvalidSignatureLength(uint256 length);\\n\\n    /**\\n     * @dev The signature has an S value that is in the upper half order.\\n     */\\n    error ECDSAInvalidSignatureS(bytes32 s);\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n     * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n     * and a bytes32 providing additional information about the error.\\n     *\\n     * If no error is returned, then the address can be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError, bytes32) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     */\\n    function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address, RecoverError, bytes32) {\\n        unchecked {\\n            bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n            // We do not check for an overflow here since the shift operation results in 0 or 1.\\n            uint8 v = uint8((uint256(vs) >> 255) + 27);\\n            return tryRecover(hash, v, r, s);\\n        }\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     */\\n    function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError, bytes32) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS, s);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n        }\\n\\n        return (signer, RecoverError.NoError, bytes32(0));\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n        (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n        _throwError(error, errorArg);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n     */\\n    function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert ECDSAInvalidSignature();\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert ECDSAInvalidSignatureS(errorArg);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xeed0a08b0b091f528356cbc7245891a4c748682d4f6a18055e8e6ca77d12a6cf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Strings} from \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[EIP 191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing a bytes32 `messageHash` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n     * keccak256, although any bytes32 value can be safely used because the final digest will\\n     * be re-hashed.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, \\\"\\\\x19Ethereum Signed Message:\\\\n32\\\") // 32 is the bytes-length of messageHash\\n            mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n            digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x45` (`personal_sign` messages).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `message` with\\n     * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n     * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n        return\\n            keccak256(bytes.concat(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", bytes(Strings.toString(message.length)), message));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-191 signed data with version\\n     * `0x00` (data with intended validator).\\n     *\\n     * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n     * `validator` address. Then hashing the result.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(hex\\\"19_00\\\", validator, data));\\n    }\\n\\n    /**\\n     * @dev Returns the keccak256 digest of an EIP-712 typed data (EIP-191 version `0x01`).\\n     *\\n     * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n     * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n     *\\n     * See {ECDSA-recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(ptr, hex\\\"19_01\\\")\\n            mstore(add(ptr, 0x02), domainSeparator)\\n            mstore(add(ptr, 0x22), structHash)\\n            digest := keccak256(ptr, 0x42)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xba333517a3add42cd35fe877656fc3dfcc9de53baa4f3aabbd6d12a92e4ea435\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165Checker.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Library used to query support of an interface declared via {IERC165}.\\n *\\n * Note that these functions return the actual result of the query: they do not\\n * `revert` if an interface is not supported. It is up to the caller to decide\\n * what to do in these cases.\\n */\\nlibrary ERC165Checker {\\n    // As per the EIP-165 spec, no interface should ever match 0xffffffff\\n    bytes4 private constant INTERFACE_ID_INVALID = 0xffffffff;\\n\\n    /**\\n     * @dev Returns true if `account` supports the {IERC165} interface.\\n     */\\n    function supportsERC165(address account) internal view returns (bool) {\\n        // Any contract that implements ERC165 must explicitly indicate support of\\n        // InterfaceId_ERC165 and explicitly indicate non-support of InterfaceId_Invalid\\n        return\\n            supportsERC165InterfaceUnchecked(account, type(IERC165).interfaceId) &&\\n            !supportsERC165InterfaceUnchecked(account, INTERFACE_ID_INVALID);\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports the interface defined by\\n     * `interfaceId`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // query support of both ERC165 as per the spec and support of _interfaceId\\n        return supportsERC165(account) && supportsERC165InterfaceUnchecked(account, interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns a boolean array where each value corresponds to the\\n     * interfaces passed in and whether they're supported or not. This allows\\n     * you to batch check interfaces for a contract where your expectation\\n     * is that some interfaces may not be supported.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function getSupportedInterfaces(\\n        address account,\\n        bytes4[] memory interfaceIds\\n    ) internal view returns (bool[] memory) {\\n        // an array of booleans corresponding to interfaceIds and whether they're supported or not\\n        bool[] memory interfaceIdsSupported = new bool[](interfaceIds.length);\\n\\n        // query support of ERC165 itself\\n        if (supportsERC165(account)) {\\n            // query support of each interface in interfaceIds\\n            for (uint256 i = 0; i < interfaceIds.length; i++) {\\n                interfaceIdsSupported[i] = supportsERC165InterfaceUnchecked(account, interfaceIds[i]);\\n            }\\n        }\\n\\n        return interfaceIdsSupported;\\n    }\\n\\n    /**\\n     * @dev Returns true if `account` supports all the interfaces defined in\\n     * `interfaceIds`. Support for {IERC165} itself is queried automatically.\\n     *\\n     * Batch-querying can lead to gas savings by skipping repeated checks for\\n     * {IERC165} support.\\n     *\\n     * See {IERC165-supportsInterface}.\\n     */\\n    function supportsAllInterfaces(address account, bytes4[] memory interfaceIds) internal view returns (bool) {\\n        // query support of ERC165 itself\\n        if (!supportsERC165(account)) {\\n            return false;\\n        }\\n\\n        // query support of each interface in interfaceIds\\n        for (uint256 i = 0; i < interfaceIds.length; i++) {\\n            if (!supportsERC165InterfaceUnchecked(account, interfaceIds[i])) {\\n                return false;\\n            }\\n        }\\n\\n        // all interfaces supported\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Query if a contract implements an interface, does not check ERC165 support\\n     * @param account The address of the contract to query for support of an interface\\n     * @param interfaceId The interface identifier, as specified in ERC-165\\n     * @return true if the contract at account indicates support of the interface with\\n     * identifier interfaceId, false otherwise\\n     * @dev Assumes that account contains a contract that supports ERC165, otherwise\\n     * the behavior of this method is undefined. This precondition can be checked\\n     * with {supportsERC165}.\\n     *\\n     * Some precompiled contracts will falsely indicate support for a given interface, so caution\\n     * should be exercised when using this function.\\n     *\\n     * Interface identification is specified in ERC-165.\\n     */\\n    function supportsERC165InterfaceUnchecked(address account, bytes4 interfaceId) internal view returns (bool) {\\n        // prepare call\\n        bytes memory encodedParams = abi.encodeCall(IERC165.supportsInterface, (interfaceId));\\n\\n        // perform static call\\n        bool success;\\n        uint256 returnSize;\\n        uint256 returnValue;\\n        assembly {\\n            success := staticcall(30000, account, add(encodedParams, 0x20), mload(encodedParams), 0x00, 0x20)\\n            returnSize := returndatasize()\\n            returnValue := mload(0x00)\\n        }\\n\\n        return success && returnSize >= 0x20 && returnValue > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xac3d50e321a48a40b4496970ce725900f13aeb2255b7c1203f5adbe98c4a911a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n    /**\\n     * @dev Value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n    /**\\n     * @dev An int value doesn't fit in an uint of `bits` size.\\n     */\\n    error SafeCastOverflowedIntToUint(int256 value);\\n\\n    /**\\n     * @dev Value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n    /**\\n     * @dev An uint value doesn't fit in an int of `bits` size.\\n     */\\n    error SafeCastOverflowedUintToInt(uint256 value);\\n\\n    /**\\n     * @dev Returns the downcasted uint248 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint248).\\n     *\\n     * Counterpart to Solidity's `uint248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toUint248(uint256 value) internal pure returns (uint248) {\\n        if (value > type(uint248).max) {\\n            revert SafeCastOverflowedUintDowncast(248, value);\\n        }\\n        return uint248(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint240 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint240).\\n     *\\n     * Counterpart to Solidity's `uint240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toUint240(uint256 value) internal pure returns (uint240) {\\n        if (value > type(uint240).max) {\\n            revert SafeCastOverflowedUintDowncast(240, value);\\n        }\\n        return uint240(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint232 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint232).\\n     *\\n     * Counterpart to Solidity's `uint232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toUint232(uint256 value) internal pure returns (uint232) {\\n        if (value > type(uint232).max) {\\n            revert SafeCastOverflowedUintDowncast(232, value);\\n        }\\n        return uint232(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint224 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint224).\\n     *\\n     * Counterpart to Solidity's `uint224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toUint224(uint256 value) internal pure returns (uint224) {\\n        if (value > type(uint224).max) {\\n            revert SafeCastOverflowedUintDowncast(224, value);\\n        }\\n        return uint224(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint216 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint216).\\n     *\\n     * Counterpart to Solidity's `uint216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toUint216(uint256 value) internal pure returns (uint216) {\\n        if (value > type(uint216).max) {\\n            revert SafeCastOverflowedUintDowncast(216, value);\\n        }\\n        return uint216(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint208 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint208).\\n     *\\n     * Counterpart to Solidity's `uint208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toUint208(uint256 value) internal pure returns (uint208) {\\n        if (value > type(uint208).max) {\\n            revert SafeCastOverflowedUintDowncast(208, value);\\n        }\\n        return uint208(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint200 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint200).\\n     *\\n     * Counterpart to Solidity's `uint200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toUint200(uint256 value) internal pure returns (uint200) {\\n        if (value > type(uint200).max) {\\n            revert SafeCastOverflowedUintDowncast(200, value);\\n        }\\n        return uint200(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint192 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint192).\\n     *\\n     * Counterpart to Solidity's `uint192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toUint192(uint256 value) internal pure returns (uint192) {\\n        if (value > type(uint192).max) {\\n            revert SafeCastOverflowedUintDowncast(192, value);\\n        }\\n        return uint192(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint184 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint184).\\n     *\\n     * Counterpart to Solidity's `uint184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toUint184(uint256 value) internal pure returns (uint184) {\\n        if (value > type(uint184).max) {\\n            revert SafeCastOverflowedUintDowncast(184, value);\\n        }\\n        return uint184(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint176 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint176).\\n     *\\n     * Counterpart to Solidity's `uint176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toUint176(uint256 value) internal pure returns (uint176) {\\n        if (value > type(uint176).max) {\\n            revert SafeCastOverflowedUintDowncast(176, value);\\n        }\\n        return uint176(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint168 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint168).\\n     *\\n     * Counterpart to Solidity's `uint168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toUint168(uint256 value) internal pure returns (uint168) {\\n        if (value > type(uint168).max) {\\n            revert SafeCastOverflowedUintDowncast(168, value);\\n        }\\n        return uint168(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint160 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint160).\\n     *\\n     * Counterpart to Solidity's `uint160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toUint160(uint256 value) internal pure returns (uint160) {\\n        if (value > type(uint160).max) {\\n            revert SafeCastOverflowedUintDowncast(160, value);\\n        }\\n        return uint160(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint152 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint152).\\n     *\\n     * Counterpart to Solidity's `uint152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toUint152(uint256 value) internal pure returns (uint152) {\\n        if (value > type(uint152).max) {\\n            revert SafeCastOverflowedUintDowncast(152, value);\\n        }\\n        return uint152(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint144 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint144).\\n     *\\n     * Counterpart to Solidity's `uint144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toUint144(uint256 value) internal pure returns (uint144) {\\n        if (value > type(uint144).max) {\\n            revert SafeCastOverflowedUintDowncast(144, value);\\n        }\\n        return uint144(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint136 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint136).\\n     *\\n     * Counterpart to Solidity's `uint136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toUint136(uint256 value) internal pure returns (uint136) {\\n        if (value > type(uint136).max) {\\n            revert SafeCastOverflowedUintDowncast(136, value);\\n        }\\n        return uint136(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint128 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint128).\\n     *\\n     * Counterpart to Solidity's `uint128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toUint128(uint256 value) internal pure returns (uint128) {\\n        if (value > type(uint128).max) {\\n            revert SafeCastOverflowedUintDowncast(128, value);\\n        }\\n        return uint128(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint120 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint120).\\n     *\\n     * Counterpart to Solidity's `uint120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toUint120(uint256 value) internal pure returns (uint120) {\\n        if (value > type(uint120).max) {\\n            revert SafeCastOverflowedUintDowncast(120, value);\\n        }\\n        return uint120(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint112 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint112).\\n     *\\n     * Counterpart to Solidity's `uint112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toUint112(uint256 value) internal pure returns (uint112) {\\n        if (value > type(uint112).max) {\\n            revert SafeCastOverflowedUintDowncast(112, value);\\n        }\\n        return uint112(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint104 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint104).\\n     *\\n     * Counterpart to Solidity's `uint104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toUint104(uint256 value) internal pure returns (uint104) {\\n        if (value > type(uint104).max) {\\n            revert SafeCastOverflowedUintDowncast(104, value);\\n        }\\n        return uint104(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint96 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint96).\\n     *\\n     * Counterpart to Solidity's `uint96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toUint96(uint256 value) internal pure returns (uint96) {\\n        if (value > type(uint96).max) {\\n            revert SafeCastOverflowedUintDowncast(96, value);\\n        }\\n        return uint96(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint88 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint88).\\n     *\\n     * Counterpart to Solidity's `uint88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toUint88(uint256 value) internal pure returns (uint88) {\\n        if (value > type(uint88).max) {\\n            revert SafeCastOverflowedUintDowncast(88, value);\\n        }\\n        return uint88(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint80 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint80).\\n     *\\n     * Counterpart to Solidity's `uint80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toUint80(uint256 value) internal pure returns (uint80) {\\n        if (value > type(uint80).max) {\\n            revert SafeCastOverflowedUintDowncast(80, value);\\n        }\\n        return uint80(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint72 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint72).\\n     *\\n     * Counterpart to Solidity's `uint72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toUint72(uint256 value) internal pure returns (uint72) {\\n        if (value > type(uint72).max) {\\n            revert SafeCastOverflowedUintDowncast(72, value);\\n        }\\n        return uint72(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint64 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint64).\\n     *\\n     * Counterpart to Solidity's `uint64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toUint64(uint256 value) internal pure returns (uint64) {\\n        if (value > type(uint64).max) {\\n            revert SafeCastOverflowedUintDowncast(64, value);\\n        }\\n        return uint64(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint56 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint56).\\n     *\\n     * Counterpart to Solidity's `uint56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toUint56(uint256 value) internal pure returns (uint56) {\\n        if (value > type(uint56).max) {\\n            revert SafeCastOverflowedUintDowncast(56, value);\\n        }\\n        return uint56(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint48 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint48).\\n     *\\n     * Counterpart to Solidity's `uint48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toUint48(uint256 value) internal pure returns (uint48) {\\n        if (value > type(uint48).max) {\\n            revert SafeCastOverflowedUintDowncast(48, value);\\n        }\\n        return uint48(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint40 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint40).\\n     *\\n     * Counterpart to Solidity's `uint40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toUint40(uint256 value) internal pure returns (uint40) {\\n        if (value > type(uint40).max) {\\n            revert SafeCastOverflowedUintDowncast(40, value);\\n        }\\n        return uint40(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint32 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint32).\\n     *\\n     * Counterpart to Solidity's `uint32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toUint32(uint256 value) internal pure returns (uint32) {\\n        if (value > type(uint32).max) {\\n            revert SafeCastOverflowedUintDowncast(32, value);\\n        }\\n        return uint32(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint24 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint24).\\n     *\\n     * Counterpart to Solidity's `uint24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toUint24(uint256 value) internal pure returns (uint24) {\\n        if (value > type(uint24).max) {\\n            revert SafeCastOverflowedUintDowncast(24, value);\\n        }\\n        return uint24(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint16 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint16).\\n     *\\n     * Counterpart to Solidity's `uint16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toUint16(uint256 value) internal pure returns (uint16) {\\n        if (value > type(uint16).max) {\\n            revert SafeCastOverflowedUintDowncast(16, value);\\n        }\\n        return uint16(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted uint8 from uint256, reverting on\\n     * overflow (when the input is greater than largest uint8).\\n     *\\n     * Counterpart to Solidity's `uint8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toUint8(uint256 value) internal pure returns (uint8) {\\n        if (value > type(uint8).max) {\\n            revert SafeCastOverflowedUintDowncast(8, value);\\n        }\\n        return uint8(value);\\n    }\\n\\n    /**\\n     * @dev Converts a signed int256 into an unsigned uint256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be greater than or equal to 0.\\n     */\\n    function toUint256(int256 value) internal pure returns (uint256) {\\n        if (value < 0) {\\n            revert SafeCastOverflowedIntToUint(value);\\n        }\\n        return uint256(value);\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int248 from int256, reverting on\\n     * overflow (when the input is less than smallest int248 or\\n     * greater than largest int248).\\n     *\\n     * Counterpart to Solidity's `int248` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 248 bits\\n     */\\n    function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n        downcasted = int248(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(248, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int240 from int256, reverting on\\n     * overflow (when the input is less than smallest int240 or\\n     * greater than largest int240).\\n     *\\n     * Counterpart to Solidity's `int240` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 240 bits\\n     */\\n    function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n        downcasted = int240(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(240, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int232 from int256, reverting on\\n     * overflow (when the input is less than smallest int232 or\\n     * greater than largest int232).\\n     *\\n     * Counterpart to Solidity's `int232` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 232 bits\\n     */\\n    function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n        downcasted = int232(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(232, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int224 from int256, reverting on\\n     * overflow (when the input is less than smallest int224 or\\n     * greater than largest int224).\\n     *\\n     * Counterpart to Solidity's `int224` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 224 bits\\n     */\\n    function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n        downcasted = int224(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(224, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int216 from int256, reverting on\\n     * overflow (when the input is less than smallest int216 or\\n     * greater than largest int216).\\n     *\\n     * Counterpart to Solidity's `int216` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 216 bits\\n     */\\n    function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n        downcasted = int216(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(216, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int208 from int256, reverting on\\n     * overflow (when the input is less than smallest int208 or\\n     * greater than largest int208).\\n     *\\n     * Counterpart to Solidity's `int208` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 208 bits\\n     */\\n    function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n        downcasted = int208(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(208, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int200 from int256, reverting on\\n     * overflow (when the input is less than smallest int200 or\\n     * greater than largest int200).\\n     *\\n     * Counterpart to Solidity's `int200` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 200 bits\\n     */\\n    function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n        downcasted = int200(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(200, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int192 from int256, reverting on\\n     * overflow (when the input is less than smallest int192 or\\n     * greater than largest int192).\\n     *\\n     * Counterpart to Solidity's `int192` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 192 bits\\n     */\\n    function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n        downcasted = int192(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(192, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int184 from int256, reverting on\\n     * overflow (when the input is less than smallest int184 or\\n     * greater than largest int184).\\n     *\\n     * Counterpart to Solidity's `int184` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 184 bits\\n     */\\n    function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n        downcasted = int184(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(184, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int176 from int256, reverting on\\n     * overflow (when the input is less than smallest int176 or\\n     * greater than largest int176).\\n     *\\n     * Counterpart to Solidity's `int176` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 176 bits\\n     */\\n    function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n        downcasted = int176(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(176, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int168 from int256, reverting on\\n     * overflow (when the input is less than smallest int168 or\\n     * greater than largest int168).\\n     *\\n     * Counterpart to Solidity's `int168` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 168 bits\\n     */\\n    function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n        downcasted = int168(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(168, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int160 from int256, reverting on\\n     * overflow (when the input is less than smallest int160 or\\n     * greater than largest int160).\\n     *\\n     * Counterpart to Solidity's `int160` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 160 bits\\n     */\\n    function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n        downcasted = int160(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(160, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int152 from int256, reverting on\\n     * overflow (when the input is less than smallest int152 or\\n     * greater than largest int152).\\n     *\\n     * Counterpart to Solidity's `int152` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 152 bits\\n     */\\n    function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n        downcasted = int152(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(152, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int144 from int256, reverting on\\n     * overflow (when the input is less than smallest int144 or\\n     * greater than largest int144).\\n     *\\n     * Counterpart to Solidity's `int144` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 144 bits\\n     */\\n    function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n        downcasted = int144(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(144, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int136 from int256, reverting on\\n     * overflow (when the input is less than smallest int136 or\\n     * greater than largest int136).\\n     *\\n     * Counterpart to Solidity's `int136` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 136 bits\\n     */\\n    function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n        downcasted = int136(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(136, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int128 from int256, reverting on\\n     * overflow (when the input is less than smallest int128 or\\n     * greater than largest int128).\\n     *\\n     * Counterpart to Solidity's `int128` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 128 bits\\n     */\\n    function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n        downcasted = int128(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(128, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int120 from int256, reverting on\\n     * overflow (when the input is less than smallest int120 or\\n     * greater than largest int120).\\n     *\\n     * Counterpart to Solidity's `int120` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 120 bits\\n     */\\n    function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n        downcasted = int120(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(120, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int112 from int256, reverting on\\n     * overflow (when the input is less than smallest int112 or\\n     * greater than largest int112).\\n     *\\n     * Counterpart to Solidity's `int112` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 112 bits\\n     */\\n    function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n        downcasted = int112(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(112, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int104 from int256, reverting on\\n     * overflow (when the input is less than smallest int104 or\\n     * greater than largest int104).\\n     *\\n     * Counterpart to Solidity's `int104` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 104 bits\\n     */\\n    function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n        downcasted = int104(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(104, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int96 from int256, reverting on\\n     * overflow (when the input is less than smallest int96 or\\n     * greater than largest int96).\\n     *\\n     * Counterpart to Solidity's `int96` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 96 bits\\n     */\\n    function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n        downcasted = int96(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(96, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int88 from int256, reverting on\\n     * overflow (when the input is less than smallest int88 or\\n     * greater than largest int88).\\n     *\\n     * Counterpart to Solidity's `int88` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 88 bits\\n     */\\n    function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n        downcasted = int88(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(88, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int80 from int256, reverting on\\n     * overflow (when the input is less than smallest int80 or\\n     * greater than largest int80).\\n     *\\n     * Counterpart to Solidity's `int80` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 80 bits\\n     */\\n    function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n        downcasted = int80(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(80, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int72 from int256, reverting on\\n     * overflow (when the input is less than smallest int72 or\\n     * greater than largest int72).\\n     *\\n     * Counterpart to Solidity's `int72` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 72 bits\\n     */\\n    function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n        downcasted = int72(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(72, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int64 from int256, reverting on\\n     * overflow (when the input is less than smallest int64 or\\n     * greater than largest int64).\\n     *\\n     * Counterpart to Solidity's `int64` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 64 bits\\n     */\\n    function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n        downcasted = int64(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(64, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int56 from int256, reverting on\\n     * overflow (when the input is less than smallest int56 or\\n     * greater than largest int56).\\n     *\\n     * Counterpart to Solidity's `int56` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 56 bits\\n     */\\n    function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n        downcasted = int56(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(56, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int48 from int256, reverting on\\n     * overflow (when the input is less than smallest int48 or\\n     * greater than largest int48).\\n     *\\n     * Counterpart to Solidity's `int48` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 48 bits\\n     */\\n    function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n        downcasted = int48(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(48, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int40 from int256, reverting on\\n     * overflow (when the input is less than smallest int40 or\\n     * greater than largest int40).\\n     *\\n     * Counterpart to Solidity's `int40` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 40 bits\\n     */\\n    function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n        downcasted = int40(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(40, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int32 from int256, reverting on\\n     * overflow (when the input is less than smallest int32 or\\n     * greater than largest int32).\\n     *\\n     * Counterpart to Solidity's `int32` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 32 bits\\n     */\\n    function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n        downcasted = int32(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(32, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int24 from int256, reverting on\\n     * overflow (when the input is less than smallest int24 or\\n     * greater than largest int24).\\n     *\\n     * Counterpart to Solidity's `int24` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 24 bits\\n     */\\n    function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n        downcasted = int24(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(24, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int16 from int256, reverting on\\n     * overflow (when the input is less than smallest int16 or\\n     * greater than largest int16).\\n     *\\n     * Counterpart to Solidity's `int16` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 16 bits\\n     */\\n    function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n        downcasted = int16(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(16, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the downcasted int8 from int256, reverting on\\n     * overflow (when the input is less than smallest int8 or\\n     * greater than largest int8).\\n     *\\n     * Counterpart to Solidity's `int8` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - input must fit into 8 bits\\n     */\\n    function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n        downcasted = int8(value);\\n        if (downcasted != value) {\\n            revert SafeCastOverflowedIntDowncast(8, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts an unsigned uint256 into a signed int256.\\n     *\\n     * Requirements:\\n     *\\n     * - input must be less than or equal to maxInt256.\\n     */\\n    function toInt256(uint256 value) internal pure returns (int256) {\\n        // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n        if (value > uint256(type(int256).max)) {\\n            revert SafeCastOverflowedUintToInt(value);\\n        }\\n        return int256(value);\\n    }\\n}\\n\",\"keccak256\":\"0xe19a4d5f31d2861e7344e8e535e2feafb913d806d3e2b5fe7782741a2a7094fe\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/Checkpoints.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/Checkpoints.sol)\\n// This file was procedurally generated from scripts/generate/templates/Checkpoints.js.\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\n\\n/**\\n * @dev This library defines the `Trace*` struct, for checkpointing values as they change at different points in\\n * time, and later looking up past values by block number. See {Votes} as an example.\\n *\\n * To create a history of checkpoints define a variable type `Checkpoints.Trace*` in your contract, and store a new\\n * checkpoint for the current transaction block using the {push} function.\\n */\\nlibrary Checkpoints {\\n    /**\\n     * @dev A value was attempted to be inserted on a past checkpoint.\\n     */\\n    error CheckpointUnorderedInsertion();\\n\\n    struct Trace224 {\\n        Checkpoint224[] _checkpoints;\\n    }\\n\\n    struct Checkpoint224 {\\n        uint32 _key;\\n        uint224 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace224 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint32).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace224 storage self, uint32 key, uint224 value) internal returns (uint224, uint224) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace224 storage self, uint32 key) internal view returns (uint224) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace224 storage self) internal view returns (uint224) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace224 storage self) internal view returns (bool exists, uint32 _key, uint224 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint224 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace224 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace224 storage self, uint32 pos) internal view returns (Checkpoint224 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint224[] storage self, uint32 key, uint224 value) private returns (uint224, uint224) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint224 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint224({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint224({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint224[] storage self,\\n        uint32 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint224[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint224 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace208 {\\n        Checkpoint208[] _checkpoints;\\n    }\\n\\n    struct Checkpoint208 {\\n        uint48 _key;\\n        uint208 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace208 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint48).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace208 storage self, uint48 key, uint208 value) internal returns (uint208, uint208) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace208 storage self, uint48 key) internal view returns (uint208) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace208 storage self) internal view returns (uint208) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace208 storage self) internal view returns (bool exists, uint48 _key, uint208 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint208 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace208 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace208 storage self, uint32 pos) internal view returns (Checkpoint208 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint208[] storage self, uint48 key, uint208 value) private returns (uint208, uint208) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint208 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint208({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint208({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint208[] storage self,\\n        uint48 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint208[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint208 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n\\n    struct Trace160 {\\n        Checkpoint160[] _checkpoints;\\n    }\\n\\n    struct Checkpoint160 {\\n        uint96 _key;\\n        uint160 _value;\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into a Trace160 so that it is stored as the checkpoint.\\n     *\\n     * Returns previous value and new value.\\n     *\\n     * IMPORTANT: Never accept `key` as a user input, since an arbitrary `type(uint96).max` key set will disable the\\n     * library.\\n     */\\n    function push(Trace160 storage self, uint96 key, uint160 value) internal returns (uint160, uint160) {\\n        return _insert(self._checkpoints, key, value);\\n    }\\n\\n    /**\\n     * @dev Returns the value in the first (oldest) checkpoint with key greater or equal than the search key, or zero if\\n     * there is none.\\n     */\\n    function lowerLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _lowerBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == len ? 0 : _unsafeAccess(self._checkpoints, pos)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     */\\n    function upperLookup(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, 0, len);\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the last (most recent) checkpoint with key lower or equal than the search key, or zero\\n     * if there is none.\\n     *\\n     * NOTE: This is a variant of {upperLookup} that is optimised to find \\\"recent\\\" checkpoint (checkpoints with high\\n     * keys).\\n     */\\n    function upperLookupRecent(Trace160 storage self, uint96 key) internal view returns (uint160) {\\n        uint256 len = self._checkpoints.length;\\n\\n        uint256 low = 0;\\n        uint256 high = len;\\n\\n        if (len > 5) {\\n            uint256 mid = len - Math.sqrt(len);\\n            if (key < _unsafeAccess(self._checkpoints, mid)._key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n\\n        uint256 pos = _upperBinaryLookup(self._checkpoints, key, low, high);\\n\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns the value in the most recent checkpoint, or zero if there are no checkpoints.\\n     */\\n    function latest(Trace160 storage self) internal view returns (uint160) {\\n        uint256 pos = self._checkpoints.length;\\n        return pos == 0 ? 0 : _unsafeAccess(self._checkpoints, pos - 1)._value;\\n    }\\n\\n    /**\\n     * @dev Returns whether there is a checkpoint in the structure (i.e. it is not empty), and if so the key and value\\n     * in the most recent checkpoint.\\n     */\\n    function latestCheckpoint(Trace160 storage self) internal view returns (bool exists, uint96 _key, uint160 _value) {\\n        uint256 pos = self._checkpoints.length;\\n        if (pos == 0) {\\n            return (false, 0, 0);\\n        } else {\\n            Checkpoint160 memory ckpt = _unsafeAccess(self._checkpoints, pos - 1);\\n            return (true, ckpt._key, ckpt._value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the number of checkpoint.\\n     */\\n    function length(Trace160 storage self) internal view returns (uint256) {\\n        return self._checkpoints.length;\\n    }\\n\\n    /**\\n     * @dev Returns checkpoint at given position.\\n     */\\n    function at(Trace160 storage self, uint32 pos) internal view returns (Checkpoint160 memory) {\\n        return self._checkpoints[pos];\\n    }\\n\\n    /**\\n     * @dev Pushes a (`key`, `value`) pair into an ordered list of checkpoints, either by inserting a new checkpoint,\\n     * or by updating the last one.\\n     */\\n    function _insert(Checkpoint160[] storage self, uint96 key, uint160 value) private returns (uint160, uint160) {\\n        uint256 pos = self.length;\\n\\n        if (pos > 0) {\\n            // Copying to memory is important here.\\n            Checkpoint160 memory last = _unsafeAccess(self, pos - 1);\\n\\n            // Checkpoint keys must be non-decreasing.\\n            if (last._key > key) {\\n                revert CheckpointUnorderedInsertion();\\n            }\\n\\n            // Update or push new checkpoint\\n            if (last._key == key) {\\n                _unsafeAccess(self, pos - 1)._value = value;\\n            } else {\\n                self.push(Checkpoint160({_key: key, _value: value}));\\n            }\\n            return (last._value, value);\\n        } else {\\n            self.push(Checkpoint160({_key: key, _value: value}));\\n            return (0, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the index of the last (most recent) checkpoint with key lower or equal than the search key, or `high`\\n     * if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and exclusive\\n     * `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _upperBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key > key) {\\n                high = mid;\\n            } else {\\n                low = mid + 1;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Return the index of the first (oldest) checkpoint with key is greater or equal than the search key, or\\n     * `high` if there is none. `low` and `high` define a section where to do the search, with inclusive `low` and\\n     * exclusive `high`.\\n     *\\n     * WARNING: `high` should not be greater than the array's length.\\n     */\\n    function _lowerBinaryLookup(\\n        Checkpoint160[] storage self,\\n        uint96 key,\\n        uint256 low,\\n        uint256 high\\n    ) private view returns (uint256) {\\n        while (low < high) {\\n            uint256 mid = Math.average(low, high);\\n            if (_unsafeAccess(self, mid)._key < key) {\\n                low = mid + 1;\\n            } else {\\n                high = mid;\\n            }\\n        }\\n        return high;\\n    }\\n\\n    /**\\n     * @dev Access an element of the array without performing bounds check. The position is assumed to be within bounds.\\n     */\\n    function _unsafeAccess(\\n        Checkpoint160[] storage self,\\n        uint256 pos\\n    ) private pure returns (Checkpoint160 storage result) {\\n        assembly {\\n            mstore(0, self.slot)\\n            result.slot := add(keccak256(0, 0x20), pos)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xbdc5e074d7dd6678f67e92b1a51a20226801a407b0e1af3da367c5d1ff4519ad\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```solidity\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position is the index of the value in the `values` array plus 1.\\n        // Position 0 is used to mean a value is not in the set.\\n        mapping(bytes32 value => uint256) _positions;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._positions[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We cache the value's position to prevent multiple reads from the same storage slot\\n        uint256 position = set._positions[value];\\n\\n        if (position != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 valueIndex = position - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (valueIndex != lastIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the lastValue to the index where the value to delete is\\n                set._values[valueIndex] = lastValue;\\n                // Update the tracked position of the lastValue (that was just moved)\\n                set._positions[lastValue] = position;\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the tracked position for the deleted slot\\n            delete set._positions[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._positions[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x86c1470cbfd878491e5de030072b647352d36bd27122cffb928970b1945282aa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/types/Time.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/types/Time.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"../math/Math.sol\\\";\\nimport {SafeCast} from \\\"../math/SafeCast.sol\\\";\\n\\n/**\\n * @dev This library provides helpers for manipulating time-related objects.\\n *\\n * It uses the following types:\\n * - `uint48` for timepoints\\n * - `uint32` for durations\\n *\\n * While the library doesn't provide specific types for timepoints and duration, it does provide:\\n * - a `Delay` type to represent duration that can be programmed to change value automatically at a given point\\n * - additional helper functions\\n */\\nlibrary Time {\\n    using Time for *;\\n\\n    /**\\n     * @dev Get the block timestamp as a Timepoint.\\n     */\\n    function timestamp() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.timestamp);\\n    }\\n\\n    /**\\n     * @dev Get the block number as a Timepoint.\\n     */\\n    function blockNumber() internal view returns (uint48) {\\n        return SafeCast.toUint48(block.number);\\n    }\\n\\n    // ==================================================== Delay =====================================================\\n    /**\\n     * @dev A `Delay` is a uint32 duration that can be programmed to change value automatically at a given point in the\\n     * future. The \\\"effect\\\" timepoint describes when the transitions happens from the \\\"old\\\" value to the \\\"new\\\" value.\\n     * This allows updating the delay applied to some operation while keeping some guarantees.\\n     *\\n     * In particular, the {update} function guarantees that if the delay is reduced, the old delay still applies for\\n     * some time. For example if the delay is currently 7 days to do an upgrade, the admin should not be able to set\\n     * the delay to 0 and upgrade immediately. If the admin wants to reduce the delay, the old delay (7 days) should\\n     * still apply for some time.\\n     *\\n     *\\n     * The `Delay` type is 112 bits long, and packs the following:\\n     *\\n     * ```\\n     *   | [uint48]: effect date (timepoint)\\n     *   |           | [uint32]: value before (duration)\\n     *   \\u2193           \\u2193       \\u2193 [uint32]: value after (duration)\\n     * 0xAAAAAAAAAAAABBBBBBBBCCCCCCCC\\n     * ```\\n     *\\n     * NOTE: The {get} and {withUpdate} functions operate using timestamps. Block number based delays are not currently\\n     * supported.\\n     */\\n    type Delay is uint112;\\n\\n    /**\\n     * @dev Wrap a duration into a Delay to add the one-step \\\"update in the future\\\" feature\\n     */\\n    function toDelay(uint32 duration) internal pure returns (Delay) {\\n        return Delay.wrap(duration);\\n    }\\n\\n    /**\\n     * @dev Get the value at a given timepoint plus the pending value and effect timepoint if there is a scheduled\\n     * change after this timepoint. If the effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function _getFullAt(Delay self, uint48 timepoint) private pure returns (uint32, uint32, uint48) {\\n        (uint32 valueBefore, uint32 valueAfter, uint48 effect) = self.unpack();\\n        return effect <= timepoint ? (valueAfter, 0, 0) : (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev Get the current value plus the pending value and effect timepoint if there is a scheduled change. If the\\n     * effect timepoint is 0, then the pending value should not be considered.\\n     */\\n    function getFull(Delay self) internal view returns (uint32, uint32, uint48) {\\n        return _getFullAt(self, timestamp());\\n    }\\n\\n    /**\\n     * @dev Get the current value.\\n     */\\n    function get(Delay self) internal view returns (uint32) {\\n        (uint32 delay, , ) = self.getFull();\\n        return delay;\\n    }\\n\\n    /**\\n     * @dev Update a Delay object so that it takes a new duration after a timepoint that is automatically computed to\\n     * enforce the old delay at the moment of the update. Returns the updated Delay object and the timestamp when the\\n     * new delay becomes effective.\\n     */\\n    function withUpdate(\\n        Delay self,\\n        uint32 newValue,\\n        uint32 minSetback\\n    ) internal view returns (Delay updatedDelay, uint48 effect) {\\n        uint32 value = self.get();\\n        uint32 setback = uint32(Math.max(minSetback, value > newValue ? value - newValue : 0));\\n        effect = timestamp() + setback;\\n        return (pack(value, newValue, effect), effect);\\n    }\\n\\n    /**\\n     * @dev Split a delay into its components: valueBefore, valueAfter and effect (transition timepoint).\\n     */\\n    function unpack(Delay self) internal pure returns (uint32 valueBefore, uint32 valueAfter, uint48 effect) {\\n        uint112 raw = Delay.unwrap(self);\\n\\n        valueAfter = uint32(raw);\\n        valueBefore = uint32(raw >> 32);\\n        effect = uint48(raw >> 64);\\n\\n        return (valueBefore, valueAfter, effect);\\n    }\\n\\n    /**\\n     * @dev pack the components into a Delay object.\\n     */\\n    function pack(uint32 valueBefore, uint32 valueAfter, uint48 effect) internal pure returns (Delay) {\\n        return Delay.wrap((uint112(effect) << 64) | (uint112(valueBefore) << 32) | uint112(valueAfter));\\n    }\\n}\\n\",\"keccak256\":\"0xc7755af115020049e4140f224f9ee88d7e1799ffb0646f37bf0df24bf6213f58\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/ICodeIndex.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity 0.8.20;\\n\\ninterface ICodeIndex {\\n    event Indexed(address indexed container, bytes32 indexed codeHash);\\n    error alreadyExists(bytes32 id, address source);\\n\\n    function register(address container) external;\\n\\n    function get(bytes32 id) external view returns (address);\\n}\",\"keccak256\":\"0x46ba8ab4127e5d6f2171d84c15cea75e530d48fb8997766002a45fe1014766dd\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/abstracts/CodeIndexer.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../ICodeIndex.sol\\\";\\n\\nabstract contract CodeIndexer {\\n    //Create2 contract\\n    ICodeIndex private constant INDEX_CONTRACT = ICodeIndex(0xc0D31d398c5ee86C5f8a23FA253ee8a586dA03Ce);\\n    constructor() {}\\n    // @inheritdoc ICodeIndex\\n    function getContractsIndex() internal pure returns (ICodeIndex) {\\n        return INDEX_CONTRACT;\\n    }\\n    // @inheritdoc ICodeIndex\\n    function index(address source) internal {\\n        INDEX_CONTRACT.register(source);\\n    }\\n}\\n\",\"keccak256\":\"0xb5c35149f116be89dddf7a5c7ffab92fd29482b1e3c28e4ef26d8df689a8d95e\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/abstracts/ERC7746Middleware.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"../libraries/LibMiddleware.sol\\\";\\n\\n/**\\n * @title ERC7746Middleware\\n * @notice Abstract contract that serves as a middleware for ERC7746 standard.\\n * This contract is intended to be inherited by other contracts that implement\\n * the ERC7746 functionality. It provides base functionality and structure\\n * that can be extended and customized by derived contracts.\\n * @author Peeramid Labs, 2024\\n */\\nabstract contract ERC7746Middleware {\\n    /**\\n     * @notice Modifier to apply custom logic for ERC7746 compliance.\\n     * @param _selector The function selector to be checked.\\n     * @param sender The address of the sender.\\n     * @param data The calldata being passed to the function.\\n     * @param value The value being transferred.\\n     */\\n    modifier ERC7746C(bytes4 _selector, address sender, bytes calldata data, uint256 value) {\\n        bytes[] memory layerReturns = LibMiddleware.beforeCall(_selector, sender, data, value);\\n        _;\\n        LibMiddleware.afterCall(_selector, sender, data, value, layerReturns);\\n    }\\n\\n    /**\\n     * @notice Modifier to apply ERC7746 specific logic.\\n     * This modifier can be used to enforce certain conditions or\\n     * execute specific code before or after the function it modifies.\\n     */\\n    modifier ERC7746() {\\n        bytes[] memory layerReturns = LibMiddleware.beforeCall(msg.sig, msg.sender, msg.data, msg.value);\\n        _;\\n        LibMiddleware.afterCall(msg.sig, msg.sender, msg.data, msg.value, layerReturns);\\n    }\\n}\\n\",\"keccak256\":\"0xb63c6fa5bdaeeee6cc0a1c014ec941dcd0d995b6a0e857d788c6b121d92fb6c5\",\"license\":\"Apache-2.0\"},\"@peeramid-labs/eds/src/interfaces/IContractURI.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\ninterface IContractURI {\\n    function contractURI() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x7adffebc6e64c642e132bbff8ff695138517023f710b23b8767708de4f73db0b\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IDistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IContractURI} from \\\"./IContractURI.sol\\\";\\n/**\\n * @title IDistribution\\n * @notice Interface for distribution-related functionalities. It can get sources and produce a new instances out from them. It also provides metadata about the distribution.\\n * @dev It is highly recommended to keep implementation stateless, and use `immutable` variables for any state. This allows your code to be referred in distributor and respositories via ERC7744. It's also easier to reason about, and more gas efficient.\\n * @author Peeramid Labs, 2024\\n */\\ninterface IDistribution is IContractURI {\\n    /**\\n     * @notice Emitted when a distribution occurs.\\n     * @param distributor The address of the entity that performed the distribution.\\n     * @param instances An array of addresses that were produced.\\n     */\\n    event Distributed(address indexed distributor, address[] instances);\\n\\n    /**\\n     * @notice Instantiates a new instance with the given parameters.\\n     * @param data The data to be used for instantiation.\\n     * @return instances An array of addresses that were produced.\\n     * @return distributionName The name of the distribution.\\n     * @return distributionVersion The version of the distribution.\\n     * @dev WARNING: It MUST emit Distributed event.\\n     */\\n    function instantiate(\\n        bytes memory data\\n    ) external returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion);\\n\\n    /**\\n     * @notice Retrieves the current distribution sources.\\n     * @return sources An array of addresses that are used for instantiation.\\n     * @return distributionName The name of the distribution.\\n     * @return distributionVersion The version of the distribution.\\n     */\\n    function get()\\n        external\\n        view\\n        returns (address[] memory sources, bytes32 distributionName, uint256 distributionVersion);\\n}\\n\",\"keccak256\":\"0x8d8bfa27277d68b5defe449c4af09be60cefa0b275d7b25022921502f34e5d63\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport \\\"../interfaces/IRepository.sol\\\";\\nimport \\\"../libraries/LibSemver.sol\\\";\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\n\\n/**\\n * @title IDistributor Interface\\n * @notice Defines the standard functions for a distributor contract.\\n * @dev If you want to use {IRepository} for versioned distributions, use {IVersionDistributor} interface.\\n * @author Peeramid Labs, 2024\\n */\\ninterface IDistributor is IERC7746, IERC165 {\\n    error InvalidVersionRequested(bytes32 distributionId, string version);\\n    error InvalidRepository(address repository);\\n    error RepositoryAlreadyExists(address repository);\\n    error VersionOutdated(bytes32 distributionId, string version);\\n    error InvalidInstance(address instance);\\n    error UniversionedDistribution(bytes32 distributionId);\\n\\n    /**\\n     * @notice Emitted when the version of the distributor is changed.\\n     * @param distributionId The unique identifier of the distribution.\\n     * @param newRequirement The new version requirement (hashed for indexing).\\n     * @param newRequirementData The new version requirement data.\\n     */\\n    event VersionChanged(\\n        bytes32 indexed distributionId,\\n        LibSemver.VersionRequirement indexed newRequirement,\\n        LibSemver.VersionRequirement newRequirementData\\n    );\\n\\n    /**\\n     * @notice Error indicating that the distribution with the specified ID was not found.\\n     * @param id The unique identifier of the distribution that was not found.\\n     */\\n    error DistributionNotFound(bytes32 id);\\n    /**\\n     * @notice Error indicating that a distribution with the specified ID already exists.\\n     * @param id The unique identifier of the distribution that already exists.\\n     */\\n    error DistributionExists(bytes32 id);\\n    /**\\n     * @notice Error indicating that the initializer for the distribution was not found.\\n     * @param id The unique identifier of the distribution that was not found.\\n     */\\n    error InitializerNotFound(bytes32 id);\\n\\n    /**\\n     * @notice Event emitted when a new distribution is instantiated.\\n     * @param distributionId The unique identifier of the distribution.\\n     * @param newInstanceId The unique identifier of the instance.\\n     * @param version The version of the distribution, taken either from IDsitribution or from IRepository.\\n     * @param instances The addresses of the instances that were created.\\n     * @param args The arguments that were used for instantiation.\\n     * @dev It MUST emit when {IDistributor.instantiate} is called.\\n     */\\n    event Instantiated(\\n        bytes32 indexed distributionId,\\n        uint256 indexed newInstanceId,\\n        uint256 indexed version,\\n        address[] instances,\\n        bytes args\\n    );\\n    /**\\n     * @notice Event emitted when a distribution is removed.\\n     * @param id The unique identifier of the distribution that was removed.\\n     * @dev It MUST emit when {IDistributor.removeDistribution} is called.\\n     */\\n    event DistributionRemoved(bytes32 indexed id);\\n\\n    /**\\n     * @notice Event emitted when a distribution is added.\\n     * @param id The unique identifier of the distribution that was added.\\n     * @param distribution The address of the distribution that was added.\\n     * @param initializer The address of the initializer for the distribution.\\n     * @dev It MUST emit when {IDistributor.addDistribution} is called.\\n     */\\n    event DistributionAdded(bytes32 indexed id, address distribution, address indexed initializer);\\n\\n    /**\\n     * @notice Retrieves the unique identifiers of all distributions.\\n     * @return distributorIds An array of unique identifiers of all distributions.\\n     */\\n    function getDistributions() external view returns (bytes32[] memory distributorIds);\\n\\n    /**\\n     * @notice Retrieves the URI of the distribution.\\n     * @param distributorId The unique identifier of the distribution.\\n     * @return uri The URI of the distribution.\\n     */\\n    function getDistributionURI(bytes32 distributorId) external view returns (string memory);\\n\\n    /**\\n     * @notice Instantiates a new instance with the given distributor ID and arguments.\\n     * @param distributorId The unique identifier of the distributor.\\n     * @param args The arguments to be used for instantiation.\\n     * @return instances The addresses of the instances that were created.\\n     * @return distributionName The name of the distribution.\\n     * @return distributionVersion The version of the distribution.\\n     * @dev It MUST emit {Instantiated} event.\\n     */\\n    function instantiate(\\n        bytes32 distributorId,\\n        bytes calldata args\\n    ) external returns (address[] memory, bytes32 distributionName, uint256 distributionVersion);\\n\\n    /**\\n     * @notice Adds a new distribution with the specified distributor ID and initializer address.\\n     * @param distributorId The unique identifier for the distributor.\\n     * @param initializer The address of the initializer for the distribution.\\n     * @dev WARNING: If initializer is provided, it will DELEGATECALL to the initializer. Otherwise, instantiation arguments will be passed to the distribution for self-initialization. Initializer contract MUST be trusted by the distributor.\\n     */\\n    function addDistribution(bytes32 distributorId, address initializer) external;\\n\\n    /**\\n     * @notice Removes a distribution identified by the given distributorId.\\n     * @param distributorId The unique identifier of the distribution to be removed.\\n     */\\n    function removeDistribution(bytes32 distributorId) external;\\n\\n    /**\\n     * @notice Retrieves the distribution ID associated with a given instance address.\\n     * @param instance The address of the instance for which the distribution ID is being requested.\\n     * @return The distribution ID as a bytes32 value.\\n     */\\n    function getDistributionId(address instance) external view returns (bytes32);\\n    /**\\n     * @notice Retrieves the unique identifier for a given instance address.\\n     * @param instance The address of the instance whose ID is to be retrieved.\\n     * @return The unique identifier (uint256) associated with the specified instance address.\\n     */\\n    function getInstanceId(address instance) external view returns (uint256);\\n\\n    /**\\n     * @notice Adds a new versioned distribution to the repository.\\n     * @param repository The repository to which the distribution will be added.\\n     * @param initializer The address that initializes the distribution.\\n     * @param requirement The version requirements for the distribution.\\n     * @dev WARNING: If initializer is provided, it will DELEGATECALL to the initializer. Otherwise, instantiation arguments will be passed to the distribution for self-initialization. Initializer contract MUST be trusted by the distributor.\\n     */\\n    function addDistribution(\\n        IRepository repository,\\n        address initializer,\\n        LibSemver.VersionRequirement memory requirement\\n    ) external;\\n\\n    /**\\n     * @notice Changes the version requirement for a specific distribution.\\n     * @param distributionId The unique identifier of the distribution whose version requirement is to be changed.\\n     * @param newRequirement The new version requirement to be set for the distribution.\\n     */\\n    function changeVersion(bytes32 distributionId, LibSemver.VersionRequirement memory newRequirement) external;\\n}\\n\",\"keccak256\":\"0x741442d26b79fed1c34fd73af1a3702af35ee8eb26938dd08bdcb6e262903c70\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/interfaces/IERC7746.sol\":{\"content\":\"// SPDX-License-Identifier: CC0-1.0\\npragma solidity >=0.8.0 <0.9.0;\\n\\n/**\\n * @title IERC7746 Interface\\n * @dev Interface for the ERC7746 standard.\\n */\\ninterface IERC7746 {\\n    /// @notice Validates a function call before execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @return beforeCallResult Arbitrary data to be passed to `afterCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function beforeCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data\\n    ) external returns (bytes memory);\\n\\n    /// @notice Validates a function call after execution.\\n    /// @param configuration Middleware-specific configuration data.\\n    /// @param selector The function selector being called.\\n    /// @param sender The address initiating the call.\\n    /// @param value The amount of ETH sent with the call (if any).\\n    /// @param data The calldata for the function call.\\n    /// @param beforeCallResult The data returned by `beforeCallValidation`.\\n    /// @dev MUST revert if validation fails.\\n    function afterCall(\\n        bytes memory configuration,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data,\\n        bytes memory beforeCallResult\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0eb8e8f14581dff37cc01475b0eb63926998b958328aa23e8afe3c0e2c93024a\",\"license\":\"CC0-1.0\"},\"@peeramid-labs/eds/src/interfaces/IRepository.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\n\\nimport \\\"../libraries/LibSemver.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport {IContractURI} from \\\"./IContractURI.sol\\\";\\n/**\\n * @title IRepository Interface\\n * @notice It is intended to be implemented by contracts that manage a collection of versions of a byte code.\\n * @author Peeramid Labs, 2024\\n */\\ninterface IRepository is IERC165, IContractURI {\\n    /**\\n     * @notice Represents a source with version information, a unique identifier, and associated metadata.\\n     * @param version The version of the source, represented using the LibSemver.Version struct.\\n     * @param sourceId A unique identifier for the source.\\n     * @param metadata Additional data associated with the source.\\n     */\\n    struct Source {\\n        LibSemver.Version version;\\n        bytes32 sourceId;\\n        bytes metadata;\\n    }\\n\\n    /**\\n     * @notice Error indicating that the specified version does not exist.\\n     * @param version The version number that does not exist.\\n     */\\n    error VersionDoesNotExist(uint256 version);\\n    /**\\n     * @notice Error indicating that a release with a zero value is not allowed.\\n     */\\n    error ReleaseZeroNotAllowed();\\n    /**\\n     * @notice Error indicating that the specified version already exists.\\n     * @param version The version number that already exists.\\n     */\\n    error VersionExists(uint256 version);\\n    /**\\n     * @notice Error indicating that the version increment is invalid.\\n     * @param version The version number that caused the error.\\n     * @dev The version increment must be exactly one for either major, minor, or patch.\\n     */\\n    error VersionIncrementInvalid(uint256 version);\\n    /**\\n     * @dev Error indicating that the release metadata is empty.\\n     */\\n    error EmptyReleaseMetadata();\\n\\n    /**\\n     * @notice Emitted when a new version is added to the repository.\\n     * @param version The version number of the added item.\\n     * @param source The source identifier of the added item.\\n     * @param buildMetadata Additional metadata related to the build.\\n     */\\n    event VersionAdded(uint256 indexed version, bytes32 indexed source, bytes buildMetadata);\\n    /**\\n     * @notice Emitted when the metadata of a release is updated.\\n     * @param version The version number of the release.\\n     * @param releaseMetadata The metadata associated with the release.\\n     */\\n    event ReleaseMetadataUpdated(uint256 indexed version, bytes releaseMetadata);\\n\\n    /**\\n     * @notice Updates the metadata for a specific release version.\\n     * @param version The version of the release to update.\\n     * @param releaseMetadata The new metadata to associate with the release.\\n     * @dev It MUST emit `ReleaseMetadataUpdated` event.\\n     */\\n    function updateReleaseMetadata(LibSemver.Version memory version, bytes calldata releaseMetadata) external;\\n    /**\\n     * @notice Retrieves the name of the repository.\\n     * @return The name of the repository as a bytes32 value.\\n     */\\n    function repositoryName() external view returns (bytes32);\\n    /**\\n     * @notice Creates a new release for the given source ID.\\n     * @param sourceId The unique identifier of the source.\\n     * @param metadata The metadata associated with the release.\\n     * @param version The semantic version of the new release.\\n     * @dev It MUST emit `VersionAdded` event.\\n     */\\n    function newRelease(bytes32 sourceId, bytes memory metadata, LibSemver.Version memory version) external;\\n    /**\\n     * @notice Retrieves the latest source.\\n     * @return The requested source\\n     */\\n    function getLatest() external view returns (Source memory);\\n    /**\\n     * @notice Retrieves a specific item from the repository.\\n     * @param required the required version\\n     * @return The requested `Source`.\\n     */\\n    function get(LibSemver.VersionRequirement calldata required) external view returns (Source memory);\\n}\\n\",\"keccak256\":\"0xf835f5363fe9ec7d97e61311e84725b9d50b99d935b47a3d43ae56a98eb17278\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/libraries/LibMiddleware.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\n\\nlibrary LibMiddleware {\\n    bytes32 private constant ACCESS_LAYERS_STORAGE_POSITION = keccak256(\\\"lib.access.layer.storage\\\");\\n\\n    struct LayerStruct {\\n        address layerAddess;\\n        bytes layerConfigData;\\n    }\\n\\n    function accessLayersStorage() internal pure returns (LayerStruct[] storage ls) {\\n        bytes32 position = ACCESS_LAYERS_STORAGE_POSITION;\\n        assembly {\\n            ls.slot := position\\n        }\\n    }\\n\\n    function setLayer(address layerAddress, uint256 layerIndex, bytes memory layerConfigData) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        ls[layerIndex].layerAddess = layerAddress;\\n        ls[layerIndex].layerConfigData = layerConfigData;\\n    }\\n\\n    function addLayer(LayerStruct memory newLayer) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        ls.push(newLayer);\\n    }\\n\\n    function setLayers(LayerStruct[] memory newLayers) internal {\\n        uint256 length = newLayers.length;\\n        for (uint256 i; i < length; ++i) {\\n            addLayer(newLayers[i]);\\n        }\\n    }\\n\\n    function addLayer(address layerAddress, bytes memory layerConfigData) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        LayerStruct memory newLayer = LayerStruct({layerAddess: layerAddress, layerConfigData: layerConfigData});\\n        ls.push(newLayer);\\n    }\\n\\n    function popLayer() internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        ls.pop();\\n    }\\n\\n    function getLayer(uint256 layerIdx) internal view returns (LayerStruct storage) {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        return ls[layerIdx];\\n    }\\n\\n    function beforeCall(\\n        bytes4 _selector,\\n        address sender,\\n        bytes calldata data,\\n        uint256 value\\n    ) internal returns (bytes[] memory) {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        uint256 length = ls.length;\\n        bytes[] memory layerReturns = new bytes[](length);\\n        for (uint256 i; i < length; ++i) {\\n            layerReturns[i] = validateLayerBeforeCall(ls[i], _selector, sender, data, value);\\n        }\\n        return layerReturns;\\n    }\\n\\n    function validateLayerBeforeCall(\\n        LayerStruct storage layer,\\n        bytes4 _selector,\\n        address sender,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        bytes memory retval = IERC7746(layer.layerAddess).beforeCall(\\n            layer.layerConfigData,\\n            _selector,\\n            sender,\\n            value,\\n            data\\n        );\\n\\n        return retval;\\n    }\\n\\n    function afterCall(\\n        bytes4 _selector,\\n        address sender,\\n        bytes calldata data,\\n        uint256 value,\\n        bytes[] memory beforeCallReturns\\n    ) internal {\\n        LayerStruct[] storage ls = accessLayersStorage();\\n        uint256 length = ls.length;\\n        for (uint256 i; i < length; ++i) {\\n            validateLayerAfterCall(ls[length - 1 - i], _selector, sender, data, value, beforeCallReturns[i]);\\n        }\\n    }\\n\\n    function extractRevertReason(bytes memory revertData) internal pure returns (string memory reason) {\\n        uint256 l = revertData.length;\\n        if (l < 68) return \\\"\\\";\\n        uint256 t;\\n        assembly {\\n            revertData := add(revertData, 4)\\n            t := mload(revertData) // Save the content of the length slot\\n            mstore(revertData, sub(l, 4)) // Set proper length\\n        }\\n        reason = abi.decode(revertData, (string));\\n        assembly {\\n            mstore(revertData, t) // Restore the content of the length slot\\n        }\\n    }\\n\\n    function validateLayerAfterCall(\\n        LayerStruct storage layer,\\n        bytes4 _selector,\\n        address sender,\\n        bytes calldata data,\\n        uint256 value,\\n        bytes memory beforeCallReturnValue\\n    ) internal {\\n        IERC7746(layer.layerAddess).afterCall(\\n            layer.layerConfigData,\\n            _selector,\\n            sender,\\n            value,\\n            data,\\n            beforeCallReturnValue\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x1dab29dcf57b1596d1ea89302fd143e46ff6b42edf8b58bf81b0c76eb08a4bfe\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/libraries/LibSemver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nlibrary LibSemver {\\n    error versionMissmatch(string message);\\n    struct Version {\\n        uint64 major;\\n        uint64 minor;\\n        uint128 patch;\\n    }\\n\\n    enum requirements {\\n        ANY, // *\\n        EXACT, // =\\n        MAJOR, // ^\\n        MAJOR_MINOR, // ~\\n        GREATER_EQUAL, // >=\\n        GREATER, // >\\n        LESSER_EQUAL, // <=\\n        LESSER // <\\n    }\\n\\n    struct VersionRequirement {\\n        Version version;\\n        requirements requirement;\\n    }\\n\\n    function toUint256(Version memory _version) internal pure returns (uint256) {\\n        return (uint256(_version.major) << 192) | (uint256(_version.minor) << 128) | uint256(_version.patch);\\n    }\\n\\n    function parse(uint256 _version) internal pure returns (Version memory) {\\n        return Version(uint64(_version >> 192), uint64(_version >> 128), uint128(_version));\\n    }\\n\\n    function toString(Version memory _version) internal pure returns (string memory) {\\n        return\\n            string(\\n                abi.encodePacked(\\n                    Strings.toString(uint256(_version.major)),\\n                    \\\".\\\",\\n                    Strings.toString(uint256(_version.minor)),\\n                    \\\".\\\",\\n                    Strings.toString(uint256(_version.patch))\\n                )\\n            );\\n    }\\n\\n    function require_exact(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) != toUint256(_version2)) revert versionMissmatch(\\\"Version mismatch\\\");\\n    }\\n\\n    function require_major(Version memory _version1, Version memory _version2) internal pure {\\n        if (_version1.major != _version2.major) revert versionMissmatch(\\\"Major version mismatch\\\");\\n    }\\n\\n    function require_major_minor(Version memory _version1, Version memory _version2) internal pure {\\n        if (_version1.major != _version2.major || _version1.minor != _version2.minor)\\n            revert versionMissmatch(\\\"Major and minor version mismatch\\\");\\n    }\\n\\n    function require_greater_equal(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) < toUint256(_version2)) revert versionMissmatch(\\\"Version is not greater or equal\\\");\\n    }\\n\\n    function require_greater(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) <= toUint256(_version2)) revert versionMissmatch(\\\"Version is not greater\\\");\\n    }\\n\\n    function require_lesser_equal(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) > toUint256(_version2)) revert versionMissmatch(\\\"Version is not lesser or equal\\\");\\n    }\\n\\n    function require_lesser(Version memory _version1, Version memory _version2) internal pure {\\n        if (toUint256(_version1) >= toUint256(_version2)) revert versionMissmatch(\\\"Version is not lesser\\\");\\n    }\\n\\n    function areEqual(Version memory _version1, Version memory _version2) internal pure returns (bool) {\\n        return toUint256(_version1) == toUint256(_version2);\\n    }\\n\\n    function compare(Version memory has, VersionRequirement memory needs) internal pure returns (bool) {\\n        if (needs.requirement == requirements.ANY) return true;\\n        if (needs.requirement == requirements.EXACT) return toUint256(has) == toUint256(needs.version);\\n        if (needs.requirement == requirements.MAJOR) return has.major == needs.version.major;\\n        if (needs.requirement == requirements.MAJOR_MINOR)\\n            return has.major == needs.version.major && has.minor == needs.version.minor;\\n        if (needs.requirement == requirements.GREATER_EQUAL) return toUint256(has) >= toUint256(needs.version);\\n        if (needs.requirement == requirements.GREATER) return toUint256(has) > toUint256(needs.version);\\n        if (needs.requirement == requirements.LESSER_EQUAL) return toUint256(has) <= toUint256(needs.version);\\n        if (needs.requirement == requirements.LESSER) return toUint256(has) < toUint256(needs.version);\\n        return false;\\n    }\\n\\n    function getNextMajor(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major + 1, 0, 0);\\n    }\\n\\n    function getNextMinor(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major, _version.minor + 1, 0);\\n    }\\n\\n    function getNextPatch(Version memory _version) internal pure returns (Version memory) {\\n        return Version(_version.major, _version.minor, _version.patch + 1);\\n    }\\n}\\n\",\"keccak256\":\"0x71544e4e1ad3b6aefb0ccbd8d3abce33ab8cd26cb8d51ee45bb8419ac92bd787\",\"license\":\"MIT\"},\"@peeramid-labs/eds/src/managers/SimpleAccessManager.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.8.0 <0.9.0;\\nimport \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {IERC7746} from \\\"../interfaces/IERC7746.sol\\\";\\nimport {IDistributor} from \\\"../interfaces/IDistributor.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\ncontract SimpleAccessManager is Initializable, IERC7746, ERC165 {\\n    struct MethodSettings {\\n        bool isDistributionOnly;\\n        mapping(address => bool) dissallowedAddresses;\\n    }\\n\\n    struct Storage {\\n        mapping(bytes4 => MethodSettings) methodSettings;\\n        address target;\\n        IDistributor distributor;\\n    }\\n\\n    bytes32 private constant SACM_STORAGE_POSITION = keccak256(\\\"simple.access.manager.storage.position\\\");\\n\\n    function getStorage() private pure returns (Storage storage s) {\\n        bytes32 position = SACM_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    struct SimpleAccessManagerInitializer {\\n        bytes4 selector;\\n        address[] dissallowedAddresses;\\n        bool distributionComponentsOnly;\\n    }\\n\\n    constructor() {\\n        _disableInitializers();\\n    }\\n    error ERC165CheckFailed(address distributor, bytes4 interfaceId, string interfaceName);\\n    function initialize(\\n        SimpleAccessManagerInitializer[] memory methodSettings,\\n        address target,\\n        IDistributor distributor\\n    ) public initializer {\\n        Storage storage s = getStorage();\\n        s.distributor = distributor;\\n        s.target = target;\\n        if (!ERC165Checker.supportsInterface(address(distributor), type(IDistributor).interfaceId)) {\\n            revert ERC165CheckFailed(address(distributor), type(IDistributor).interfaceId, \\\"IDistributor\\\");\\n        }\\n        uint256 length = methodSettings.length;\\n        for (uint256 i; i < length; ++i) {\\n            s.methodSettings[methodSettings[i].selector].isDistributionOnly = methodSettings[i]\\n                .distributionComponentsOnly;\\n            uint256 dissalowedMethodsLength = methodSettings[i].dissallowedAddresses.length;\\n            for (uint256 j; j < dissalowedMethodsLength; ++j) {\\n                s.methodSettings[methodSettings[i].selector].dissallowedAddresses[\\n                    methodSettings[i].dissallowedAddresses[j]\\n                ] = true;\\n            }\\n        }\\n    }\\n\\n    error OnlyTargetAllowed(address sender, address target);\\n    error dissallowedAddress(address sender, bytes4 selector);\\n\\n    function beforeCall(\\n        bytes memory,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data\\n    ) external returns (bytes memory) {\\n        Storage storage s = getStorage();\\n        if (msg.sender != s.target) {\\n            revert OnlyTargetAllowed(msg.sender, s.target);\\n        }\\n        if (s.methodSettings[selector].dissallowedAddresses[sender]) {\\n            revert dissallowedAddress(sender, selector);\\n        } else {\\n            if (s.methodSettings[selector].isDistributionOnly) {\\n                return s.distributor.beforeCall(abi.encode(msg.sender), selector, sender, value, data);\\n            }\\n            return \\\"\\\";\\n        }\\n    }\\n\\n    function afterCall(\\n        bytes memory,\\n        bytes4 selector,\\n        address sender,\\n        uint256 value,\\n        bytes memory data,\\n        bytes memory beforeCallResult\\n    ) external {\\n        Storage storage s = getStorage();\\n        if (msg.sender != s.target) {\\n            revert OnlyTargetAllowed(msg.sender, s.target);\\n        }\\n        if (s.methodSettings[selector].isDistributionOnly) {\\n            s.distributor.afterCall(abi.encode(msg.sender), selector, sender, value, data, beforeCallResult);\\n        }\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165) returns (bool) {\\n        return interfaceId == type(IERC7746).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8f085739b3459a57b6e3b92ddc815222a1e7ba6c3fb75c0704511c8fd572d056\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.22 <0.9.0;\\n\\nlibrary console {\\n    address constant CONSOLE_ADDRESS =\\n        0x000000000000000000636F6e736F6c652e6c6f67;\\n\\n    function _sendLogPayloadImplementation(bytes memory payload) internal view {\\n        address consoleAddress = CONSOLE_ADDRESS;\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            pop(\\n                staticcall(\\n                    gas(),\\n                    consoleAddress,\\n                    add(payload, 32),\\n                    mload(payload),\\n                    0,\\n                    0\\n                )\\n            )\\n        }\\n    }\\n\\n    function _castToPure(\\n      function(bytes memory) internal view fnIn\\n    ) internal pure returns (function(bytes memory) pure fnOut) {\\n        assembly {\\n            fnOut := fnIn\\n        }\\n    }\\n\\n    function _sendLogPayload(bytes memory payload) internal pure {\\n        _castToPure(_sendLogPayloadImplementation)(payload);\\n    }\\n\\n    function log() internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n    }\\n\\n    function logInt(int256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n    }\\n\\n    function logUint(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function logString(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function logBool(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function logAddress(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function logBytes(bytes memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n    }\\n\\n    function logBytes1(bytes1 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n    }\\n\\n    function logBytes2(bytes2 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n    }\\n\\n    function logBytes3(bytes3 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n    }\\n\\n    function logBytes4(bytes4 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n    }\\n\\n    function logBytes5(bytes5 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n    }\\n\\n    function logBytes6(bytes6 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n    }\\n\\n    function logBytes7(bytes7 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n    }\\n\\n    function logBytes8(bytes8 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n    }\\n\\n    function logBytes9(bytes9 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n    }\\n\\n    function logBytes10(bytes10 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n    }\\n\\n    function logBytes11(bytes11 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n    }\\n\\n    function logBytes12(bytes12 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n    }\\n\\n    function logBytes13(bytes13 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n    }\\n\\n    function logBytes14(bytes14 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n    }\\n\\n    function logBytes15(bytes15 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n    }\\n\\n    function logBytes16(bytes16 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n    }\\n\\n    function logBytes17(bytes17 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n    }\\n\\n    function logBytes18(bytes18 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n    }\\n\\n    function logBytes19(bytes19 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n    }\\n\\n    function logBytes20(bytes20 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n    }\\n\\n    function logBytes21(bytes21 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n    }\\n\\n    function logBytes22(bytes22 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n    }\\n\\n    function logBytes23(bytes23 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n    }\\n\\n    function logBytes24(bytes24 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n    }\\n\\n    function logBytes25(bytes25 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n    }\\n\\n    function logBytes26(bytes26 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n    }\\n\\n    function logBytes27(bytes27 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n    }\\n\\n    function logBytes28(bytes28 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n    }\\n\\n    function logBytes29(bytes29 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n    }\\n\\n    function logBytes30(bytes30 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n    }\\n\\n    function logBytes31(bytes31 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n    }\\n\\n    function logBytes32(bytes32 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n    }\\n\\n    function log(uint256 p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n    }\\n\\n    function log(string memory p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n    }\\n\\n    function log(bool p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n    }\\n\\n    function log(address p0) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n    }\\n\\n    function log(uint256 p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n    }\\n\\n    function log(string memory p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n    }\\n\\n    function log(bool p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, uint256 p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, string memory p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, bool p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n    }\\n\\n    function log(address p0, address p1) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(string memory p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(bool p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, string memory p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, bool p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, string memory p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, bool p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n    }\\n\\n    function log(address p0, address p1, address p2) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(uint256 p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(string memory p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(bool p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, uint256 p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, string memory p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, bool p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, uint256 p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, string memory p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, bool p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, uint256 p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, string memory p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, bool p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n    }\\n\\n    function log(address p0, address p1, address p2, address p3) internal pure {\\n        _sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n    }\\n}\\n\",\"keccak256\":\"0xf2560b5386574153057104d19a9e68a32ee912cf23c0c8df1fe9a0607f42d543\",\"license\":\"MIT\"},\"src/abstracts/LockableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: Apache-2.0\\n\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC1155/ERC1155Upgradeable.sol\\\";\\nimport {ILockableERC1155} from \\\"../interfaces/ILockableERC1155.sol\\\";\\n\\n/**\\n * @title LockableERC1155\\n * @dev This is an abstract contract that extends the ERC1155 token contract and implements the ILockableERC1155 interface.\\n *      It provides functionality to lock and unlock token amounts for specific accounts and IDs.\\n */\\nabstract contract LockableERC1155 is ERC1155Upgradeable, ILockableERC1155 {\\n    struct LockableERC1155Storage {\\n        mapping(address => mapping(uint256 tokenId => uint256)) lockedAmounts;\\n    }\\n\\n    bytes32 constant LOCKABLE_TOKEN_STORAGE_POSITION = keccak256(\\\"erc1155.lockable.storage.position\\\");\\n\\n    function getLockableERC1155Storage() private pure returns (LockableERC1155Storage storage s) {\\n        bytes32 position = LOCKABLE_TOKEN_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks a specified amount of tokens for a given account and token ID.\\n     * If the account does not have enough balance to lock the specified amount,\\n     * the function will revert with an \\\"insufficient\\\" error message.\\n     * Emits a `TokensLocked` event after successfully locking the tokens.\\n     * @param account The address of the account to lock tokens for.\\n     * @param id The ID of the token to lock.\\n     * @param amount The amount of tokens to lock.\\n     */\\n    function lock(address account, uint256 id, uint256 amount) public virtual {\\n        LockableERC1155Storage storage s = getLockableERC1155Storage();\\n        if (balanceOf(account, id) < s.lockedAmounts[account][id] + amount)\\n            revert insufficient(id, s.lockedAmounts[account][id], amount);\\n        s.lockedAmounts[account][id] += amount;\\n        emit TokensLocked(account, id, amount);\\n    }\\n\\n    /**\\n     * @dev Unlocks a specified amount of tokens for a given account and token ID.\\n     * If the locked amount is less than the specified amount, it reverts with an \\\"insufficient\\\" error message.\\n     * Emits a `TokensUnlocked` event after unlocking the tokens.\\n     * @param account The address of the account to unlock tokens for.\\n     * @param id The ID of the token to unlock.\\n     * @param amount The amount of tokens to unlock.\\n     */\\n    function unlock(address account, uint256 id, uint256 amount) public virtual {\\n        LockableERC1155Storage storage s = getLockableERC1155Storage();\\n        if (s.lockedAmounts[account][id] < amount) revert insufficient(id, s.lockedAmounts[account][id], amount);\\n        s.lockedAmounts[account][id] -= amount;\\n        emit TokensUnlocked(account, id, amount);\\n    }\\n\\n    /**\\n     * @dev Returns the unlocked balance of a specific ERC1155 token for an account.\\n     * The unlocked balance is calculated by subtracting the locked amount from the total balance.\\n     * @param account The address of the account.\\n     * @param id The ID of the ERC1155 token.\\n     * @return The unlocked balance of the ERC1155 token for the account.\\n     */\\n    function unlockedBalanceOf(address account, uint256 id) public view returns (uint256) {\\n        LockableERC1155Storage storage s = getLockableERC1155Storage();\\n        return balanceOf(account, id) - s.lockedAmounts[account][id];\\n    }\\n\\n    /**\\n     * @dev Hook function that is called before any token transfer.\\n     * It checks if the transfer is allowed based on the locked amounts of the tokens.\\n     * If the transfer is not allowed, it reverts with an error message.\\n     * @param from The address from which the tokens are being transferred.\\n     * @param to The address to which the tokens are being transferred.\\n     * @param ids An array of token IDs being transferred.\\n     * @param values An array of token amounts being transferred.\\n     */\\n    function _update(\\n        address from,\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory values\\n    ) internal virtual override {\\n        for (uint256 i = 0; i < ids.length; ++i) {\\n            if (from != address(0)) {\\n                if (getLockableERC1155Storage().lockedAmounts[from][ids[i]] + values[i] > balanceOf(from, ids[i])) {\\n                    revert insufficient(\\n                        ids[i],\\n                        balanceOf(from, ids[i]),\\n                        getLockableERC1155Storage().lockedAmounts[from][ids[i]] + values[i]\\n                    );\\n                }\\n            }\\n        }\\n        super._update(from, to, ids, values);\\n    }\\n}\\n\",\"keccak256\":\"0x62d89ebfe67a0aebcf68ffd7f7f36534a9026342208ce8003424cab9859c80f1\",\"license\":\"Apache-2.0\"},\"src/distributions/MAODistribution.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Clones} from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/interfaces/IDistribution.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/libraries/LibSemver.sol\\\";\\nimport {DistributableGovernanceERC20, MintSettings, IDAO} from \\\"../tokens/DistributableGovernanceERC20.sol\\\";\\nimport {IERC7746} from \\\"@peeramid-labs/eds/src/interfaces/IERC7746.sol\\\";\\nimport {SimpleAccessManager} from \\\"@peeramid-labs/eds/src/managers/SimpleAccessManager.sol\\\";\\nimport {IDistributor} from \\\"@peeramid-labs/eds/src/interfaces/IDistributor.sol\\\";\\nimport {RankToken} from \\\"../tokens/RankToken.sol\\\";\\nimport \\\"../initializers/RankifyInstanceInit.sol\\\";\\nimport {ERC165Checker} from \\\"@openzeppelin/contracts/utils/introspection/ERC165Checker.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/abstracts/CodeIndexer.sol\\\";\\n\\nimport {TokenSettings, VotingMode, VotingSettings, IPluginRepo, IDAOFactory} from \\\"../vendor/aragon/interfaces.sol\\\";\\n\\n/**\\n * @title MAODistribution\\n * @dev This contract implements the IDistribution and CodeIndexer interfaces. It uses the Clones library for address cloning.\\n *\\n * @notice The contract is responsible for creating and managing DAOs and ACID distributions.\\n * @author Peeramid Labs, 2024\\n */\\ncontract MAODistribution is IDistribution, CodeIndexer {\\n    struct UserACIDSettings {\\n        uint256 timePerTurn;\\n        uint256 maxPlayersSize;\\n        uint256 minPlayersSize;\\n        uint256 timeToJoin;\\n        uint256 maxTurns;\\n        uint256 voteCredits;\\n        uint256 gamePrice;\\n        address paymentToken;\\n        uint256 joinGamePrice;\\n        string metadata;\\n        string rankTokenURI;\\n        string RankTokenContractURI;\\n    }\\n\\n    struct OSxDistributionArguments {\\n        string daoURI;\\n        string subdomain;\\n        bytes metadata;\\n        string tokenName;\\n        string tokenSymbol;\\n    }\\n\\n    struct DistributorArguments {\\n        OSxDistributionArguments DAOSEttings;\\n        UserACIDSettings ACIDSettings;\\n    }\\n\\n    using Clones for address;\\n    IPluginRepo private immutable _tokenVotingPluginRepo;\\n    IDAOFactory private immutable _daoFactory;\\n    address private immutable _trustedForwarder;\\n    bytes32 private immutable _distributionName;\\n    uint256 private immutable _distributionVersion;\\n    address private immutable _rankTokenBase;\\n    IDistribution private immutable _ACIDDistributionBase;\\n    address private immutable _governanceERC20Base;\\n    address private immutable _accessManagerBase;\\n\\n    /**\\n     * @notice Initializes the contract with the provided parameters and performs necessary checks.\\n     * @dev - retrieves contract addresses from a contract index using the provided identifiers.\\n     * - checks if the access manager supports the ERC7746 interface.\\n     * - EIP712 compatible name/version can be extracted with use of LibSemver\\n     *\\n     *\\n     * WARNING: _trustedForwarder functionality hasn't been yet reviewed nor implemented for ACID distribution and if set will affect only OSx DAO setup.\\n     *\\n     * @param tokenVotingPluginRepo Address of the token voting plugin repository.\\n     * @param daoFactory Address of the Aragons DAO factory.\\n     * @param trustedForwarder Address of the trusted forwarder.\\n     * @param rankTokenCodeId Identifier for the rank token code.\\n     * @param ACIDDIistributionId Identifier for the ACID distribution.\\n     * @param accessManagerId Identifier for the access manager.\\n     * @param governanceERC20BaseId Identifier for the governance ERC20 base.\\n     * @param distributionName Name of the distribution.\\n     * @param distributionVersion Version of the distribution as a `LibSemver.Version` struct.\\n     */\\n    constructor(\\n        address tokenVotingPluginRepo,\\n        address daoFactory,\\n        address trustedForwarder,\\n        bytes32 rankTokenCodeId,\\n        bytes32 ACIDDIistributionId,\\n        bytes32 accessManagerId,\\n        bytes32 governanceERC20BaseId,\\n        bytes32 distributionName,\\n        LibSemver.Version memory distributionVersion\\n    ) {\\n        _governanceERC20Base = getContractsIndex().get(governanceERC20BaseId);\\n        _tokenVotingPluginRepo = IPluginRepo(tokenVotingPluginRepo);\\n        _daoFactory = IDAOFactory(daoFactory);\\n        _trustedForwarder = trustedForwarder;\\n        _distributionName = distributionName;\\n        _distributionVersion = LibSemver.toUint256(distributionVersion);\\n        _rankTokenBase = getContractsIndex().get(rankTokenCodeId);\\n        if (_rankTokenBase == address(0)) {\\n            revert(\\\"Rank token base not found\\\");\\n        }\\n        _ACIDDistributionBase = IDistribution(getContractsIndex().get(ACIDDIistributionId));\\n        if (address(_ACIDDistributionBase) == address(0)) {\\n            revert(\\\"ACID distribution base not found\\\");\\n        }\\n\\n        _accessManagerBase = getContractsIndex().get(accessManagerId);\\n        if (_accessManagerBase == address(0)) {\\n            revert(\\\"Access manager base not found\\\");\\n        }\\n        require(\\n            ERC165Checker.supportsInterface(_accessManagerBase, type(IERC7746).interfaceId),\\n            \\\"Access manager does not support IERC7746\\\"\\n        );\\n    }\\n\\n    function createOSxDAO(\\n        OSxDistributionArguments memory args\\n    ) internal returns (address[] memory instances, bytes32, uint256) {\\n        MintSettings memory mintSettings = MintSettings(new address[](1), new uint256[](1));\\n        mintSettings.receivers[0] = address(this);\\n        mintSettings.amounts[0] = 0;\\n        address token = _governanceERC20Base.clone();\\n        TokenSettings memory tokenSettings = TokenSettings(token, args.tokenName, args.tokenSymbol);\\n        VotingSettings memory votingSettings = VotingSettings({\\n            votingMode: VotingMode.Standard,\\n            supportThreshold: 666666,\\n            minParticipation: 10 ** 4,\\n            minDuration: 86400,\\n            minProposerVotingPower: 1\\n        });\\n\\n        IDAOFactory.DAOSettings memory daoSettings = IDAOFactory.DAOSettings(\\n            _trustedForwarder,\\n            args.daoURI,\\n            args.subdomain,\\n            args.metadata\\n        );\\n\\n        IDAOFactory.PluginSettings memory tokenVotingPluginSetup = IDAOFactory.PluginSettings(\\n            IDAOFactory.PluginSetupRef(\\n                _tokenVotingPluginRepo.getLatestVersion(_tokenVotingPluginRepo.latestRelease()).tag,\\n                _tokenVotingPluginRepo\\n            ),\\n            abi.encode(votingSettings, tokenSettings, mintSettings)\\n        );\\n\\n        IDAOFactory.PluginSettings[] memory pluginSettings = new IDAOFactory.PluginSettings[](1);\\n        pluginSettings[0] = tokenVotingPluginSetup;\\n        address createdDao = _daoFactory.createDao(daoSettings, pluginSettings);\\n\\n        SimpleAccessManager.SimpleAccessManagerInitializer[]\\n            memory govTokenAccessSettings = new SimpleAccessManager.SimpleAccessManagerInitializer[](1);\\n        govTokenAccessSettings[0].selector = DistributableGovernanceERC20.mint.selector;\\n        govTokenAccessSettings[0].dissallowedAddresses = new address[](1);\\n        govTokenAccessSettings[0].dissallowedAddresses[0] = createdDao;\\n        govTokenAccessSettings[0].distributionComponentsOnly = true;\\n\\n        SimpleAccessManager govTokenAccessManager = SimpleAccessManager(_accessManagerBase.clone());\\n\\n        govTokenAccessManager.initialize(govTokenAccessSettings, tokenSettings.addr, IDistributor(msg.sender)); // msg.sender must be IDistributor or it will revert\\n        DistributableGovernanceERC20(tokenSettings.addr).initialize(\\n            IDAO(createdDao),\\n            tokenSettings.name,\\n            tokenSettings.symbol,\\n            mintSettings,\\n            address(govTokenAccessManager)\\n        );\\n\\n        address[] memory returnValue = new address[](3);\\n        returnValue[0] = createdDao;\\n        returnValue[1] = token;\\n        returnValue[2] = address(govTokenAccessManager);\\n\\n        return (returnValue, \\\"OSxDistribution\\\", 1);\\n    }\\n\\n    function createACID(\\n        UserACIDSettings memory args,\\n        address dao\\n    ) internal returns (address[] memory instances, bytes32, uint256) {\\n        address rankToken = _rankTokenBase.clone();\\n\\n        bytes4[] memory rankTokenSelectors = new bytes4[](6);\\n        rankTokenSelectors[0] = RankToken.mint.selector;\\n        rankTokenSelectors[1] = RankToken.lock.selector;\\n        rankTokenSelectors[2] = RankToken.unlock.selector;\\n        rankTokenSelectors[3] = RankToken.batchMint.selector;\\n        rankTokenSelectors[4] = RankToken.setURI.selector;\\n        rankTokenSelectors[5] = RankToken.setContractURI.selector;\\n\\n        SimpleAccessManager.SimpleAccessManagerInitializer[]\\n            memory RankTokenAccessSettings = new SimpleAccessManager.SimpleAccessManagerInitializer[](6);\\n\\n        RankTokenAccessSettings[0].selector = RankToken.mint.selector;\\n        RankTokenAccessSettings[0].dissallowedAddresses = new address[](1);\\n        RankTokenAccessSettings[0].dissallowedAddresses[0] = dao;\\n        RankTokenAccessSettings[0].distributionComponentsOnly = true;\\n\\n        RankTokenAccessSettings[1].selector = RankToken.lock.selector;\\n        RankTokenAccessSettings[1].dissallowedAddresses = new address[](1);\\n        RankTokenAccessSettings[1].dissallowedAddresses[0] = dao;\\n        RankTokenAccessSettings[1].distributionComponentsOnly = true;\\n\\n        RankTokenAccessSettings[2].selector = RankToken.unlock.selector;\\n        RankTokenAccessSettings[2].dissallowedAddresses = new address[](1);\\n        RankTokenAccessSettings[2].dissallowedAddresses[0] = dao;\\n        RankTokenAccessSettings[2].distributionComponentsOnly = true;\\n\\n        RankTokenAccessSettings[3].selector = RankToken.batchMint.selector;\\n        RankTokenAccessSettings[3].dissallowedAddresses = new address[](1);\\n        RankTokenAccessSettings[3].dissallowedAddresses[0] = dao;\\n        RankTokenAccessSettings[3].distributionComponentsOnly = true;\\n\\n        RankTokenAccessSettings[4].selector = RankToken.setURI.selector;\\n        RankTokenAccessSettings[4].distributionComponentsOnly = true;\\n\\n        RankTokenAccessSettings[5].selector = RankToken.setContractURI.selector;\\n        RankTokenAccessSettings[5].distributionComponentsOnly = true;\\n\\n        SimpleAccessManager rankTokenAccessManager = SimpleAccessManager(_accessManagerBase.clone());\\n\\n        rankTokenAccessManager.initialize(RankTokenAccessSettings, rankToken, IDistributor(msg.sender)); // msg.sender must be IDistributor or it will revert\\n\\n        RankToken(rankToken).initialize(args.rankTokenURI, args.RankTokenContractURI, address(rankTokenAccessManager));\\n        (\\n            address[] memory ACIDDistrAddresses,\\n            bytes32 ACIDDistributionname,\\n            uint256 ACIDDistributionVersion\\n        ) = _ACIDDistributionBase.instantiate(abi.encode(dao, rankToken, args.metadata));\\n\\n        RankifyInstanceInit.contractInitializer memory ACIDInit = RankifyInstanceInit.contractInitializer({\\n            timePerTurn: args.timePerTurn,\\n            maxPlayersSize: args.maxPlayersSize,\\n            minPlayersSize: args.minPlayersSize,\\n            rewardToken: rankToken,\\n            timeToJoin: args.timeToJoin,\\n            gamePrice: args.gamePrice,\\n            joinGamePrice: args.joinGamePrice,\\n            maxTurns: args.maxTurns,\\n            numWinners: 1,\\n            voteCredits: args.voteCredits,\\n            paymentToken: args.paymentToken\\n        });\\n\\n        RankifyInstanceInit(ACIDDistrAddresses[0]).init(\\n            string(abi.encodePacked(ACIDDistributionname)),\\n            LibSemver.toString(LibSemver.parse(ACIDDistributionVersion)),\\n            ACIDInit\\n        );\\n        address[] memory returnValue = new address[](ACIDDistrAddresses.length + 2);\\n        for (uint256 i; i < ACIDDistrAddresses.length; ++i) {\\n            returnValue[i] = ACIDDistrAddresses[i];\\n        }\\n        returnValue[ACIDDistrAddresses.length] = address(rankTokenAccessManager);\\n        returnValue[ACIDDistrAddresses.length + 1] = rankToken;\\n\\n        return (returnValue, ACIDDistributionname, ACIDDistributionVersion);\\n    }\\n\\n    /**\\n     * @notice Instantiates a new instance with the provided data.\\n     * @param data The initialization data for the new instance, typeof {DistributorArguments}.\\n     * @return instances An array of addresses representing the new instances.\\n     * @return distributionName A bytes32 value representing the name of the distribution.\\n     * @return distributionVersion A uint256 value representing the version of the distribution.\\n     * @dev `instances` array contents: DAO, GovernanceToken, Gov Token AccessManager, ACID Diamond, 8x ACID Diamond facets, RankTokenAccessManager, RankToken\\n     */\\n    function instantiate(\\n        bytes memory data\\n    ) public override returns (address[] memory instances, bytes32 distributionName, uint256 distributionVersion) {\\n        DistributorArguments memory args = abi.decode(data, (DistributorArguments));\\n\\n        (address[] memory DAOInstances, , ) = createOSxDAO(args.DAOSEttings);\\n        (address[] memory ACIDInstances, , ) = createACID(args.ACIDSettings, DAOInstances[0]);\\n\\n        address[] memory returnValue = new address[](DAOInstances.length + ACIDInstances.length);\\n\\n        for (uint256 i; i < DAOInstances.length; ++i) {\\n            returnValue[i] = DAOInstances[i];\\n        }\\n        for (uint256 i; i < ACIDInstances.length; ++i) {\\n            returnValue[DAOInstances.length + i] = ACIDInstances[i];\\n        }\\n        return (returnValue, _distributionName, _distributionVersion);\\n    }\\n\\n    function contractURI() public pure virtual override returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    function get() external view returns (address[] memory sources, bytes32, uint256) {\\n        address[] memory srcs = new address[](8);\\n        srcs[0] = address(_tokenVotingPluginRepo);\\n        srcs[1] = address(_daoFactory);\\n        srcs[2] = address(_trustedForwarder);\\n        srcs[3] = address(_rankTokenBase);\\n        srcs[4] = address(_ACIDDistributionBase);\\n        srcs[6] = address(_governanceERC20Base);\\n        srcs[7] = address(_accessManagerBase);\\n        return (srcs, _distributionName, _distributionVersion);\\n    }\\n\\n    /**\\n     * @notice Returns the schema of the distribution.\\n     * @dev This is only needed to ensure `DistributorArguments` are provided in ABI, as it would be internal otherwise.\\n     * @return DistributorArguments The schema of the distribution.\\n     */\\n    function distributionSchema() external pure returns (DistributorArguments memory) {\\n        return\\n            DistributorArguments({\\n                DAOSEttings: OSxDistributionArguments(\\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\", \\\"\\\"),\\n                ACIDSettings: UserACIDSettings(0, 0, 0, 0, 0, 0, 0, address(0), 0, \\\"\\\", \\\"\\\", \\\"\\\")\\n            });\\n    }\\n}\\n\",\"keccak256\":\"0x48cc73c4faa527222a2fb1ca650956e002933087ec65b459436df880e3091d97\",\"license\":\"MIT\"},\"src/initializers/RankifyInstanceInit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamonds: https://eips.ethereum.org/EIPS/eip-2535\\n*\\n* Implementation of a diamond.\\n/******************************************************************************/\\n\\nimport {LibDiamond} from \\\"../vendor/diamond/libraries/LibDiamond.sol\\\";\\nimport {IDiamondLoupe} from \\\"../vendor/diamond/interfaces/IDiamondLoupe.sol\\\";\\nimport {IDiamondCut} from \\\"../vendor/diamond/interfaces/IDiamondCut.sol\\\";\\nimport {IERC173} from \\\"../vendor/diamond/interfaces/IERC173.sol\\\";\\nimport {IERC165} from \\\"../vendor/diamond/interfaces/IERC165.sol\\\";\\nimport {LibEIP712WithStorage} from \\\"../libraries/LibEIP712Storage.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\nimport {IRankifyInstanceCommons} from \\\"../interfaces/IRankifyInstanceCommons.sol\\\";\\nimport {IRankToken} from \\\"../interfaces/IRankToken.sol\\\";\\nimport {LibTBG} from \\\"../libraries/LibTurnBasedGame.sol\\\";\\nimport {LibQuadraticVoting} from \\\"../libraries/LibQuadraticVoting.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n// import {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\n\\n// It is expected that this contract is customized if you want to deploy your diamond\\n// with data from a deployment script. Use the init function to initialize state variables\\n// of your diamond. Add parameters to the init funciton if you need to.\\n\\ncontract RankifyInstanceInit is Initializable {\\n    function _buildDomainSeparator(\\n        bytes32 typeHash,\\n        bytes32 nameHash,\\n        bytes32 versionHash\\n    ) private view returns (bytes32) {\\n        return keccak256(abi.encode(typeHash, nameHash, versionHash, block.chainid, address(this)));\\n    }\\n\\n    function RInstanceStorage() internal pure returns (IRankifyInstanceCommons.RInstanceSettings storage bog) {\\n        bytes32 position = LibTBG.getDataStorage();\\n        assembly {\\n            bog.slot := position\\n        }\\n    }\\n\\n    struct contractInitializer {\\n        uint256 timePerTurn;\\n        uint256 maxPlayersSize;\\n        uint256 minPlayersSize;\\n        address rewardToken;\\n        uint256 timeToJoin;\\n        uint256 gamePrice;\\n        uint256 joinGamePrice;\\n        uint256 maxTurns;\\n        uint256 numWinners;\\n        uint256 voteCredits;\\n        address paymentToken;\\n    }\\n\\n    // You can add parameters to this function in order to pass in\\n    // data to set your own state variables\\n    function init(string memory name, string memory version, contractInitializer memory initData) external initializer {\\n        // adding ERC165 data\\n        // LibDiamond.enforceIsContractOwner();\\n        LibDiamond.DiamondStorage storage ds = LibDiamond.diamondStorage();\\n        ds.supportedInterfaces[type(IERC165).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondCut).interfaceId] = true;\\n        ds.supportedInterfaces[type(IDiamondLoupe).interfaceId] = true;\\n        ds.supportedInterfaces[type(IERC173).interfaceId] = true;\\n        bytes32 hashedName = keccak256(bytes(name));\\n        bytes32 hashedVersion = keccak256(bytes(version));\\n        bytes32 typeHash = keccak256(\\n            \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\"\\n        );\\n        LibEIP712WithStorage.LibEIP712WithStorageStorage storage ss = LibEIP712WithStorage.EIP712WithStorage();\\n        ss._HASHED_NAME = hashedName;\\n        ss._HASHED_VERSION = hashedVersion;\\n        ss._CACHED_CHAIN_ID = block.chainid;\\n        ss._CACHED_DOMAIN_SEPARATOR = _buildDomainSeparator(typeHash, hashedName, hashedVersion);\\n        ss._CACHED_THIS = address(this);\\n        ss._TYPE_HASH = typeHash;\\n\\n        IRankifyInstanceCommons.RInstanceSettings storage _RInstance = RInstanceStorage();\\n        _RInstance.voting = LibQuadraticVoting.precomputeValues(initData.voteCredits, initData.minPlayersSize);\\n        _RInstance.gamePrice = initData.gamePrice;\\n        _RInstance.joinGamePrice = initData.joinGamePrice;\\n        require(initData.paymentToken != address(0), \\\"initializer.paymentToken not set\\\");\\n        _RInstance.gamePaymentToken = initData.paymentToken;\\n        IRankToken rankContract = IRankToken(initData.rewardToken);\\n        require(\\n            rankContract.supportsInterface(type(IRankToken).interfaceId),\\n            \\\"RankifyInstance->init: rank token address does not support Rank interface\\\"\\n        );\\n        _RInstance.rankTokenAddress = initData.rewardToken;\\n        _RInstance.contractInitialized = true;\\n\\n        LibTBG.GameSettings memory settings;\\n        settings.timePerTurn = initData.timePerTurn;\\n        settings.maxPlayersSize = initData.maxPlayersSize;\\n        settings.minPlayersSize = initData.minPlayersSize;\\n        settings.timeToJoin = initData.timeToJoin;\\n        settings.maxTurns = initData.maxTurns;\\n        settings.numWinners = initData.numWinners;\\n        LibTBG.init(settings);\\n\\n        // add your own state variables\\n        // EIP-2535 specifies that the `diamondCut` function takes two optional\\n        // arguments: address _init and bytes calldata _calldata\\n        // These arguments are used to execute an arbitrary function using delegatecall\\n        // in order to set state variables in the diamond during deployment or an upgrade\\n        // More info here: https://eips.ethereum.org/EIPS/eip-2535#diamond-interface\\n    }\\n}\\n\",\"keccak256\":\"0x50e18ff6798ff3ac05b8cf3094628236202324c427d45ac9c070255ebe650c6a\",\"license\":\"MIT\"},\"src/interfaces/ILockableERC1155.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\n/**\\n * @title ILockableERC1155\\n * @dev Interface for a lockable ERC1155 token contract.\\n */\\ninterface ILockableERC1155 is IERC1155 {\\n    error insufficient(uint256 id, uint256 balance, uint256 required);\\n\\n    event TokensLocked(address indexed account, uint256 indexed id, uint256 value);\\n\\n    event TokensUnlocked(address indexed account, uint256 indexed id, uint256 value);\\n\\n    /**\\n     * @dev Locks a specified amount of tokens for a given account and token ID. `account` is the address of the account to lock the tokens for. `id` is the ID of the token to lock. `amount` is the amount of tokens to lock.\\n     *\\n     * emits a _TokensLocked_ event.\\n     */\\n    function lock(address account, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Unlocks a specified amount of tokens for a given account and token ID. `account` is the address of the account to unlock the tokens for. `id` is the ID of the token to unlock. `amount` is the amount of tokens to unlock.\\n     *\\n     * emits a _TokensUnlocked_ event.\\n     */\\n    function unlock(address account, uint256 id, uint256 amount) external;\\n\\n    /**\\n     * @dev Returns the unlocked balance of tokens for a given account and token ID. `account` is the address of the account to check the unlocked balance for. `id` is the ID of the token to check the unlocked balance for.\\n     *\\n     * Returns:\\n     *\\n     * - The unlocked balance of tokens.\\n     */\\n    function unlockedBalanceOf(address account, uint256 id) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xea42e12b3d90291b4d9873ae4a05dd682f62878328210a578ce092eb31b2844a\",\"license\":\"MIT\"},\"src/interfaces/IRankToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {ILockableERC1155} from \\\"./ILockableERC1155.sol\\\";\\n\\ninterface IRankToken is ILockableERC1155 {\\n    event RankingInstanceUpdated(address indexed newRankingInstance);\\n\\n    // event LevelUp(address indexed account, uint256 id);\\n\\n    /**\\n     * @dev Mints a specified amount of tokens to an account. `to` is the address of the account to mint the tokens to. `amount` is the amount of tokens to mint. `poolId` is the ID of the pool. `data` is the additional data.\\n     */\\n    function mint(address to, uint256 amount, uint256 poolId, bytes memory data) external;\\n\\n    /**\\n     * @dev Mints specified amounts of tokens to an account. `to` is the address of the account to mint the tokens to. `ids` is the array of IDs of the tokens to mint. `amounts` is the array of amounts of tokens to mint. `data` is the additional data.\\n     */\\n    function batchMint(address to, uint256[] memory ids, uint256[] memory amounts, bytes memory data) external;\\n\\n    // /**\\n    //  * @dev Updates the ranking instance. `newRankingInstance` is the address of the new ranking instance.\\n    //  *\\n    //  * emits a _RankingInstanceUpdated_ event.\\n    //  */\\n    // function updateRankingInstance(address newRankingInstance) external;\\n\\n    /**\\n     * @dev Gets the ranking instance which can emit new rank updates and mint rank tokens.\\n     *\\n     * Returns:\\n     *\\n     * - The address of the ranking instance.\\n     */\\n    // function getRankingInstance() external view returns (address);\\n\\n    // /**\\n    //  * @dev Finds the new rank of an account. `account` is the address of the account. `oldRank` is the old rank of the account.\\n    //  * It checks the balance of the account and returns the new rank that can be upgraded to.\\n    //  *\\n    //  * Returns:\\n    //  *\\n    //  * - The new rank of the account.\\n    //  */\\n    // function findNewRank(address account, uint256 oldRank) external view returns (uint256);\\n\\n    // /**\\n    //  * @dev Gets the rank of an account. `account` is the address of the account.\\n    //  *\\n    //  * Returns:\\n    //  *\\n    //  * - The rank of the account.\\n    //  */\\n    // function getAccountRank(address account) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xb21a5ffaf22d264802b6615c579e41eff9a331a48b085acedfd935f97733c5c7\",\"license\":\"MIT\"},\"src/interfaces/IRankifyInstanceCommons.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {LibTBG} from \\\"../libraries/LibTurnBasedGame.sol\\\";\\nimport {LibQuadraticVoting} from \\\"../libraries/LibQuadraticVoting.sol\\\";\\n\\ninterface IRankifyInstanceCommons {\\n    struct RInstanceSettings {\\n        uint256 gamePrice;\\n        address gamePaymentToken;\\n        uint256 joinGamePrice;\\n        uint256 numGames;\\n        address rankTokenAddress;\\n        bool contractInitialized;\\n        LibQuadraticVoting.qVotingStruct voting;\\n    }\\n\\n    struct RInstanceState {\\n        RInstanceSettings BestOfState;\\n        LibTBG.GameSettings TBGSEttings;\\n    }\\n\\n    struct VoteHidden {\\n        bytes32 hash;\\n        bytes proof;\\n    }\\n\\n    struct RInstance {\\n        uint256 rank;\\n        address createdBy;\\n        mapping(uint256 => string) ongoingProposals; //Previous Turn Proposals (These are being voted on)\\n        uint256 numOngoingProposals;\\n        uint256 numPrevProposals;\\n        mapping(address => bytes32) proposalCommitmentHashes; //Current turn Proposal submittion\\n        uint256 numCommitments;\\n        mapping(address => VoteHidden) votesHidden;\\n        address[] additionalRanks;\\n        uint256 paymentsBalance;\\n        uint256 numVotesThisTurn;\\n        uint256 numVotesPrevTurn;\\n        mapping(address => bool) playerVoted;\\n    }\\n\\n    event RegistrationOpen(uint256 indexed gameid);\\n    event PlayerJoined(uint256 indexed gameId, address participant);\\n    event GameStarted(uint256 indexed gameId);\\n    event gameCreated(uint256 gameId, address indexed gm, address indexed creator, uint256 indexed rank);\\n    event GameClosed(uint256 indexed gameId);\\n    event PlayerLeft(uint256 indexed gameId, address indexed player);\\n}\\n\",\"keccak256\":\"0xca495b6a330a88cbfb1c3bfdac84fdd37242bba7fd10dd5582f8f664b6bdb19a\",\"license\":\"MIT\"},\"src/libraries/LibArray.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\nimport \\\"hardhat/console.sol\\\";\\n\\nlibrary LibArray {\\n    /**\\n     * @dev Sorts the elements of the array in ascending order using the quicksort algorithm.\\n     *\\n     * Requirements:\\n     *\\n     * - The array to be sorted must not be empty.\\n     * - The starting and ending indices must be within the bounds of the array.\\n     *\\n     * Modifies:\\n     *\\n     * - The array is sorted in ascending order.\\n     *\\n     * Note:\\n     *\\n     * - This function uses the in-place quicksort algorithm, which has an average-case complexity of O(n log n) and a worst-case complexity of O(n^2).\\n     */\\n    function quickSort(uint256[] memory arr, int256 left, int256 right) internal view {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = arr[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (arr[uint256(i)] > pivot) ++i;\\n            while (pivot > arr[uint256(j)]) j--;\\n            if (i <= j) {\\n                (arr[uint256(i)], arr[uint256(j)]) = (arr[uint256(j)], arr[uint256(i)]);\\n                ++i;\\n                j--;\\n            }\\n        }\\n        if (left < j) quickSort(arr, left, j);\\n        if (i < right) quickSort(arr, i, right);\\n    }\\n}\\n\",\"keccak256\":\"0x5afcd379801f32d7bc5e740b2b06a644454f1c347d65d8142d8543ff67197e95\",\"license\":\"MIT\"},\"src/libraries/LibEIP712Storage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.20;\\n\\nimport {IDiamondCut} from \\\"../vendor/diamond/interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibEIP712WithStorage {\\n    bytes32 constant EIP712_STORAGE_POSITION = keccak256(\\\"EIP.712.STORAGE.POSITION\\\");\\n\\n    struct LibEIP712WithStorageStorage {\\n        bytes32 _CACHED_DOMAIN_SEPARATOR;\\n        uint256 _CACHED_CHAIN_ID;\\n        address _CACHED_THIS;\\n        bytes32 _HASHED_NAME;\\n        bytes32 _HASHED_VERSION;\\n        bytes32 _TYPE_HASH;\\n    }\\n\\n    function EIP712WithStorage() internal pure returns (LibEIP712WithStorageStorage storage ds) {\\n        bytes32 position = EIP712_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x08583ddcb7616e208aa39f88777b1ce1661ff60b2e446678372ac7e152ad5c2f\",\"license\":\"MIT\"},\"src/libraries/LibQuadraticVoting.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\nerror quadraticVotingError(string paramter, uint256 arg, uint256 arg2);\\n\\n/**\\n * @title LibQuadraticVoting\\n * @dev A library for quadratic voting calculations.\\n */\\nlibrary LibQuadraticVoting {\\n    struct qVotingStruct {\\n        uint256 voteCredits;\\n        uint256 maxQuadraticPoints;\\n        uint256 minQuadraticPositons;\\n    }\\n\\n    /**\\n     * @dev Precomputes the values for quadratic voting. `voteCredits` is the total number of vote credits. `minExpectedVoteItems` is the minimum expected number of vote items.\\n     *\\n     * Returns:\\n     *\\n     * - A `qVotingStruct` containing the precomputed values.\\n     */\\n    function precomputeValues(\\n        uint256 voteCredits,\\n        uint256 minExpectedVoteItems\\n    ) internal pure returns (qVotingStruct memory) {\\n        qVotingStruct memory q;\\n\\n        q.maxQuadraticPoints = Math.sqrt(voteCredits);\\n\\n        // This block finds how many vote positions are needed to distribute all quadratic vote points.\\n        uint256 iterator = 0;\\n        uint256 accumulator = 0;\\n        do {\\n            accumulator += (q.maxQuadraticPoints - iterator) ** 2;\\n            iterator++;\\n        } while (accumulator < voteCredits);\\n        // This enforces requirement that all vote credits can indeed be spended (no leftovers)\\n        if (accumulator != voteCredits) require(false, \\\"quadraticVotingError: voteCredits bust be i^2 series\\\"); //revert quadraticVotingError(\\\"voteCredits bust be i^2 series\\\", accumulator, voteCredits);\\n        q.minQuadraticPositons = iterator;\\n        // In order to spend all vote credits there must be at least minQuadraticPositons+1 (becuase proposer is also a player and cannot vote for himself)\\n        if (minExpectedVoteItems <= q.minQuadraticPositons)\\n            require(false, \\\"quadraticVotingError: Minimum Voting positions above min players\\\");\\n        // revert quadraticVotingError(\\n        //     \\\"Minimum Voting positions above min players\\\",\\n        //     q.minQuadraticPositons,\\n        //     minExpectedVoteItems\\n        // );\\n        q.voteCredits = voteCredits;\\n        return q;\\n    }\\n\\n    /**\\n     * @dev Computes the scores for each proposal by voter preference index. `q` is the precomputed quadratic voting values. `VotersVotes` is a 2D array of votes, where each row corresponds to a voter and each column corresponds to a proposal. `voterVoted` is an array indicating whether each voter has voted. `notVotedGivesEveyone` is the number of points to distribute to each proposal for each voter that did not vote. `proposalsLength` is the number of proposals.\\n     *\\n     * Returns:\\n     *\\n     * - An array of scores for each proposal.\\n     */\\n    function computeScoresByVPIndex(\\n        qVotingStruct memory q,\\n        uint256[][] memory VotersVotes,\\n        bool[] memory voterVoted,\\n        uint256 notVotedGivesEveyone,\\n        uint256 proposalsLength\\n    ) internal pure returns (uint256[] memory) {\\n        uint256[] memory scores = new uint256[](proposalsLength);\\n        uint256[] memory creditsUsed = new uint256[](VotersVotes.length);\\n\\n        for (uint256 proposalIdx = 0; proposalIdx < proposalsLength; proposalIdx++) {\\n            //For each proposal\\n            scores[proposalIdx] = 0;\\n            for (uint256 vi = 0; vi < VotersVotes.length; vi++) {\\n                // For each potential voter\\n                uint256[] memory voterVotes = VotersVotes[vi];\\n                if (!voterVoted[vi]) {\\n                    // Check if voter wasn't voting\\n                    scores[proposalIdx] += notVotedGivesEveyone; // Gives benefits to everyone but himself\\n                    creditsUsed[vi] = q.voteCredits;\\n                } else {\\n                    //If voter voted\\n                    scores[proposalIdx] += voterVotes[proposalIdx];\\n                    creditsUsed[vi] += voterVotes[proposalIdx] ** 2;\\n                    if (creditsUsed[vi] > q.voteCredits) require(false, \\\"quadraticVotingError\\\"); // revert quadraticVotingError(\\\"Quadratic: vote credits overrun\\\", q.voteCredits, creditsUsed[vi]);\\n                }\\n            }\\n        }\\n        return scores;\\n    }\\n}\\n\",\"keccak256\":\"0xcf8d392a2f768c9c5d5af7b641bf0d9b5273ac8f3ba4e41c568576c78085e44a\",\"license\":\"MIT\"},\"src/libraries/LibTurnBasedGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"hardhat/console.sol\\\";\\n// import {EnumerableMap} from \\\"@openzeppelin/contracts/utils/structs/EnumerableMap.sol\\\";\\nimport {EnumerableSet} from \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/token/ERC1155/IERC1155.sol\\\";\\nimport {IERC721} from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport {LibArray} from \\\"../libraries/LibArray.sol\\\";\\nimport {Math} from \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\n/**\\n * @title LibTBG\\n * @dev Library for managing turn-based games.\\n * It is designed to be used as a base library for games, and provides the following functionality:\\n * - setting game settings such as time per turn, max players, min players, etc as well as perform score and leaderboard tracking\\n *\\n * Limitations:\\n * - It is assumed there is only one game per player\\n * - It is assumed there is only on game master per game\\n *\\n * ***WARNING*** Some limitations:\\n * - This library is still under development and its interfaces may change.\\n * - getting game data (which has own storage assigement and can be encapsulated from library) however there is no storage slot collision checks in place\\n *\\n */\\nlibrary LibTBG {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    struct GameSettings {\\n        uint256 timePerTurn;\\n        uint256 maxPlayersSize;\\n        uint256 minPlayersSize;\\n        uint256 timeToJoin;\\n        uint256 maxTurns;\\n        uint256 numWinners;\\n        uint256 voteCredits;\\n    }\\n\\n    struct GameInstance {\\n        address gameMaster;\\n        uint256 currentTurn;\\n        uint256 turnStartedAt;\\n        uint256 registrationOpenAt;\\n        bool hasStarted;\\n        bool hasEnded;\\n        EnumerableSet.AddressSet players;\\n        mapping(address => bool) madeMove;\\n        uint256 numPlayersMadeMove;\\n        mapping(address => uint256) score;\\n        bytes32 implemenationStoragePointer;\\n        bool isOvertime;\\n        address[] leaderboard;\\n    }\\n\\n    struct TBGStorageStruct {\\n        GameSettings settings;\\n        mapping(uint256 => GameInstance) games;\\n        mapping(address => uint256) playerInGame;\\n        uint256 totalGamesCreated;\\n    }\\n\\n    bytes32 constant TBG_STORAGE_POSITION = keccak256(\\\"turnbasedgame.storage.position\\\");\\n    bytes32 constant IMPLEMENTATION_STORAGE_POSITION = keccak256(\\\"implementation.turnbasedgame.storage.position\\\");\\n\\n    function TBGStorage() internal pure returns (TBGStorageStruct storage es) {\\n        bytes32 position = TBG_STORAGE_POSITION;\\n        assembly {\\n            es.slot := position\\n        }\\n    }\\n\\n    function _getGame(uint256 gameId) internal view returns (GameInstance storage) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.games[gameId];\\n    }\\n\\n    /**\\n     * @dev Initializes the game with the provided settings. `settings` is the settings for the game.\\n     *\\n     * Requirements:\\n     *\\n     * - `settings.timePerTurn` must not be zero.\\n     * - `settings.maxPlayersSize` must not be zero.\\n     * - `settings.minPlayersSize` must be at least 2.\\n     * - `settings.maxTurns` must not be zero.\\n     * - `settings.numWinners` must not be zero and must be less than `settings.minPlayersSize`.\\n     * - `settings.timeToJoin` must not be zero.\\n     * - `settings.maxPlayersSize` must not be less than `settings.minPlayersSize`.\\n     * Modifies:\\n     *\\n     * - Sets the settings of the game to `settings`.\\n     */\\n    function init(GameSettings memory settings) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        if (settings.timePerTurn == 0) require(false, \\\"settings.timePerTurn\\\"); //  revert invalidConfiguration('timePerTurn');\\n        if (settings.maxPlayersSize == 0) require(false, \\\"settings.maxPlayersSize\\\"); // revert invalidConfiguration('maxPlayersSize');\\n        if (settings.minPlayersSize < 2) require(false, \\\"settings.minPlayersSize\\\"); //revert invalidConfiguration('minPlayersSize');\\n        if (settings.maxTurns == 0) require(false, \\\"settings.maxTurns\\\"); //revert invalidConfiguration('maxTurns');\\n        if (settings.numWinners == 0 || settings.numWinners >= settings.minPlayersSize) require(false, \\\"numWinners\\\"); //revert invalidConfiguration('numWinners');\\n        if (settings.timeToJoin == 0) require(false, \\\"timeToJoin\\\"); // revert invalidConfiguration('timeToJoin');\\n        if (settings.maxPlayersSize < settings.minPlayersSize) require(false, \\\"maxPlayersSize\\\"); //revert invalidConfiguration('maxPlayersSize');\\n\\n        tbg.settings = settings;\\n    }\\n\\n    /**\\n     * @dev Creates a new game with the provided game ID and game master. `gameId` is the ID of the game. `gm` is the address of the game master.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must not already exist.\\n     * - `gm` must not be the zero address.\\n     * - `gameId` must not be zero.\\n     * - The game master of the game with `gameId` must be the zero address.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the game master of the game with `gameId` to `gm`.\\n     * - Increments the total number of games created.\\n     */\\n    function createGame(uint256 gameId, address gm) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(!gameExists(gameId), \\\"createGame->Already exists\\\");\\n        require(gm != address(0), \\\"createGame->GM\\\");\\n        require(gameId != 0, \\\"createGame->gameId\\\");\\n        require(tbg.games[gameId].gameMaster == address(0), \\\"createGame->gameId\\\");\\n        tbg.games[gameId].gameMaster = gm;\\n        tbg.totalGamesCreated += 1;\\n\\n        //totalGamesCreated ensures nonce-like behaviur:\\n        //even if game would get deleted and re-created with same name, data storage would be different\\n        tbg.games[gameId].implemenationStoragePointer = keccak256(\\n            abi.encode(gameId, tbg.totalGamesCreated, TBG_STORAGE_POSITION)\\n        );\\n    }\\n\\n    /**\\n     * @dev Deletes a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the game master, current turn, hasEnded, hasStarted,\\n     *   implementationStoragePointer, isOvertime, leaderboard, numPlayersMadeMove,\\n     *   players, registrationOpenAt, and turnStartedAt of the game with `gameId`\\n     *   to their initial values.\\n     * - Sets the score and madeMove of each player in the game with `gameId`\\n     *   to their initial values.\\n     */\\n    function deleteGame(uint256 gameId) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        address[] memory players = _game.players.values();\\n        for (uint256 i = 0; i < players.length; ++i) {\\n            tbg.games[gameId].score[players[i]] = 0;\\n            tbg.games[gameId].madeMove[players[i]] = false;\\n        }\\n        delete tbg.games[gameId].gameMaster;\\n        delete tbg.games[gameId].currentTurn;\\n        delete tbg.games[gameId].hasEnded;\\n        delete tbg.games[gameId].hasStarted;\\n        delete tbg.games[gameId].implemenationStoragePointer;\\n        delete tbg.games[gameId].isOvertime;\\n        delete tbg.games[gameId].leaderboard;\\n        delete tbg.games[gameId].numPlayersMadeMove;\\n        delete tbg.games[gameId].players;\\n        delete tbg.games[gameId].registrationOpenAt;\\n        delete tbg.games[gameId].turnStartedAt;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID can be joined. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game can be joined.\\n     */\\n    function canBeJoined(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        if (_game.hasStarted || _game.registrationOpenAt == 0) return false;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Adds a player to a game with the provided game ID. `gameId` is the ID of the game. `participant` is the address of the player.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - `participant` must not already be in a game.\\n     * - The number of players in the game with `gameId` must be less than the maximum number of players.\\n     * - The game with `gameId` must be joinable.\\n     *\\n     * Modifies:\\n     *\\n     * - Adds `participant` to the players of the game with `gameId`.\\n     * - Sets the madeMove of `participant` in the game with `gameId` to false.\\n     * - Sets the game of `participant` to `gameId`.\\n     */\\n    function addPlayer(uint256 gameId, address participant) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(gameExists(gameId), \\\"addPlayer->invalid game\\\");\\n\\n        require(tbg.playerInGame[participant] == 0, \\\"addPlayer->Player in game\\\");\\n        GameInstance storage _game = _getGame(gameId);\\n        require(_game.players.length() < tbg.settings.maxPlayersSize, \\\"addPlayer->party full\\\");\\n\\n        require(canBeJoined(gameId), \\\"addPlayer->cant join now\\\");\\n        _game.players.add(participant);\\n        _game.madeMove[participant] = false;\\n        tbg.playerInGame[participant] = gameId;\\n    }\\n\\n    /**\\n     * @dev Checks if a player is in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the player is in the game.\\n     */\\n    function isPlayerInGame(uint256 gameId, address player) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.playerInGame[player] == gameId ? true : false;\\n    }\\n\\n    /**\\n     * @dev Removes a player from a game with the provided game ID. `gameId` is the ID of the game. `participant` is the address of the player.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - `participant` must be in the game with `gameId`.\\n     * - The game with `gameId` must not have started or must have ended.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the game of `participant` to 0.\\n     * - Removes `participant` from the players of the game with `gameId`.\\n     */\\n    function removePlayer(uint256 gameId, address participant) internal {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        require(gameExists(gameId), \\\"game does not exist\\\");\\n        require(tbg.playerInGame[participant] == gameId, \\\"Not in the game\\\");\\n        require(_game.hasStarted == false || _game.hasEnded == true, \\\"Cannot leave once started\\\");\\n        tbg.playerInGame[participant] = 0;\\n        _game.players.remove(participant);\\n    }\\n\\n    /**\\n     * @dev Checks if the current turn in a game with the provided game ID has timed out. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - `gameId` must not be zero.\\n     * - The game with `gameId` must have started.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the current turn has timed out.\\n     */\\n    function isTurnTimedOut(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        assert(gameId != 0);\\n        assert(_game.hasStarted == true);\\n        if (block.timestamp <= tbg.settings.timePerTurn + _game.turnStartedAt) return false;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID exists. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game exists.\\n     */\\n    function gameExists(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        if (_game.gameMaster != address(0)) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Enforces that a game with the provided game ID has started. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - `gameId` must not be zero.\\n     * - The game with `gameId` must have started.\\n     */\\n    function enforceHasStarted(uint256 gameId) internal view {\\n        GameInstance storage _game = _getGame(gameId);\\n        assert(gameId != 0);\\n        require(_game.hasStarted, \\\"Game has not yet started\\\");\\n    }\\n\\n    /**\\n     * @dev Enforces that a game with the provided game ID has started. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - `gameId` must not be zero.\\n     * - The game with `gameId` must have started.\\n     *\\n     */\\n    function canEndTurn(uint256 gameId) internal view returns (bool) {\\n        bool turnTimedOut = isTurnTimedOut(gameId);\\n        GameInstance storage _game = _getGame(gameId);\\n        if (!_game.hasStarted || isGameOver(gameId)) return false;\\n        if (turnTimedOut) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Checks if the current turn in a game with the provided game ID can end early. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the current turn can end early.\\n     */\\n    function canEndTurnEarly(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        bool everyoneMadeMove = (_game.numPlayersMadeMove) == _game.players.length() ? true : false;\\n        if (!_game.hasStarted || isGameOver(gameId)) return false;\\n        if (everyoneMadeMove || canEndTurn(gameId)) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Modifier that requires the current turn in a game with the provided game ID to be able to end. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The current turn in the game with `gameId` must be able to end.\\n     */\\n    modifier onlyInTurnTime(uint256 gameId) {\\n        require(isTurnTimedOut(gameId) == false, \\\"onlyInTurnTime -> turn timedout\\\");\\n        _;\\n    }\\n\\n    modifier onlyWhenTurnCanEnd(uint256 gameId) {\\n        require(canEndTurn(gameId) == true, \\\"onlyWhenTurnCanEnd: Not everyone made a move yet and there still is time\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Clears the current moves in a game. `game` is the game.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the madeMove of each player in `game` to false.\\n     */\\n    function _clearCurrentMoves(GameInstance storage game) internal {\\n        for (uint256 i = 0; i < game.players.length(); ++i) {\\n            address player = game.players.at(i);\\n            game.madeMove[player] = false;\\n        }\\n        game.numPlayersMadeMove = 0;\\n    }\\n\\n    /**\\n     * @dev Resets the states of the players in a game. `game` is the game.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the madeMove and score of each player in `game` to their initial values.\\n     */\\n    function _resetPlayerStates(GameInstance storage game) internal {\\n        for (uint256 i = 0; i < game.players.length(); ++i) {\\n            address player = game.players.at(i);\\n            game.madeMove[player] = false;\\n            game.score[player] = 0;\\n        }\\n    }\\n\\n    /**\\n     * @dev Sets the score of a player in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player. `value` is the score.\\n     *\\n     * Requirements:\\n     *\\n     * - `player` must be in the game with `gameId`.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the score of `player` in the game with `gameId` to `value`.\\n     */\\n    function setScore(uint256 gameId, address player, uint256 value) internal {\\n        GameInstance storage _game = _getGame(gameId);\\n        require(isPlayerInGame(gameId, player), \\\"player not in a game\\\");\\n        _game.score[player] = value;\\n    }\\n\\n    /**\\n     * @dev Gets the score of a player in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Returns:\\n     *\\n     * - The score of `player` in the game with `gameId`.\\n     */\\n    function getScore(uint256 gameId, address player) internal view returns (uint256) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.score[player];\\n    }\\n\\n    /**\\n     * @dev Gets the scores of the players in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - An array of the addresses of the players in the game with `gameId`.\\n     * - An array of the scores of the players in the game with `gameId`.\\n     */\\n    function getScores(uint256 gameId) internal view returns (address[] memory, uint256[] memory) {\\n        address[] memory players = getPlayers(gameId);\\n        uint256[] memory scores = new uint256[](players.length);\\n        for (uint256 i = 0; i < players.length; ++i) {\\n            scores[i] = getScore(gameId, players[i]);\\n        }\\n        return (players, scores);\\n    }\\n\\n    /**\\n     * @dev Opens registration for a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the registrationOpenAt of the game with `gameId` to the current block timestamp.\\n     */\\n    function openRegistration(uint256 gameId) internal {\\n        require(gameExists(gameId), \\\"game not found\\\");\\n        GameInstance storage _game = _getGame(gameId);\\n        _game.registrationOpenAt = block.timestamp;\\n    }\\n\\n    /**\\n     * @dev Checks if registration is open for a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether registration is open for the game.\\n     */\\n    function isRegistrationOpen(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        if (_game.registrationOpenAt == 0) {\\n            return false;\\n        } else {\\n            return _game.registrationOpenAt < block.timestamp + tbg.settings.timeToJoin ? true : false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID can start. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game can start.\\n     */\\n    function canStart(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        if (_game.hasStarted) return false;\\n        if (_game.registrationOpenAt == 0) return false;\\n        if (gameId == 0) return false;\\n        if (block.timestamp <= _game.registrationOpenAt + tbg.settings.timeToJoin) return false;\\n        if (_game.players.length() < tbg.settings.minPlayersSize) return false;\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID can start early. `gameId` is the ID of the game.\\n     * By \\\"early\\\" it is assumed that time to join has not yet passed, but it's already cap players limit reached.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game can start early.\\n     */\\n    function canStartEarly(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n\\n        if ((_game.players.length() == tbg.settings.maxPlayersSize) || canStart(gameId)) return true;\\n        return false;\\n    }\\n\\n    /**\\n     * @dev Starts a game with the provided game ID early. `gameId` is the ID of the game.\\n     * By \\\"early\\\" it is assumed that time to join has not yet passed, but it's already cap players limit reached.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - The game with `gameId` must not have started.\\n     * - The game with `gameId` must have opened registration.\\n     * - The number of players in the game with `gameId` must be greater than or equal to the minimum number of players.\\n     * - The number of players in the game with `gameId` must be equal to the maximum number of players or the current block timestamp must be greater than the registration open time plus the time to join.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the hasStarted, hasEnded, currentTurn, and turnStartedAt of the game with `gameId` to their new values.\\n     * - Resets the states of the players in the game with `gameId`.\\n     */\\n    function startGameEarly(uint256 gameId) internal {\\n        GameInstance storage _game = _getGame(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(_game.hasStarted == false, \\\"startGame->already started\\\");\\n        require(_game.registrationOpenAt != 0, \\\"startGame->Game registration was not yet open\\\");\\n        require(gameId != 0, \\\"startGame->Game not found\\\");\\n        require(_game.players.length() >= tbg.settings.minPlayersSize, \\\"startGame->Not enough players\\\");\\n        require(\\n            (_game.players.length() == tbg.settings.maxPlayersSize) ||\\n                (block.timestamp > _game.registrationOpenAt + tbg.settings.timeToJoin),\\n            \\\"startGame->Not enough players\\\"\\n        );\\n        _game.hasStarted = true;\\n        _game.hasEnded = false;\\n        _game.currentTurn = 1;\\n        _game.turnStartedAt = block.timestamp;\\n        _resetPlayerStates(_game);\\n    }\\n\\n    /**\\n     * @dev Starts a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must exist.\\n     * - The game with `gameId` must not have started.\\n     * - The game with `gameId` must have opened registration.\\n     * - The current block timestamp must be greater than the registration open time plus the time to join.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the hasStarted, hasEnded, currentTurn, and turnStartedAt of the game with `gameId` to their new values.\\n     * - Resets the states of the players in the game with `gameId`.\\n     */\\n    function startGame(uint256 gameId) internal {\\n        GameInstance storage _game = _getGame(gameId);\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(_game.hasStarted == false, \\\"startGame->already started\\\");\\n        require(_game.registrationOpenAt != 0, \\\"startGame->Game registration was not yet open\\\");\\n        require(block.timestamp > _game.registrationOpenAt + tbg.settings.timeToJoin, \\\"startGame->Still Can Join\\\");\\n        require(gameId != 0, \\\"startGame->Game not found\\\");\\n        require(_game.players.length() >= tbg.settings.minPlayersSize, \\\"startGame->Not enough players\\\");\\n        _game.hasStarted = true;\\n        _game.hasEnded = false;\\n        _game.currentTurn = 1;\\n        _game.turnStartedAt = block.timestamp;\\n        _resetPlayerStates(_game);\\n    }\\n\\n    /**\\n     * @dev Gets the current turn of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - The current turn of the game with `gameId`.\\n     */\\n    function getTurn(uint256 gameId) internal view returns (uint256) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.currentTurn;\\n    }\\n\\n    /**\\n     * @dev Gets the game master of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - The game master of the game with `gameId`.\\n     */\\n    function getGM(uint256 gameId) internal view returns (address) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.gameMaster;\\n    }\\n\\n    /**\\n     * @dev Checks if the current turn is the last turn in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the current turn is the last turn in the game.\\n     */\\n    function isLastTurn(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        if (_game.currentTurn == tbg.settings.maxTurns) return true;\\n        else return false;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID is over. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game is over.\\n     */\\n    function isGameOver(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        GameInstance storage _game = _getGame(gameId);\\n        if ((_game.currentTurn > tbg.settings.maxTurns) && !_game.isOvertime) return true;\\n        else return false;\\n    }\\n\\n    /**\\n     * @dev Enforces that a game with the provided game ID is not over. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must not be over.\\n     */\\n    function enforceIsNotOver(uint256 gameId) internal view {\\n        require(!isGameOver(gameId), \\\"Game over\\\");\\n    }\\n\\n    /**\\n     * @dev Records a player's move in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must have started.\\n     * - The game with `gameId` must not be over.\\n     * - `player` must not have made a move in the current turn of the game with `gameId`.\\n     * - `player` must be in the game with `gameId`.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the madeMove of `player` in the game with `gameId` to true.\\n     * - Increments the numPlayersMadeMove of the game with `gameId`.\\n     */\\n    function playerMove(uint256 gameId, address player) internal onlyInTurnTime(gameId) {\\n        GameInstance storage _game = _getGame(gameId);\\n        enforceHasStarted(gameId);\\n        enforceIsNotOver(gameId);\\n        require(_game.madeMove[player] == false, \\\"already made a move\\\");\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(gameId == tbg.playerInGame[player], \\\"is not in the game\\\");\\n        _game.madeMove[player] = true;\\n        _game.numPlayersMadeMove += 1;\\n    }\\n\\n    function isPlayerTurnComplete(uint256 gameId, address player) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.madeMove[player];\\n    }\\n\\n    /**\\n     * @dev Enforces that a player is in a game with the provided game ID. `gameId` is the ID of the game. `player` is the address of the player.\\n     *\\n     * Requirements:\\n     *\\n     * - `player` must be in the game with `gameId`.\\n     */\\n    function enforceIsPlayingGame(uint256 gameId, address player) internal view {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        require(gameId == tbg.playerInGame[player], \\\"is not in the game\\\");\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID has started. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game has started.\\n     */\\n    function hasStarted(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.hasStarted;\\n    }\\n\\n    /**\\n     * @dev Gets the leaderboard of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - An array of the addresses of the players in the game with `gameId`, sorted by score.\\n     */\\n    function getLeaderBoard(uint256 gameId) internal view returns (address[] memory) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.leaderboard;\\n    }\\n\\n    /**\\n     * @dev Advances to the next turn in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - The game with `gameId` must be able to end the current turn early. (all players have moved or the turn has timed out)\\n     *\\n     * Modifies:\\n     *\\n     * - Clears the current moves in the game with `gameId`.\\n     * - Increments the currentTurn of the game with `gameId`.\\n     * - Sets the turnStartedAt of the game with `gameId` to the current block timestamp.\\n     * - If the current turn is the last turn or the game with `gameId` is in overtime, checks if the game is a tie and sets the isOvertime of the game with `gameId` to the result.\\n     * - Sets the hasEnded of the game with `gameId` to whether the game is over.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the current turn is the last turn.\\n     * - A boolean indicating whether the game is a tie.\\n     * - A boolean indicating whether the game is over.\\n     */\\n    function nextTurn(uint256 gameId) internal returns (bool, bool, bool) {\\n        require(canEndTurnEarly(gameId), \\\"nextTurn->CanEndEarly\\\");\\n        GameInstance storage _game = _getGame(gameId);\\n        _clearCurrentMoves(_game);\\n        _game.currentTurn += 1;\\n        _game.turnStartedAt = block.timestamp;\\n        bool _isLastTurn = isLastTurn(gameId);\\n        if (_isLastTurn || _game.isOvertime) {\\n            bool _isTie = isTie(gameId);\\n            _game.isOvertime = _isTie;\\n        }\\n        _game.hasEnded = isGameOver(gameId);\\n\\n        (_game.leaderboard, ) = sortByScore(gameId);\\n        return (_isLastTurn, _game.isOvertime, _game.hasEnded);\\n    }\\n\\n    /**\\n     * @dev Gets the data storage pointer.\\n     *\\n     * Returns:\\n     *\\n     * - The data storage pointer.\\n     */\\n    function getDataStorage() internal pure returns (bytes32 pointer) {\\n        return IMPLEMENTATION_STORAGE_POSITION;\\n    }\\n\\n    /**\\n     * @dev Gets the game data storage pointer of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - The game data storage pointer of the game with `gameId`.\\n     */\\n    function getGameDataStorage(uint256 gameId) internal view returns (bytes32 pointer) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.implemenationStoragePointer;\\n    }\\n\\n    /**\\n     * @dev Gets the number of players in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - The number of players in the game with `gameId`.\\n     */\\n    function getPlayersNumber(uint256 gameId) internal view returns (uint256) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.players.length();\\n    }\\n\\n    /**\\n     * @dev Gets the players in a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - An array of the addresses of the players in the game with `gameId`.\\n     */\\n    function getPlayers(uint256 gameId) internal view returns (address[] memory) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.players.values();\\n    }\\n\\n    /**\\n     * @dev Gets the game settings.\\n     *\\n     * Returns:\\n     *\\n     * - The game settings.\\n     */\\n    function getGameSettings() internal view returns (GameSettings memory) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        return tbg.settings;\\n    }\\n\\n    /**\\n     * @dev Enforces that a game with the provided game ID is in the pre-registration stage. `gameId` is the ID of the game.\\n     *\\n     * Requirements:\\n     *\\n     * - Registration must not be open for the game with `gameId`.\\n     * - The game with `gameId` must not have started.\\n     */\\n    function enforceIsPreRegistrationStage(uint256 gameId) internal view {\\n        require(!isRegistrationOpen(gameId), \\\"Cannot do when registration is open\\\");\\n        require(!hasStarted(gameId), \\\"Cannot do when game started\\\");\\n    }\\n\\n    /**\\n     * @dev Adds overtime to a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the isOvertime of the game with `gameId` to true.\\n     */\\n    function addOvertime(uint256 gameId) internal {\\n        GameInstance storage _game = _getGame(gameId);\\n        _game.isOvertime = true;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID is in overtime. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game is in overtime.\\n     */\\n    function isOvertime(uint256 gameId) internal view returns (bool) {\\n        GameInstance storage _game = _getGame(gameId);\\n        return _game.isOvertime;\\n    }\\n\\n    /**\\n     * @dev Resets the overtime of a game with the provided game ID. `gameId` is the ID of the game.\\n     *\\n     * Modifies:\\n     *\\n     * - Sets the isOvertime of the game with `gameId` to false.\\n     */\\n    function resetOvertime(uint256 gameId) internal {\\n        GameInstance storage _game = _getGame(gameId);\\n        _game.isOvertime = false;\\n    }\\n\\n    /**\\n     * @dev Checks if a game with the provided game ID is a tie. `gameId` is the ID of the game.\\n     * Tie being defined as at least two of the top `numWinners` players having the same score.\\n     *\\n     * Returns:\\n     *\\n     * - A boolean indicating whether the game is a tie.\\n     */\\n    function isTie(uint256 gameId) internal view returns (bool) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n        (address[] memory players, uint256[] memory scores) = getScores(gameId);\\n\\n        LibArray.quickSort(scores, int256(0), int256(scores.length - 1));\\n        for (uint256 i = 0; i < players.length - 1; ++i) {\\n            if ((i <= tbg.settings.numWinners - 1)) {\\n                if (scores[i] == scores[i + 1]) {\\n                    return (true);\\n                }\\n            } else {\\n                break;\\n            }\\n        }\\n        return (false);\\n    }\\n\\n    /**\\n     * @dev Gets the game ID of the game a player is in. `player` is the address of the player.\\n     *\\n     * Returns:\\n     *\\n     * - The game ID of the game `player` is in.\\n     */\\n    function getPlayersGame(address player) internal view returns (uint256) {\\n        TBGStorageStruct storage tbg = TBGStorage();\\n\\n        return tbg.playerInGame[player];\\n    }\\n\\n    /**\\n     * @dev Sorts the players and scores arrays in descending order of scores using the quicksort algorithm. `players` is the array of player addresses. `scores` is the array of scores. `left` is the left index. `right` is the right index.\\n     *\\n     * Modifies:\\n     *\\n     * - Sorts the `players` and `scores` arrays in place.\\n     */\\n    function _quickSort(address[] memory players, uint256[] memory scores, int256 left, int256 right) private view {\\n        int256 i = left;\\n        int256 j = right;\\n        if (i == j) return;\\n        uint256 pivot = scores[uint256(left + (right - left) / 2)];\\n        while (i <= j) {\\n            while (scores[uint256(i)] > pivot) ++i;\\n            while (pivot > scores[uint256(j)]) j--;\\n            if (i <= j) {\\n                (scores[uint256(i)], scores[uint256(j)]) = (scores[uint256(j)], scores[uint256(i)]);\\n                (players[uint256(i)], players[uint256(j)]) = (players[uint256(j)], players[uint256(i)]);\\n                ++i;\\n                j--;\\n            }\\n        }\\n        if (left < j) _quickSort(players, scores, left, j);\\n        if (i < right) _quickSort(players, scores, i, right);\\n    }\\n\\n    /**\\n     * @dev Sorts the players in a game with the provided game ID by score in descending order. `gameId` is the ID of the game.\\n     *\\n     * Returns:\\n     *\\n     * - An array of the addresses of the players in the game with `gameId`, sorted by score.\\n     * - An array of the scores of the players in the game with `gameId`, sorted in descending order.\\n     */\\n    function sortByScore(uint256 gameId) internal view returns (address[] memory, uint256[] memory) {\\n        (address[] memory players, uint256[] memory scores) = getScores(gameId);\\n        _quickSort(players, scores, 0, int256(scores.length - 1));\\n        return (players, scores);\\n    }\\n}\\n\",\"keccak256\":\"0x8ec778a835477c1f54f9bf59068a271af885ee1a59106e1e511660a111eb63f5\",\"license\":\"MIT\"},\"src/tokens/DistributableGovernanceERC20.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-or-later\\n\\npragma solidity 0.8.20;\\n\\n// import \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20PermitUpgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/token/ERC20/ERC20Upgradeable.sol\\\";\\n// import {IERC20MetadataUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20MetadataUpgradeable.sol\\\"\\nimport {IERC20Metadata} from \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport {ERC20VotesUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/token/ERC20/extensions/ERC20VotesUpgradeable.sol\\\";\\nimport {Initializable} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\nimport {ERC165Upgradeable} from \\\"@openzeppelin/contracts-upgradeable/utils/introspection/ERC165Upgradeable.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/governance/utils/VotesUpgradeable.sol\\\";\\nimport {DaoAuthorizableUpgradeable} from \\\"@aragon/osx/core/plugin/dao-authorizable/DaoAuthorizableUpgradeable.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/abstracts/ERC7746Middleware.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/libraries/LibMiddleware.sol\\\";\\nimport {IDAO} from \\\"@aragon/osx/core/dao/IDAO.sol\\\";\\nimport \\\"@openzeppelin/contracts-upgradeable/utils/ReentrancyGuardUpgradeable.sol\\\";\\n// import {IERC20MintableUpgradeable} from \\\"@aragon/osx/token/ERC20/IERC20MintableUpgradeable.sol\\\";\\n\\n/// @notice The settings for the initial mint of the token.\\n/// @param receivers The receivers of the tokens.\\n/// @param amounts The amounts of tokens to be minted for each receiver.\\n/// @dev The lengths of `receivers` and `amounts` must match.\\nstruct MintSettings {\\n    address[] receivers;\\n    uint256[] amounts;\\n}\\n\\n/// @title IERC20MintableUpgradeable\\n/// @notice Interface to allow minting of [ERC-20](https://eips.ethereum.org/EIPS/eip-20) tokens.\\ninterface IERC20MintableUpgradeable {\\n    /// @notice Mints [ERC-20](https://eips.ethereum.org/EIPS/eip-20) tokens for a receiving address.\\n    /// @param _to The receiving address.\\n    /// @param _amount The amount of tokens.\\n    function mint(address _to, uint256 _amount) external;\\n}\\n\\n/// @title GovernanceERC20\\n/// @author Aragon Association\\n/// @notice An [OpenZeppelin `Votes`](https://docs.openzeppelin.com/contracts/4.x/api/governance#Votes) compatible [ERC-20](https://eips.ethereum.org/EIPS/eip-20) token that can be used for voting and is managed by a DAO.\\ncontract DistributableGovernanceERC20 is\\n    IERC20MintableUpgradeable,\\n    Initializable,\\n    ERC165Upgradeable,\\n    ERC20VotesUpgradeable,\\n    DaoAuthorizableUpgradeable,\\n    ERC7746Middleware,\\n    ReentrancyGuardUpgradeable\\n{\\n    /// @notice Thrown if the number of receivers and amounts specified in the mint settings do not match.\\n    /// @param receiversArrayLength The length of the `receivers` array.\\n    /// @param amountsArrayLength The length of the `amounts` array.\\n    error MintSettingsArrayLengthMismatch(uint256 receiversArrayLength, uint256 amountsArrayLength);\\n\\n    /// @notice Calls the initialize function.\\n    /// @param _dao The managing DAO.\\n    /// @param _name The name of the [ERC-20](https://eips.ethereum.org/EIPS/eip-20) governance token.\\n    /// @param _symbol The symbol of the [ERC-20](https://eips.ethereum.org/EIPS/eip-20) governance token.\\n    /// @param _mintSettings The token mint settings struct containing the `receivers` and `amounts`.\\n    constructor(\\n        IDAO _dao,\\n        string memory _name,\\n        string memory _symbol,\\n        MintSettings memory _mintSettings,\\n        address _accessManager\\n    ) {\\n        initialize(_dao, _name, _symbol, _mintSettings, _accessManager);\\n    }\\n\\n    /// @notice Initializes the contract and mints tokens to a list of receivers.\\n    /// @param _dao The managing DAO.\\n    /// @param _name The name of the [ERC-20](https://eips.ethereum.org/EIPS/eip-20) governance token.\\n    /// @param _symbol The symbol of the [ERC-20](https://eips.ethereum.org/EIPS/eip-20) governance token.\\n    /// @param _mintSettings The token mint settings struct containing the `receivers` and `amounts`.\\n    function initialize(\\n        IDAO _dao,\\n        string memory _name,\\n        string memory _symbol,\\n        MintSettings memory _mintSettings,\\n        address accessManager\\n    ) public initializer {\\n        LibMiddleware.LayerStruct[] memory layers = new LibMiddleware.LayerStruct[](1);\\n\\n        // Set the layer for the sender\\n        layers[0] = LibMiddleware.LayerStruct({layerAddess: accessManager, layerConfigData: \\\"\\\"});\\n        LibMiddleware.setLayers(layers);\\n\\n        // Check mint settings\\n        if (_mintSettings.receivers.length != _mintSettings.amounts.length) {\\n            revert MintSettingsArrayLengthMismatch({\\n                receiversArrayLength: _mintSettings.receivers.length,\\n                amountsArrayLength: _mintSettings.amounts.length\\n            });\\n        }\\n\\n        __ERC20_init(_name, _symbol);\\n        __DaoAuthorizableUpgradeable_init(_dao);\\n\\n        for (uint256 i; i < _mintSettings.receivers.length; ++i) {\\n            _mint(_mintSettings.receivers[i], _mintSettings.amounts[i]);\\n        }\\n    }\\n\\n    /// @notice Checks if this or the parent contract supports an interface by its ID.\\n    /// @param interfaceId The ID of the interface.\\n    /// @return Returns `true` if the interface is supported.\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(ERC20Upgradeable).interfaceId ||\\n            // interfaceId == type(ERC20PermitUpgradeable).interfaceId ||\\n            interfaceId == type(IERC20Metadata).interfaceId ||\\n            interfaceId == type(VotesUpgradeable).interfaceId ||\\n            interfaceId == type(IERC20MintableUpgradeable).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /// @notice Mints tokens to an address.\\n    /// @param to The address receiving the tokens.\\n    /// @param amount The amount of tokens to be minted.\\n    function mint(\\n        address to,\\n        uint256 amount\\n    ) external override nonReentrant ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        _mint(to, amount);\\n    }\\n\\n    // https://forum.openzeppelin.com/t/self-delegation-in-erc20votes/17501/12?u=novaknole\\n    /// @inheritdoc ERC20VotesUpgradeable\\n    function _update(address from, address to, uint256 amount) internal override {\\n        super._update(from, to, amount);\\n\\n        // Automatically turn on delegation on mint/transfer but only for the first time.\\n        if (to != address(0) && numCheckpoints(to) == 0 && delegates(to) == address(0)) {\\n            _delegate(to, to);\\n        }\\n    }\\n\\n    // event RankExchanged(address indexed account, uint256 rankTokenId, uint256 amount);\\n    // function exchangeRankToGov(IERC1155 rankTokenAddress, uint256 rankTokenId, uint256 amount) external nonReentrant ERC7746C {\\n    //     require(rankTokens.contains(address(rankTokenAddress)), \\\"Rank token not supported\\\");\\n    //     rankTokenAddress.safeTransferFrom(msg.sender, address(this), rankTokenId, amount, \\\"\\\");\\n    //     uint256 principal = minimumParticipantCount ** rankTokenId;\\n    //     _mint(msg.sender, principal * amount);\\n    //     emit RankExchanged(msg.sender, rankTokenId, amount);\\n    // }\\n}\\n\",\"keccak256\":\"0x5b7a6583faa462160cd3dce8ace809c1d7094be838982d86827d19efd132ccec\",\"license\":\"AGPL-3.0-or-later\"},\"src/tokens/RankToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {IRankToken} from \\\"../interfaces/IRankToken.sol\\\";\\nimport \\\"../abstracts/LockableERC1155.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/abstracts/ERC7746Middleware.sol\\\";\\nimport \\\"@peeramid-labs/eds/src/libraries/LibMiddleware.sol\\\";\\nimport {IERC1155} from \\\"@openzeppelin/contracts/interfaces/IERC1155.sol\\\";\\n\\n//ToDo: it was planned to make it track for highest token users hold (their rank), right now it's not implemented. Yet.\\n\\n/**\\n * @title RankToken\\n * @author Peersky\\n * @notice RankToken is a composite ERC1155 token that is used to track user ranks\\n */\\ncontract RankToken is LockableERC1155, IRankToken, ERC7746Middleware {\\n    struct Storage {\\n        string _contractURI;\\n    }\\n\\n    bytes32 constant RANK_TOKEN_STORAGE_POSITION = keccak256(\\\"rank.token.storage.position\\\");\\n\\n    function getStorage() private pure returns (Storage storage s) {\\n        bytes32 position = LOCKABLE_TOKEN_STORAGE_POSITION;\\n        assembly {\\n            s.slot := position\\n        }\\n    }\\n\\n    constructor(string memory uri_, string memory cURI, address accessLayer) {\\n        initialize(uri_, cURI, accessLayer);\\n    }\\n\\n    function initialize(string memory uri_, string memory cURI, address accessLayer) public initializer {\\n        // __Ownable_init(owner_);\\n        _setURI(uri_);\\n        getStorage()._contractURI = cURI;\\n        LibMiddleware.LayerStruct[] memory layers = new LibMiddleware.LayerStruct[](1);\\n\\n        // Set the layer for the sender\\n        layers[0] = LibMiddleware.LayerStruct({layerAddess: accessLayer, layerConfigData: \\\"\\\"});\\n        LibMiddleware.setLayers(layers);\\n    }\\n\\n    // function getRankingInstance() public view returns (address) {\\n    //     return getStorage().rankingInstance;\\n    // }\\n\\n    function contractURI() public view returns (string memory) {\\n        return getStorage()._contractURI;\\n    }\\n\\n    function setURI(string memory uri_) public ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        _setURI(uri_);\\n    }\\n\\n    function setContractURI(string memory uri_) public ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        getStorage()._contractURI = uri_;\\n    }\\n\\n    function _mintRank(address to, uint256 amount, uint256 level, bytes memory data) private {\\n        require(to != address(0), \\\"RankToken->mint: Address not specified\\\");\\n        require(amount != 0, \\\"RankToken->mint: amount not specified\\\");\\n        require(level != 0, \\\"RankToken->mint: pool id not specified\\\");\\n        // if (level > topRank) {\\n        //     topRank = level;\\n        //     emit Leader(to, level);\\n        // }\\n        _mint(to, level, amount, data);\\n    }\\n\\n    function mint(\\n        address to,\\n        uint256 amount,\\n        uint256 level,\\n        bytes memory data\\n    ) public ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        _mintRank(to, amount, level, data);\\n    }\\n\\n    // function updateRankingInstance(address newRankingInstance) public onlyOwner {\\n    //     require(newRankingInstance != address(0), \\\"must specify ranking instance\\\");\\n    //     getStorage()._rankingInstance = newRankingInstance;\\n    //     emit RankingInstanceUpdated(newRankingInstance);\\n    // }\\n\\n    function lock(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public override(LockableERC1155, ILockableERC1155) ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        super.lock(account, id, amount);\\n    }\\n\\n    function unlock(\\n        address account,\\n        uint256 id,\\n        uint256 amount\\n    ) public override(LockableERC1155, ILockableERC1155) ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        super.unlock(account, id, amount);\\n    }\\n\\n    function batchMint(\\n        address to,\\n        uint256[] memory ids,\\n        uint256[] memory amounts,\\n        bytes memory data\\n    ) public ERC7746C(msg.sig, msg.sender, msg.data, 0) {\\n        require(to != address(0), \\\"RankToken->mint: Address not specified\\\");\\n        require(amounts.length != 0, \\\"RankToken->mint: amount not specified\\\");\\n        require(ids.length != 0, \\\"RankToken->mint: pool id not specified\\\");\\n        _mintBatch(to, ids, amounts, data);\\n    }\\n\\n    function _update(address from, address to, uint256[] memory ids, uint256[] memory values) internal override {\\n        super._update(from, to, ids, values);\\n    }\\n\\n    function supportsInterface(\\n        bytes4 interfaceId\\n    ) public view virtual override(IERC165, ERC1155Upgradeable) returns (bool) {\\n        return interfaceId == type(IRankToken).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x314307bede54613a63032d9d41aa2e808ece4e5f6e1f7446ad06f2c7a42f849a\",\"license\":\"MIT\"},\"src/vendor/aragon/interfaces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// This is a copy of interfaces and structs from @aragon/osx package\\n// This had to be done to accomodate difference in solidity version requirements\\n\\nstruct TokenSettings {\\n    address addr;\\n    string name;\\n    string symbol;\\n}\\n\\nstruct Tag {\\n    uint8 release;\\n    uint16 build;\\n}\\n\\nenum VotingMode {\\n    Standard,\\n    EarlyExecution,\\n    VoteReplacement\\n}\\n\\nstruct VotingSettings {\\n    VotingMode votingMode;\\n    uint32 supportThreshold;\\n    uint32 minParticipation;\\n    uint64 minDuration;\\n    uint256 minProposerVotingPower;\\n}\\n\\nstruct Version {\\n    Tag tag;\\n    address pluginSetup;\\n    bytes buildMetadata;\\n}\\n\\ninterface IPluginRepo {\\n    /// @notice Updates the metadata for release with content `@fromHex(_releaseMetadata)`.\\n    /// @param _release The release number.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function updateReleaseMetadata(uint8 _release, bytes calldata _releaseMetadata) external;\\n\\n    /// @notice Creates a new plugin version as the latest build for an existing release number or the first build for a new release number for the provided `PluginSetup` contract address and metadata.\\n    /// @param _release The release number.\\n    /// @param _pluginSetupAddress The address of the plugin setup contract.\\n    /// @param _buildMetadata The build metadata URI.\\n    /// @param _releaseMetadata The release metadata URI.\\n    function createVersion(\\n        uint8 _release,\\n        address _pluginSetupAddress,\\n        bytes calldata _buildMetadata,\\n        bytes calldata _releaseMetadata\\n    ) external;\\n\\n    function latestRelease() external view returns (uint8);\\n\\n    function getLatestVersion(uint8 _release) external view returns (Version memory);\\n}\\n\\ninterface IDAOFactory {\\n    struct PluginSetupRef {\\n        Tag versionTag;\\n        IPluginRepo pluginSetupRepo;\\n    }\\n\\n    /// @notice The container for the DAO settings to be set during the DAO initialization.\\n    /// @param trustedForwarder The address of the trusted forwarder required for meta transactions.\\n    /// @param daoURI The DAO uri used with [EIP-4824](https://eips.ethereum.org/EIPS/eip-4824).\\n    /// @param subdomain The ENS subdomain to be registered for the DAO contract.\\n    /// @param metadata The metadata of the DAO.\\n    struct DAOSettings {\\n        address trustedForwarder;\\n        string daoURI;\\n        string subdomain;\\n        bytes metadata;\\n    }\\n\\n    /// @notice The container with the information required to install a plugin on the DAO.\\n    /// @param pluginSetupRef The `PluginSetupRepo` address of the plugin and the version tag.\\n    /// @param data The bytes-encoded data containing the input parameters for the installation as specified in the plugin's build metadata JSON file.\\n    struct PluginSettings {\\n        PluginSetupRef pluginSetupRef;\\n        bytes data;\\n    }\\n\\n    function createDao(\\n        DAOSettings memory daoSettings,\\n        PluginSettings[] memory pluginSettings\\n    ) external returns (address);\\n}\\n\",\"keccak256\":\"0x8ed5ff56e65476df5497727de469665906e8fab47561e4be4d8473974a704d68\",\"license\":\"MIT\"},\"src/vendor/diamond/interfaces/IDiamondCut.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/******************************************************************************\\\\\\n*  Adapted from\\n*  Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\ninterface IDiamondCut {\\n    enum FacetCutAction {\\n        Add,\\n        Replace,\\n        Remove\\n    }\\n    // Add=0, Replace=1, Remove=2\\n\\n    struct FacetCut {\\n        address facetAddress;\\n        FacetCutAction action;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Add/replace/remove any number of functions and optionally execute\\n    ///         a function with delegatecall\\n    /// @param _diamondCut Contains the facet addresses and function selectors\\n    /// @param _init The address of the contract or facet to execute _calldata\\n    /// @param _calldata A function call, including function selector and arguments\\n    ///                  _calldata is executed with delegatecall on _init\\n    function diamondCut(FacetCut[] calldata _diamondCut, address _init, bytes calldata _calldata) external;\\n}\\n\",\"keccak256\":\"0x238f7bcdbbedfac48b94cbc9d4a15e16fb5c9c09fb41a8c72e2a7ff48c81f24b\",\"license\":\"MIT\"},\"src/vendor/diamond/interfaces/IDiamondLoupe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/******************************************************************************\\\\\\n* Author: Nick Mudge <nick@perfectabstractions.com> (https://twitter.com/mudgen)\\n* EIP-2535 Diamond Standard: https://eips.ethereum.org/EIPS/eip-2535\\n/******************************************************************************/\\n\\n// A loupe is a small magnifying glass used to look at diamonds.\\n// These functions look at diamonds\\ninterface IDiamondLoupe {\\n    /// These functions are expected to be called frequently\\n    /// by tools.\\n\\n    struct Facet {\\n        address facetAddress;\\n        bytes4[] functionSelectors;\\n    }\\n\\n    /// @notice Gets all facet addresses and their four byte function selectors.\\n    /// @return facets_ Facet\\n    function facets() external view returns (Facet[] memory facets_);\\n\\n    /// @notice Gets all the function selectors supported by a specific facet.\\n    /// @param _facet The facet address.\\n    /// @return facetFunctionSelectors_\\n    function facetFunctionSelectors(address _facet) external view returns (bytes4[] memory facetFunctionSelectors_);\\n\\n    /// @notice Get all the facet addresses used by a diamond.\\n    /// @return facetAddresses_\\n    function facetAddresses() external view returns (address[] memory facetAddresses_);\\n\\n    /// @notice Gets the facet that supports the given selector.\\n    /// @dev If facet is not found return address(0).\\n    /// @param _functionSelector The function selector.\\n    /// @return facetAddress_ The facet address.\\n    function facetAddress(bytes4 _functionSelector) external view returns (address facetAddress_);\\n}\\n\",\"keccak256\":\"0x5ce5cb670c85bea71036f7ce3513c9cf3df88d7f6fcfe8fbe74f8290be36a3cc\",\"license\":\"MIT\"},\"src/vendor/diamond/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\ninterface IERC165 {\\n    /// @notice Query if a contract implements an interface\\n    /// @param interfaceId The interface identifier, as specified in ERC-165\\n    /// @dev Interface identification is specified in ERC-165. This function\\n    ///  uses less than 30,000 gas.\\n    /// @return `true` if the contract implements `interfaceID` and\\n    ///  `interfaceID` is not 0xffffffff, `false` otherwise\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x0162f02752820fae5095e759db636e567ce9a128dd470e5b675a230a91f449c9\",\"license\":\"MIT\"},\"src/vendor/diamond/interfaces/IERC173.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\n/// @title ERC-173 Contract Ownership Standard\\n///  Note: the ERC-165 identifier for this interface is 0x7f5828d0\\n/* is ERC165 */\\ninterface IERC173 {\\n    /// @dev This emits when ownership of a contract changes.\\n    // Removed deue to duplicate abi generation in 8.20 compiler\\n    // event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /// @notice Get the address of the owner\\n    /// @return owner_ The address of the owner.\\n    function owner() external view returns (address owner_);\\n\\n    /// @notice Set the address of the new owner of the contract\\n    /// @dev Set _newOwner to address(0) to renounce any ownership.\\n    /// @param _newOwner The address of the new owner of the contract\\n    function transferOwnership(address _newOwner) external;\\n}\\n\",\"keccak256\":\"0x8fd517ec0fdb014cb7d32a0b46894899e7e1113dba0e62d1b85c492a3c70a2c0\",\"license\":\"MIT\"},\"src/vendor/diamond/libraries/LibDiamond.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n// Adapted from the Diamond 3 reference implementation by Nick Mudge:\\n// https://github.com/mudgen/diamond-3-hardhat\\n\\nimport {IDiamondCut} from \\\"../interfaces/IDiamondCut.sol\\\";\\n\\nlibrary LibDiamond {\\n    bytes32 constant DIAMOND_STORAGE_POSITION = keccak256(\\\"diamond.standard.diamond.storage\\\");\\n\\n    struct FacetAddressAndPosition {\\n        address facetAddress;\\n        uint96 functionSelectorPosition; // position in facetFunctionSelectors.functionSelectors array\\n    }\\n\\n    struct FacetFunctionSelectors {\\n        bytes4[] functionSelectors;\\n        uint256 facetAddressPosition; // position of facetAddress in facetAddresses array\\n    }\\n\\n    struct DiamondStorage {\\n        // maps function selector to the facet address and\\n        // the position of the selector in the facetFunctionSelectors.selectors array\\n        mapping(bytes4 => FacetAddressAndPosition) selectorToFacetAndPosition;\\n        // maps facet addresses to function selectors\\n        mapping(address => FacetFunctionSelectors) facetFunctionSelectors;\\n        // facet addresses\\n        address[] facetAddresses;\\n        // Used to query if a contract implements an interface.\\n        // Used to implement ERC-165.\\n        mapping(bytes4 => bool) supportedInterfaces;\\n        // owner of the contract\\n        address contractOwner;\\n    }\\n\\n    function diamondStorage() internal pure returns (DiamondStorage storage ds) {\\n        bytes32 position = DIAMOND_STORAGE_POSITION;\\n        assembly {\\n            ds.slot := position\\n        }\\n    }\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function setContractOwner(address _newOwner) internal {\\n        DiamondStorage storage ds = diamondStorage();\\n        address previousOwner = ds.contractOwner;\\n        ds.contractOwner = _newOwner;\\n        emit OwnershipTransferred(previousOwner, _newOwner);\\n    }\\n\\n    function contractOwner() internal view returns (address contractOwner_) {\\n        contractOwner_ = diamondStorage().contractOwner;\\n    }\\n\\n    function enforceIsContractOwner() internal view {\\n        require(msg.sender == diamondStorage().contractOwner, \\\"LibDiamond: Must be contract owner\\\");\\n    }\\n\\n    event DiamondCut(IDiamondCut.FacetCut[] _diamondCut, address _init, bytes _calldata);\\n\\n    // Internal function version of diamondCut\\n    function diamondCut(IDiamondCut.FacetCut[] memory _diamondCut, address _init, bytes memory _calldata) internal {\\n        for (uint256 facetIndex; facetIndex < _diamondCut.length; facetIndex++) {\\n            IDiamondCut.FacetCutAction action = _diamondCut[facetIndex].action;\\n            if (action == IDiamondCut.FacetCutAction.Add) {\\n                addFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Replace) {\\n                replaceFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else if (action == IDiamondCut.FacetCutAction.Remove) {\\n                removeFunctions(_diamondCut[facetIndex].facetAddress, _diamondCut[facetIndex].functionSelectors);\\n            } else {\\n                revert(\\\"LibDiamondCut: Incorrect FacetCutAction\\\");\\n            }\\n        }\\n        emit DiamondCut(_diamondCut, _init, _calldata);\\n        initializeDiamondCut(_init, _calldata);\\n    }\\n\\n    function addFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress == address(0), \\\"LibDiamondCut: Can't add function that already exists\\\");\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function replaceFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Add facet can't be address(0)\\\");\\n        uint96 selectorPosition = uint96(ds.facetFunctionSelectors[_facetAddress].functionSelectors.length);\\n        // add new facet address if it does not exist\\n        if (selectorPosition == 0) {\\n            addFacet(ds, _facetAddress);\\n        }\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            require(oldFacetAddress != _facetAddress, \\\"LibDiamondCut: Can't replace function with same function\\\");\\n            removeFunction(ds, oldFacetAddress, selector);\\n            addFunction(ds, selector, selectorPosition, _facetAddress);\\n            selectorPosition++;\\n        }\\n    }\\n\\n    function removeFunctions(address _facetAddress, bytes4[] memory _functionSelectors) internal {\\n        require(_functionSelectors.length > 0, \\\"LibDiamondCut: No selectors in facet to cut\\\");\\n        DiamondStorage storage ds = diamondStorage();\\n        // if function does not exist then do nothing and return\\n        require(_facetAddress == address(0), \\\"LibDiamondCut: Remove facet address must be address(0)\\\");\\n        for (uint256 selectorIndex; selectorIndex < _functionSelectors.length; selectorIndex++) {\\n            bytes4 selector = _functionSelectors[selectorIndex];\\n            address oldFacetAddress = ds.selectorToFacetAndPosition[selector].facetAddress;\\n            removeFunction(ds, oldFacetAddress, selector);\\n        }\\n    }\\n\\n    function addFacet(DiamondStorage storage ds, address _facetAddress) internal {\\n        enforceHasContractCode(_facetAddress, \\\"LibDiamondCut: New facet has no code\\\");\\n        ds.facetFunctionSelectors[_facetAddress].facetAddressPosition = ds.facetAddresses.length;\\n        ds.facetAddresses.push(_facetAddress);\\n    }\\n\\n    function addFunction(\\n        DiamondStorage storage ds,\\n        bytes4 _selector,\\n        uint96 _selectorPosition,\\n        address _facetAddress\\n    ) internal {\\n        ds.selectorToFacetAndPosition[_selector].functionSelectorPosition = _selectorPosition;\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.push(_selector);\\n        ds.selectorToFacetAndPosition[_selector].facetAddress = _facetAddress;\\n    }\\n\\n    function removeFunction(DiamondStorage storage ds, address _facetAddress, bytes4 _selector) internal {\\n        require(_facetAddress != address(0), \\\"LibDiamondCut: Can't remove function that doesn't exist\\\");\\n        // an immutable function is a function defined directly in a diamond\\n        require(_facetAddress != address(this), \\\"LibDiamondCut: Can't remove immutable function\\\");\\n        // replace selector with last selector, then delete last selector\\n        uint256 selectorPosition = ds.selectorToFacetAndPosition[_selector].functionSelectorPosition;\\n        uint256 lastSelectorPosition = ds.facetFunctionSelectors[_facetAddress].functionSelectors.length - 1;\\n        // if not the same then replace _selector with lastSelector\\n        if (selectorPosition != lastSelectorPosition) {\\n            bytes4 lastSelector = ds.facetFunctionSelectors[_facetAddress].functionSelectors[lastSelectorPosition];\\n            ds.facetFunctionSelectors[_facetAddress].functionSelectors[selectorPosition] = lastSelector;\\n            ds.selectorToFacetAndPosition[lastSelector].functionSelectorPosition = uint96(selectorPosition);\\n        }\\n        // delete the last selector\\n        ds.facetFunctionSelectors[_facetAddress].functionSelectors.pop();\\n        delete ds.selectorToFacetAndPosition[_selector];\\n\\n        // if no more selectors for facet address then delete the facet address\\n        if (lastSelectorPosition == 0) {\\n            // replace facet address with last facet address and delete last facet address\\n            uint256 lastFacetAddressPosition = ds.facetAddresses.length - 1;\\n            uint256 facetAddressPosition = ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n            if (facetAddressPosition != lastFacetAddressPosition) {\\n                address lastFacetAddress = ds.facetAddresses[lastFacetAddressPosition];\\n                ds.facetAddresses[facetAddressPosition] = lastFacetAddress;\\n                ds.facetFunctionSelectors[lastFacetAddress].facetAddressPosition = facetAddressPosition;\\n            }\\n            ds.facetAddresses.pop();\\n            delete ds.facetFunctionSelectors[_facetAddress].facetAddressPosition;\\n        }\\n    }\\n\\n    function initializeDiamondCut(address _init, bytes memory _calldata) internal {\\n        if (_init == address(0)) {\\n            require(_calldata.length == 0, \\\"LibDiamondCut: _init is address(0) but_calldata is not empty\\\");\\n        } else {\\n            // this is removed in order to work with ethereum distribution system\\n            // require(_calldata.length > 0, \\\"LibDiamondCut: _calldata is empty but _init is not address(0)\\\");\\n            if (_init != address(this)) {\\n                enforceHasContractCode(_init, \\\"LibDiamondCut: _init address has no code\\\");\\n            }\\n            (bool success, bytes memory error) = _init.delegatecall(_calldata);\\n            if (!success) {\\n                if (error.length > 0) {\\n                    // bubble up the error\\n                    revert(string(error));\\n                } else {\\n                    revert(\\\"LibDiamondCut: _init function reverted\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function enforceHasContractCode(address _contract, string memory _errorMessage) internal view {\\n        uint256 contractSize;\\n        assembly {\\n            contractSize := extcodesize(_contract)\\n        }\\n        require(contractSize > 0, _errorMessage);\\n    }\\n}\\n\",\"keccak256\":\"0xd9a8bbcd696d08fecdfe299f90684c459226c8b06698de84010c5f08093cba1d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101a06040523480156200001257600080fd5b50604051620032d8380380620032d883398101604081905262000035916200053e565b60405163023aa9ab60e61b81526004810184905273c0d31d398c5ee86c5f8a23fa253ee8a586da03ce90638eaa6ac090602401602060405180830381865afa15801562000086573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000ac919062000650565b6001600160a01b039081166101605289811660805288811660a052871660c05260e08290526200011381600081604001516001600160801b0316608083602001516001600160401b0316901b60c084600001516001600160401b0316901b17179050919050565b6101005260405163023aa9ab60e61b81526004810187905273c0d31d398c5ee86c5f8a23fa253ee8a586da03ce90638eaa6ac090602401602060405180830381865afa15801562000168573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200018e919062000650565b6001600160a01b0316610120819052620001ef5760405162461bcd60e51b815260206004820152601960248201527f52616e6b20746f6b656e2062617365206e6f7420666f756e640000000000000060448201526064015b60405180910390fd5b60405163023aa9ab60e61b81526004810186905273c0d31d398c5ee86c5f8a23fa253ee8a586da03ce90638eaa6ac090602401602060405180830381865afa15801562000240573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000266919062000650565b6001600160a01b0316610140819052620002c35760405162461bcd60e51b815260206004820181905260248201527f4143494420646973747269627574696f6e2062617365206e6f7420666f756e646044820152606401620001e6565b60405163023aa9ab60e61b81526004810185905273c0d31d398c5ee86c5f8a23fa253ee8a586da03ce90638eaa6ac090602401602060405180830381865afa15801562000314573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200033a919062000650565b6001600160a01b0316610180819052620003975760405162461bcd60e51b815260206004820152601d60248201527f416363657373206d616e616765722062617365206e6f7420666f756e640000006044820152606401620001e6565b61018051620003ae906387a9852f60e01b6200041c565b6200040d5760405162461bcd60e51b815260206004820152602860248201527f416363657373206d616e6167657220646f6573206e6f7420737570706f72742060448201526724a2a9219b9b9a1b60c11b6064820152608401620001e6565b5050505050505050506200066e565b6000620004298362000444565b80156200043d57506200043d83836200047d565b9392505050565b600062000459826301ffc9a760e01b6200047d565b801562000477575062000475826001600160e01b03196200047d565b155b92915050565b6040516001600160e01b031982166024820152600090819060440160408051601f19818403018152919052602080820180516001600160e01b03166301ffc9a760e01b178152825192935060009283928392909183918a617530fa92503d91506000519050828015620004f1575060208210155b8015620004fe5750600081115b979650505050505050565b80516001600160a01b03811681146200052157600080fd5b919050565b80516001600160401b03811681146200052157600080fd5b6000806000806000806000806000898b036101608112156200055f57600080fd5b6200056a8b62000509565b99506200057a60208c0162000509565b98506200058a60408c0162000509565b975060608b0151965060808b0151955060a08b0151945060c08b0151935060e08b01519250606060ff1982011215620005c257600080fd5b50604051606081016001600160401b0381118282101715620005f457634e487b7160e01b600052604160045260246000fd5b604052620006066101008c0162000526565b8152620006176101208c0162000526565b60208201526101408b01516001600160801b03811681146200063857600080fd5b80604083015250809150509295985092959850929598565b6000602082840312156200066357600080fd5b6200043d8262000509565b60805160a05160c05160e0516101005161012051610140516101605161018051612ba662000732600039600081816102da01528181610c390152611565015260008181610286015261074401526000818161023201526116920152600081816101de0152610e5f01526000818161034a015261051501526000818161032701526104f201526000818161018a01526107f50152600081816101360152610a5a01526000818160e20152818161085a01528181610889015261097a0152612ba66000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80636d4ce63c146100515780639ca33c9e14610071578063d7d036ba14610084578063e8a3d48514610099575b600080fd5b6100596100b3565b60405161006893929190611d41565b60405180910390f35b61005961007f366004611e99565b61036f565b61008c61053e565b604051610068919061202f565b604080516020810182526000815290516100689190612111565b6040805160088082526101208201909252606091600091829182919060208201610100803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106101145761011461212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816001815181106101685761016861212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816002815181106101bc576101bc61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816003815181106102105761021061212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816004815181106102645761026461212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816006815181106102b8576102b861212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160078151811061030c5761030c61212b565b6001600160a01b0390921660209283029190910190910152937f000000000000000000000000000000000000000000000000000000000000000093507f000000000000000000000000000000000000000000000000000000000000000092509050565b606060008060008480602001905181019061038a91906122a4565b9050600061039b8260000151610661565b5050905060006103c98360200151836000815181106103bc576103bc61212b565b6020026020010151610e53565b505090506000815183516103dd9190612407565b67ffffffffffffffff8111156103f5576103f5611d97565b60405190808252806020026020018201604052801561041e578160200160208202803683370190505b50905060005b83518110156104815783818151811061043f5761043f61212b565b60200260200101518282815181106104595761045961212b565b6001600160a01b039092166020928302919091019091015261047a8161241a565b9050610424565b5060005b82518110156104ee578281815181106104a0576104a061212b565b6020026020010151828286516104b69190612407565b815181106104c6576104c661212b565b6001600160a01b03909216602092830291909101909101526104e78161241a565b9050610485565b50977f000000000000000000000000000000000000000000000000000000000000000097507f00000000000000000000000000000000000000000000000000000000000000009650945050505050565b610546611c8d565b60405180604001604052806040518060a001604052806040518060200160405280600081525081526020016040518060200160405280600081525081526020016040518060200160405280600081525081526020016040518060200160405280600081525081526020016040518060200160405280600081525081525081526020016040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160405180602001604052806000815250815260200160405180602001604052806000815250815260200160405180602001604052806000815250815250815250905090565b606060008060006040518060400160405280600167ffffffffffffffff81111561068d5761068d611d97565b6040519080825280602002602001820160405280156106b6578160200160208202803683370190505b5081526040805160018082528183019092526020909201919081602001602082028036833750505090528051805191925030916000906106f8576106f861212b565b60200260200101906001600160a01b031690816001600160a01b031681525050600081602001516000815181106107315761073161212b565b60200260200101818152505060006107717f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a08565b60408051606080820183526001600160a01b03841682528901516020820152608089015181830152815160a0810190925291925060009080828152602001620a2c2a63ffffffff16815260200161271063ffffffff1681526020016201518067ffffffffffffffff16815260200160018152509050600060405180608001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018a6000015181526020018a6020015181526020018a6040015181525090506000604051806040016040528060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e0589bd37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637be0ca5e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190612445565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865afa158015610947573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261096f9190810190612460565b6000015181526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681525081526020018486896040516020016109bf9392919061260d565b60408051808303601f1901815291815291528051600180825281830190925291925060009190816020015b610a226040805160c08101825260006080820181815260a0830182905292820192835260608201529081908152602001606081525090565b8152602001906001900390816109ea5790505090508181600081518110610a4b57610a4b61212b565b602002602001018190525060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b556883885846040518363ffffffff1660e01b8152600401610aa6929190612697565b6020604051808303816000875af1158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae991906127b1565b60408051600180825281830190925291925060009190816020015b60408051606080820183526000808352602083019190915291810191909152815260200190600190039081610b045790505090506340c10f1960e01b81600081518110610b5357610b5361212b565b60209081029190910101516001600160e01b0319919091169052604080516001808252818301909252908160200160208202803683370190505081600081518110610ba057610ba061212b565b6020026020010151602001819052508181600081518110610bc357610bc361212b565b602002602001015160200151600081518110610be157610be161212b565b60200260200101906001600160a01b031690816001600160a01b031681525050600181600081518110610c1657610c1661212b565b60209081029190910101519015156040909101526000610c5e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611a08565b88516040517f90c2e4940000000000000000000000000000000000000000000000000000000081529192506001600160a01b038316916390c2e49491610cab9186919033906004016127cc565b600060405180830381600087803b158015610cc557600080fd5b505af1158015610cd9573d6000803e3d6000fd5b5050505087600001516001600160a01b0316636c8864d1848a602001518b604001518e866040518663ffffffff1660e01b8152600401610d1d95949392919061289e565b600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b506000925060039150610d5b9050565b604051908082528060200260200182016040528015610d84578160200160208202803683370190505b5090508381600081518110610d9b57610d9b61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250508981600181518110610dcf57610dcf61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110610e0357610e0361212b565b6001600160a01b0392909216602092830291909101909101529e7f4f5378446973747269627574696f6e00000000000000000000000000000000009e5060019d509b505050505050505050505050565b60606000806000610e8c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a08565b60408051600680825260e08201909252919250600091906020820160c08036833701905050905063731133e960e01b81600081518110610ece57610ece61212b565b6001600160e01b03199092166020928302919091019091015280517fe2ab691d000000000000000000000000000000000000000000000000000000009082906001908110610f1e57610f1e61212b565b6001600160e01b03199092166020928302919091019091015280517fb5674c68000000000000000000000000000000000000000000000000000000009082906002908110610f6e57610f6e61212b565b6001600160e01b03199092166020928302919091019091015280517fb48ab8b6000000000000000000000000000000000000000000000000000000009082906003908110610fbe57610fbe61212b565b6001600160e01b03199092166020928302919091019091015280517f02fe530500000000000000000000000000000000000000000000000000000000908290600490811061100e5761100e61212b565b6001600160e01b03199092166020928302919091019091015280517f938e3d7b00000000000000000000000000000000000000000000000000000000908290600590811061105e5761105e61212b565b6001600160e01b0319929092166020928302919091019091015260408051600680825260e08201909252600091816020015b6040805160608082018352600080835260208301919091529181019190915281526020019060019003908161109057905050905063731133e960e01b816000815181106110df576110df61212b565b60209081029190910101516001600160e01b031991909116905260408051600180825281830190925290816020016020820280368337019050508160008151811061112c5761112c61212b565b602002602001015160200181905250868160008151811061114f5761114f61212b565b60200260200101516020015160008151811061116d5761116d61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250506001816000815181106111a2576111a261212b565b6020026020010151604001901515908115158152505063e2ab691d60e01b816001815181106111d3576111d361212b565b60209081029190910101516001600160e01b03199190911690526040805160018082528183019092529081602001602082028036833701905050816001815181106112205761122061212b565b60200260200101516020018190525086816001815181106112435761124361212b565b6020026020010151602001516000815181106112615761126161212b565b60200260200101906001600160a01b031690816001600160a01b0316815250506001816001815181106112965761129661212b565b6020026020010151604001901515908115158152505063b5674c6860e01b816002815181106112c7576112c761212b565b60209081029190910101516001600160e01b03199190911690526040805160018082528183019092529081602001602082028036833701905050816002815181106113145761131461212b565b60200260200101516020018190525086816002815181106113375761133761212b565b6020026020010151602001516000815181106113555761135561212b565b60200260200101906001600160a01b031690816001600160a01b03168152505060018160028151811061138a5761138a61212b565b6020026020010151604001901515908115158152505063b48ab8b660e01b816003815181106113bb576113bb61212b565b60209081029190910101516001600160e01b03199190911690526040805160018082528183019092529081602001602082028036833701905050816003815181106114085761140861212b565b602002602001015160200181905250868160038151811061142b5761142b61212b565b6020026020010151602001516000815181106114495761144961212b565b60200260200101906001600160a01b031690816001600160a01b03168152505060018160038151811061147e5761147e61212b565b602002602001015160400190151590811515815250506302fe530560e01b816004815181106114af576114af61212b565b60209081029190910101516001600160e01b031990911690528051600190829060049081106114e0576114e061212b565b6020026020010151604001901515908115158152505063938e3d7b60e01b816005815181106115115761151161212b565b60209081029190910101516001600160e01b031990911690528051600190829060059081106115425761154261212b565b6020908102919091010151901515604090910152600061158a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611a08565b6040517f90c2e4940000000000000000000000000000000000000000000000000000000081529091506001600160a01b038216906390c2e494906115d6908590889033906004016127cc565b600060405180830381600087803b1580156115f057600080fd5b505af1158015611604573d6000803e3d6000fd5b505050506101408901516101608a01516040517f077f224a0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169263077f224a926116599286906004016128fd565b600060405180830381600087803b15801561167357600080fd5b505af1158015611687573d6000803e3d6000fd5b5050505060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639ca33c9e8c898f61012001516040516020016116d99392919061293c565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016117049190612111565b6000604051808303816000875af1158015611723573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174b9190810190612968565b92509250925060006040518061016001604052808e6000015181526020018e6020015181526020018e604001518152602001896001600160a01b031681526020018e6060015181526020018e60c0015181526020018e610100015181526020018e608001518152602001600181526020018e60a0015181526020018e60e001516001600160a01b03168152509050836000815181106117ec576117ec61212b565b60200260200101516001600160a01b0316631eea6f898460405160200161181591815260200190565b60408051601f198184030181526060808401835260008085526020858101829052948401528251908101835260c088901c815267ffffffffffffffff608089901c16938101939093526fffffffffffffffffffffffffffffffff8716918301919091529061188290611a93565b846040518463ffffffff1660e01b81526004016118a193929190612a28565b600060405180830381600087803b1580156118bb57600080fd5b505af11580156118cf573d6000803e3d6000fd5b505050506000845160026118e39190612407565b67ffffffffffffffff8111156118fb576118fb611d97565b604051908082528060200260200182016040528015611924578160200160208202803683370190505b50905060005b8551811015611987578581815181106119455761194561212b565b602002602001015182828151811061195f5761195f61212b565b6001600160a01b03909216602092830291909101909101526119808161241a565b905061192a565b50858186518151811061199c5761199c61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250508881865160016119cc9190612407565b815181106119dc576119dc61212b565b6001600160a01b03909216602092830291909101909101529a5091985096505050505050509250925092565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116611a8e576040517fc2f868f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6060611aac826000015167ffffffffffffffff16611b0a565b611ac3836020015167ffffffffffffffff16611b0a565b611ae284604001516fffffffffffffffffffffffffffffffff16611b0a565b604051602001611af493929190612afa565b6040516020818303038152906040529050919050565b60606000611b1783611baa565b600101905060008167ffffffffffffffff811115611b3757611b37611d97565b6040519080825280601f01601f191660200182016040528015611b61576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611b6b57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611bf3577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611c1f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611c3d57662386f26fc10000830492506010015b6305f5e1008310611c55576305f5e100830492506008015b6127108310611c6957612710830492506004015b60648310611c7b576064830492506002015b600a8310611c87576001015b92915050565b6040518060400160405280611cca6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b8152602001611d3c6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001606081525090565b905290565b606080825284519082018190526000906020906080840190828801845b82811015611d835781516001600160a01b031684529284019290840190600101611d5e565b505050908301949094525060400152919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611dd157611dd1611d97565b60405290565b6040805190810167ffffffffffffffff81118282101715611dd157611dd1611d97565b60405160a0810167ffffffffffffffff81118282101715611dd157611dd1611d97565b6040516060810167ffffffffffffffff81118282101715611dd157611dd1611d97565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e6957611e69611d97565b604052919050565b600067ffffffffffffffff821115611e8b57611e8b611d97565b50601f01601f191660200190565b600060208284031215611eab57600080fd5b813567ffffffffffffffff811115611ec257600080fd5b8201601f81018413611ed357600080fd5b8035611ee6611ee182611e71565b611e40565b818152856020838501011115611efb57600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b83811015611f34578181015183820152602001611f1c565b50506000910152565b60008151808452611f55816020860160208601611f19565b601f01601f19169290920160200192915050565b6000610180825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e0830151611fc860e08601826001600160a01b03169052565b50610100808401518186015250610120808401518282870152611fed83870182611f3d565b9250505061014080840151858303828701526120098382611f3d565b9250505061016080840151858303828701526120258382611f3d565b9695505050505050565b602081526000825160406020840152805160a06060850152612055610100850182611f3d565b905060208201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0808684030160808701526120918383611f3d565b925060408401519150808684030160a08701526120ae8383611f3d565b925060608401519150808684030160c08701526120cb8383611f3d565b925060808401519350808684030160e087015250506120ea8183611f3d565b9150506020840151601f198483030160408501526121088282611f69565b95945050505050565b6020815260006121246020830184611f3d565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261215257600080fd5b8151612160611ee182611e71565b81815284602083860101111561217557600080fd5b612186826020830160208701611f19565b949350505050565b80516001600160a01b0381168114611a8e57600080fd5b600061018082840312156121b857600080fd5b6121c0611dad565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015261220e60e0830161218e565b60e082015261010082810151908201526101208083015167ffffffffffffffff8082111561223b57600080fd5b61224786838701612141565b8385015261014092508285015191508082111561226357600080fd5b61226f86838701612141565b8385015261016092508285015191508082111561228b57600080fd5b5061229885828601612141565b82840152505092915050565b6000602082840312156122b657600080fd5b815167ffffffffffffffff808211156122ce57600080fd5b90830190604082860312156122e257600080fd5b6122ea611dd7565b8251828111156122f957600080fd5b830160a0818803121561230b57600080fd5b612313611dfa565b81518481111561232257600080fd5b61232e89828501612141565b82525060208201518481111561234357600080fd5b61234f89828501612141565b60208301525060408201518481111561236757600080fd5b61237389828501612141565b60408301525060608201518481111561238b57600080fd5b61239789828501612141565b6060830152506080820151848111156123af57600080fd5b6123bb89828501612141565b6080830152508252506020830151828111156123d657600080fd5b6123e2878286016121a5565b60208301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611c8757611c876123f1565b6000600019820361242d5761242d6123f1565b5060010190565b805160ff81168114611a8e57600080fd5b60006020828403121561245757600080fd5b61212482612434565b60006020828403121561247257600080fd5b815167ffffffffffffffff8082111561248a57600080fd5b90830190818503608081121561249f57600080fd5b6124a7611e1d565b60408212156124b557600080fd5b6124bd611dd7565b91506124c884612434565b8252602084015161ffff811681146124df57600080fd5b60208301528181526124f36040850161218e565b6020820152606084015191508282111561250c57600080fd5b61251887838601612141565b60408201529695505050505050565b6001600160a01b038151168252600060208201516060602085015261254f6060850182611f3d565b9050604083015184820360408601526121088282611f3d565b600081518084526020808501945080840160005b838110156125a15781516001600160a01b03168752958201959082019060010161257c565b509495945050505050565b60008151604084526125c16040850182612568565b60208481015186830387830152805180845290820193509091600091908301905b8083101561260257845182529383019360019290920191908301906125e2565b509695505050505050565b600084516003811061262f57634e487b7160e01b600052602160045260246000fd5b80835250602085015163ffffffff8082166020850152806040880151166040850152505067ffffffffffffffff60608601511660608301526080850151608083015260e060a083015261268560e0830185612527565b82810360c084015261202581856125ac565b600060408083526001600160a01b0380865116828501526020808701516080606081818901526126ca60c0890184611f3d565b9250858a01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808a860301848b01526127048583611f3d565b9450828c01519150808a86030160a08b0152506127218482611f3d565b935050878303848901528289518085528585019150858160051b860101868c0160005b8381101561279e57878303601f19018552815180518051805160ff1686528b015161ffff168b8601528a01518b168c85015289015186840188905261278b88850182611f3d565b958a019593505090880190600101612744565b50909d9c50505050505050505050505050565b6000602082840312156127c357600080fd5b6121248261218e565b6000606080830181845280875180835260808601915060808160051b87010192506020808a0160005b8381101561286b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8089870301855281516001600160e01b0319815116875283810151888589015261284989890182612568565b60409283015115159890920197909752955093820193908201906001016127f5565b50508395506128848188018a6001600160a01b03169052565b505050505061218660408301846001600160a01b03169052565b60006001600160a01b03808816835260a060208401526128c160a0840188611f3d565b83810360408501526128d38188611f3d565b905083810360608501526128e781876125ac565b9250508084166080840152509695505050505050565b6060815260006129106060830186611f3d565b82810360208401526129228186611f3d565b9150506001600160a01b0383166040830152949350505050565b60006001600160a01b038086168352808516602084015250606060408301526121086060830184611f3d565b60008060006060848603121561297d57600080fd5b835167ffffffffffffffff8082111561299557600080fd5b818601915086601f8301126129a957600080fd5b81516020828211156129bd576129bd611d97565b8160051b92506129ce818401611e40565b828152928401810192818101908a8511156129e857600080fd5b948201945b84861015612a0d576129fe8661218e565b825294820194908201906129ed565b91890151604090990151919a98995090979650505050505050565b60006101a0808352612a3c81840187611f3d565b90508281036020840152612a508186611f3d565b9150508251604083015260208301516060830152604083015160808301526060830151612a8860a08401826001600160a01b03169052565b50608083015160c083015260a083015160e083015260c0830151610100818185015260e08501519150610120828186015281860151925061014091508282860152808601516101608601525080850151915050612af16101808401826001600160a01b03169052565b50949350505050565b60008451612b0c818460208901611f19565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551612b48816001850160208a01611f19565b60019201918201528351612b63816002840160208801611f19565b016002019594505050505056fea26469706673582212207207f5244a4edb292c5ce43f21188892d5bba7adafdd9363aa0f50b37ce6a00b64736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c80636d4ce63c146100515780639ca33c9e14610071578063d7d036ba14610084578063e8a3d48514610099575b600080fd5b6100596100b3565b60405161006893929190611d41565b60405180910390f35b61005961007f366004611e99565b61036f565b61008c61053e565b604051610068919061202f565b604080516020810182526000815290516100689190612111565b6040805160088082526101208201909252606091600091829182919060208201610100803683370190505090507f0000000000000000000000000000000000000000000000000000000000000000816000815181106101145761011461212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816001815181106101685761016861212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816002815181106101bc576101bc61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816003815181106102105761021061212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816004815181106102645761026461212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f0000000000000000000000000000000000000000000000000000000000000000816006815181106102b8576102b861212b565b60200260200101906001600160a01b031690816001600160a01b0316815250507f00000000000000000000000000000000000000000000000000000000000000008160078151811061030c5761030c61212b565b6001600160a01b0390921660209283029190910190910152937f000000000000000000000000000000000000000000000000000000000000000093507f000000000000000000000000000000000000000000000000000000000000000092509050565b606060008060008480602001905181019061038a91906122a4565b9050600061039b8260000151610661565b5050905060006103c98360200151836000815181106103bc576103bc61212b565b6020026020010151610e53565b505090506000815183516103dd9190612407565b67ffffffffffffffff8111156103f5576103f5611d97565b60405190808252806020026020018201604052801561041e578160200160208202803683370190505b50905060005b83518110156104815783818151811061043f5761043f61212b565b60200260200101518282815181106104595761045961212b565b6001600160a01b039092166020928302919091019091015261047a8161241a565b9050610424565b5060005b82518110156104ee578281815181106104a0576104a061212b565b6020026020010151828286516104b69190612407565b815181106104c6576104c661212b565b6001600160a01b03909216602092830291909101909101526104e78161241a565b9050610485565b50977f000000000000000000000000000000000000000000000000000000000000000097507f00000000000000000000000000000000000000000000000000000000000000009650945050505050565b610546611c8d565b60405180604001604052806040518060a001604052806040518060200160405280600081525081526020016040518060200160405280600081525081526020016040518060200160405280600081525081526020016040518060200160405280600081525081526020016040518060200160405280600081525081525081526020016040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b031681526020016000815260200160405180602001604052806000815250815260200160405180602001604052806000815250815260200160405180602001604052806000815250815250815250905090565b606060008060006040518060400160405280600167ffffffffffffffff81111561068d5761068d611d97565b6040519080825280602002602001820160405280156106b6578160200160208202803683370190505b5081526040805160018082528183019092526020909201919081602001602082028036833750505090528051805191925030916000906106f8576106f861212b565b60200260200101906001600160a01b031690816001600160a01b031681525050600081602001516000815181106107315761073161212b565b60200260200101818152505060006107717f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a08565b60408051606080820183526001600160a01b03841682528901516020820152608089015181830152815160a0810190925291925060009080828152602001620a2c2a63ffffffff16815260200161271063ffffffff1681526020016201518067ffffffffffffffff16815260200160018152509050600060405180608001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681526020018a6000015181526020018a6020015181526020018a6040015181525090506000604051806040016040528060405180604001604052807f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663e0589bd37f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316637be0ca5e6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156108e5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109099190612445565b6040516001600160e01b031960e084901b16815260ff9091166004820152602401600060405180830381865afa158015610947573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261096f9190810190612460565b6000015181526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031681525081526020018486896040516020016109bf9392919061260d565b60408051808303601f1901815291815291528051600180825281830190925291925060009190816020015b610a226040805160c08101825260006080820181815260a0830182905292820192835260608201529081908152602001606081525090565b8152602001906001900390816109ea5790505090508181600081518110610a4b57610a4b61212b565b602002602001018190525060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663b556883885846040518363ffffffff1660e01b8152600401610aa6929190612697565b6020604051808303816000875af1158015610ac5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ae991906127b1565b60408051600180825281830190925291925060009190816020015b60408051606080820183526000808352602083019190915291810191909152815260200190600190039081610b045790505090506340c10f1960e01b81600081518110610b5357610b5361212b565b60209081029190910101516001600160e01b0319919091169052604080516001808252818301909252908160200160208202803683370190505081600081518110610ba057610ba061212b565b6020026020010151602001819052508181600081518110610bc357610bc361212b565b602002602001015160200151600081518110610be157610be161212b565b60200260200101906001600160a01b031690816001600160a01b031681525050600181600081518110610c1657610c1661212b565b60209081029190910101519015156040909101526000610c5e6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611a08565b88516040517f90c2e4940000000000000000000000000000000000000000000000000000000081529192506001600160a01b038316916390c2e49491610cab9186919033906004016127cc565b600060405180830381600087803b158015610cc557600080fd5b505af1158015610cd9573d6000803e3d6000fd5b5050505087600001516001600160a01b0316636c8864d1848a602001518b604001518e866040518663ffffffff1660e01b8152600401610d1d95949392919061289e565b600060405180830381600087803b158015610d3757600080fd5b505af1158015610d4b573d6000803e3d6000fd5b506000925060039150610d5b9050565b604051908082528060200260200182016040528015610d84578160200160208202803683370190505b5090508381600081518110610d9b57610d9b61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250508981600181518110610dcf57610dcf61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250508181600281518110610e0357610e0361212b565b6001600160a01b0392909216602092830291909101909101529e7f4f5378446973747269627574696f6e00000000000000000000000000000000009e5060019d509b505050505050505050505050565b60606000806000610e8c7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316611a08565b60408051600680825260e08201909252919250600091906020820160c08036833701905050905063731133e960e01b81600081518110610ece57610ece61212b565b6001600160e01b03199092166020928302919091019091015280517fe2ab691d000000000000000000000000000000000000000000000000000000009082906001908110610f1e57610f1e61212b565b6001600160e01b03199092166020928302919091019091015280517fb5674c68000000000000000000000000000000000000000000000000000000009082906002908110610f6e57610f6e61212b565b6001600160e01b03199092166020928302919091019091015280517fb48ab8b6000000000000000000000000000000000000000000000000000000009082906003908110610fbe57610fbe61212b565b6001600160e01b03199092166020928302919091019091015280517f02fe530500000000000000000000000000000000000000000000000000000000908290600490811061100e5761100e61212b565b6001600160e01b03199092166020928302919091019091015280517f938e3d7b00000000000000000000000000000000000000000000000000000000908290600590811061105e5761105e61212b565b6001600160e01b0319929092166020928302919091019091015260408051600680825260e08201909252600091816020015b6040805160608082018352600080835260208301919091529181019190915281526020019060019003908161109057905050905063731133e960e01b816000815181106110df576110df61212b565b60209081029190910101516001600160e01b031991909116905260408051600180825281830190925290816020016020820280368337019050508160008151811061112c5761112c61212b565b602002602001015160200181905250868160008151811061114f5761114f61212b565b60200260200101516020015160008151811061116d5761116d61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250506001816000815181106111a2576111a261212b565b6020026020010151604001901515908115158152505063e2ab691d60e01b816001815181106111d3576111d361212b565b60209081029190910101516001600160e01b03199190911690526040805160018082528183019092529081602001602082028036833701905050816001815181106112205761122061212b565b60200260200101516020018190525086816001815181106112435761124361212b565b6020026020010151602001516000815181106112615761126161212b565b60200260200101906001600160a01b031690816001600160a01b0316815250506001816001815181106112965761129661212b565b6020026020010151604001901515908115158152505063b5674c6860e01b816002815181106112c7576112c761212b565b60209081029190910101516001600160e01b03199190911690526040805160018082528183019092529081602001602082028036833701905050816002815181106113145761131461212b565b60200260200101516020018190525086816002815181106113375761133761212b565b6020026020010151602001516000815181106113555761135561212b565b60200260200101906001600160a01b031690816001600160a01b03168152505060018160028151811061138a5761138a61212b565b6020026020010151604001901515908115158152505063b48ab8b660e01b816003815181106113bb576113bb61212b565b60209081029190910101516001600160e01b03199190911690526040805160018082528183019092529081602001602082028036833701905050816003815181106114085761140861212b565b602002602001015160200181905250868160038151811061142b5761142b61212b565b6020026020010151602001516000815181106114495761144961212b565b60200260200101906001600160a01b031690816001600160a01b03168152505060018160038151811061147e5761147e61212b565b602002602001015160400190151590811515815250506302fe530560e01b816004815181106114af576114af61212b565b60209081029190910101516001600160e01b031990911690528051600190829060049081106114e0576114e061212b565b6020026020010151604001901515908115158152505063938e3d7b60e01b816005815181106115115761151161212b565b60209081029190910101516001600160e01b031990911690528051600190829060059081106115425761154261212b565b6020908102919091010151901515604090910152600061158a6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016611a08565b6040517f90c2e4940000000000000000000000000000000000000000000000000000000081529091506001600160a01b038216906390c2e494906115d6908590889033906004016127cc565b600060405180830381600087803b1580156115f057600080fd5b505af1158015611604573d6000803e3d6000fd5b505050506101408901516101608a01516040517f077f224a0000000000000000000000000000000000000000000000000000000081526001600160a01b0387169263077f224a926116599286906004016128fd565b600060405180830381600087803b15801561167357600080fd5b505af1158015611687573d6000803e3d6000fd5b5050505060008060007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316639ca33c9e8c898f61012001516040516020016116d99392919061293c565b6040516020818303038152906040526040518263ffffffff1660e01b81526004016117049190612111565b6000604051808303816000875af1158015611723573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261174b9190810190612968565b92509250925060006040518061016001604052808e6000015181526020018e6020015181526020018e604001518152602001896001600160a01b031681526020018e6060015181526020018e60c0015181526020018e610100015181526020018e608001518152602001600181526020018e60a0015181526020018e60e001516001600160a01b03168152509050836000815181106117ec576117ec61212b565b60200260200101516001600160a01b0316631eea6f898460405160200161181591815260200190565b60408051601f198184030181526060808401835260008085526020858101829052948401528251908101835260c088901c815267ffffffffffffffff608089901c16938101939093526fffffffffffffffffffffffffffffffff8716918301919091529061188290611a93565b846040518463ffffffff1660e01b81526004016118a193929190612a28565b600060405180830381600087803b1580156118bb57600080fd5b505af11580156118cf573d6000803e3d6000fd5b505050506000845160026118e39190612407565b67ffffffffffffffff8111156118fb576118fb611d97565b604051908082528060200260200182016040528015611924578160200160208202803683370190505b50905060005b8551811015611987578581815181106119455761194561212b565b602002602001015182828151811061195f5761195f61212b565b6001600160a01b03909216602092830291909101909101526119808161241a565b905061192a565b50858186518151811061199c5761199c61212b565b60200260200101906001600160a01b031690816001600160a01b0316815250508881865160016119cc9190612407565b815181106119dc576119dc61212b565b6001600160a01b03909216602092830291909101909101529a5091985096505050505050509250925092565b6000763d602d80600a3d3981f3363d3d373d3d3d363d730000008260601b60e81c176000526e5af43d82803e903d91602b57fd5bf38260781b17602052603760096000f090506001600160a01b038116611a8e576040517fc2f868f400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b919050565b6060611aac826000015167ffffffffffffffff16611b0a565b611ac3836020015167ffffffffffffffff16611b0a565b611ae284604001516fffffffffffffffffffffffffffffffff16611b0a565b604051602001611af493929190612afa565b6040516020818303038152906040529050919050565b60606000611b1783611baa565b600101905060008167ffffffffffffffff811115611b3757611b37611d97565b6040519080825280601f01601f191660200182016040528015611b61576020820181803683370190505b5090508181016020015b600019017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084611b6b57509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310611bf3577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611c1f576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310611c3d57662386f26fc10000830492506010015b6305f5e1008310611c55576305f5e100830492506008015b6127108310611c6957612710830492506004015b60648310611c7b576064830492506002015b600a8310611c87576001015b92915050565b6040518060400160405280611cca6040518060a0016040528060608152602001606081526020016060815260200160608152602001606081525090565b8152602001611d3c6040518061018001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160006001600160a01b03168152602001600081526020016060815260200160608152602001606081525090565b905290565b606080825284519082018190526000906020906080840190828801845b82811015611d835781516001600160a01b031684529284019290840190600101611d5e565b505050908301949094525060400152919050565b634e487b7160e01b600052604160045260246000fd5b604051610180810167ffffffffffffffff81118282101715611dd157611dd1611d97565b60405290565b6040805190810167ffffffffffffffff81118282101715611dd157611dd1611d97565b60405160a0810167ffffffffffffffff81118282101715611dd157611dd1611d97565b6040516060810167ffffffffffffffff81118282101715611dd157611dd1611d97565b604051601f8201601f1916810167ffffffffffffffff81118282101715611e6957611e69611d97565b604052919050565b600067ffffffffffffffff821115611e8b57611e8b611d97565b50601f01601f191660200190565b600060208284031215611eab57600080fd5b813567ffffffffffffffff811115611ec257600080fd5b8201601f81018413611ed357600080fd5b8035611ee6611ee182611e71565b611e40565b818152856020838501011115611efb57600080fd5b81602084016020830137600091810160200191909152949350505050565b60005b83811015611f34578181015183820152602001611f1c565b50506000910152565b60008151808452611f55816020860160208601611f19565b601f01601f19169290920160200192915050565b6000610180825184526020830151602085015260408301516040850152606083015160608501526080830151608085015260a083015160a085015260c083015160c085015260e0830151611fc860e08601826001600160a01b03169052565b50610100808401518186015250610120808401518282870152611fed83870182611f3d565b9250505061014080840151858303828701526120098382611f3d565b9250505061016080840151858303828701526120258382611f3d565b9695505050505050565b602081526000825160406020840152805160a06060850152612055610100850182611f3d565b905060208201517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa0808684030160808701526120918383611f3d565b925060408401519150808684030160a08701526120ae8383611f3d565b925060608401519150808684030160c08701526120cb8383611f3d565b925060808401519350808684030160e087015250506120ea8183611f3d565b9150506020840151601f198483030160408501526121088282611f69565b95945050505050565b6020815260006121246020830184611f3d565b9392505050565b634e487b7160e01b600052603260045260246000fd5b600082601f83011261215257600080fd5b8151612160611ee182611e71565b81815284602083860101111561217557600080fd5b612186826020830160208701611f19565b949350505050565b80516001600160a01b0381168114611a8e57600080fd5b600061018082840312156121b857600080fd5b6121c0611dad565b9050815181526020820151602082015260408201516040820152606082015160608201526080820151608082015260a082015160a082015260c082015160c082015261220e60e0830161218e565b60e082015261010082810151908201526101208083015167ffffffffffffffff8082111561223b57600080fd5b61224786838701612141565b8385015261014092508285015191508082111561226357600080fd5b61226f86838701612141565b8385015261016092508285015191508082111561228b57600080fd5b5061229885828601612141565b82840152505092915050565b6000602082840312156122b657600080fd5b815167ffffffffffffffff808211156122ce57600080fd5b90830190604082860312156122e257600080fd5b6122ea611dd7565b8251828111156122f957600080fd5b830160a0818803121561230b57600080fd5b612313611dfa565b81518481111561232257600080fd5b61232e89828501612141565b82525060208201518481111561234357600080fd5b61234f89828501612141565b60208301525060408201518481111561236757600080fd5b61237389828501612141565b60408301525060608201518481111561238b57600080fd5b61239789828501612141565b6060830152506080820151848111156123af57600080fd5b6123bb89828501612141565b6080830152508252506020830151828111156123d657600080fd5b6123e2878286016121a5565b60208301525095945050505050565b634e487b7160e01b600052601160045260246000fd5b80820180821115611c8757611c876123f1565b6000600019820361242d5761242d6123f1565b5060010190565b805160ff81168114611a8e57600080fd5b60006020828403121561245757600080fd5b61212482612434565b60006020828403121561247257600080fd5b815167ffffffffffffffff8082111561248a57600080fd5b90830190818503608081121561249f57600080fd5b6124a7611e1d565b60408212156124b557600080fd5b6124bd611dd7565b91506124c884612434565b8252602084015161ffff811681146124df57600080fd5b60208301528181526124f36040850161218e565b6020820152606084015191508282111561250c57600080fd5b61251887838601612141565b60408201529695505050505050565b6001600160a01b038151168252600060208201516060602085015261254f6060850182611f3d565b9050604083015184820360408601526121088282611f3d565b600081518084526020808501945080840160005b838110156125a15781516001600160a01b03168752958201959082019060010161257c565b509495945050505050565b60008151604084526125c16040850182612568565b60208481015186830387830152805180845290820193509091600091908301905b8083101561260257845182529383019360019290920191908301906125e2565b509695505050505050565b600084516003811061262f57634e487b7160e01b600052602160045260246000fd5b80835250602085015163ffffffff8082166020850152806040880151166040850152505067ffffffffffffffff60608601511660608301526080850151608083015260e060a083015261268560e0830185612527565b82810360c084015261202581856125ac565b600060408083526001600160a01b0380865116828501526020808701516080606081818901526126ca60c0890184611f3d565b9250858a01517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc0808a860301848b01526127048583611f3d565b9450828c01519150808a86030160a08b0152506127218482611f3d565b935050878303848901528289518085528585019150858160051b860101868c0160005b8381101561279e57878303601f19018552815180518051805160ff1686528b015161ffff168b8601528a01518b168c85015289015186840188905261278b88850182611f3d565b958a019593505090880190600101612744565b50909d9c50505050505050505050505050565b6000602082840312156127c357600080fd5b6121248261218e565b6000606080830181845280875180835260808601915060808160051b87010192506020808a0160005b8381101561286b577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8089870301855281516001600160e01b0319815116875283810151888589015261284989890182612568565b60409283015115159890920197909752955093820193908201906001016127f5565b50508395506128848188018a6001600160a01b03169052565b505050505061218660408301846001600160a01b03169052565b60006001600160a01b03808816835260a060208401526128c160a0840188611f3d565b83810360408501526128d38188611f3d565b905083810360608501526128e781876125ac565b9250508084166080840152509695505050505050565b6060815260006129106060830186611f3d565b82810360208401526129228186611f3d565b9150506001600160a01b0383166040830152949350505050565b60006001600160a01b038086168352808516602084015250606060408301526121086060830184611f3d565b60008060006060848603121561297d57600080fd5b835167ffffffffffffffff8082111561299557600080fd5b818601915086601f8301126129a957600080fd5b81516020828211156129bd576129bd611d97565b8160051b92506129ce818401611e40565b828152928401810192818101908a8511156129e857600080fd5b948201945b84861015612a0d576129fe8661218e565b825294820194908201906129ed565b91890151604090990151919a98995090979650505050505050565b60006101a0808352612a3c81840187611f3d565b90508281036020840152612a508186611f3d565b9150508251604083015260208301516060830152604083015160808301526060830151612a8860a08401826001600160a01b03169052565b50608083015160c083015260a083015160e083015260c0830151610100818185015260e08501519150610120828186015281860151925061014091508282860152808601516101608601525080850151915050612af16101808401826001600160a01b03169052565b50949350505050565b60008451612b0c818460208901611f19565b80830190507f2e000000000000000000000000000000000000000000000000000000000000008082528551612b48816001850160208a01611f19565b60019201918201528351612b63816002840160208801611f19565b016002019594505050505056fea26469706673582212207207f5244a4edb292c5ce43f21188892d5bba7adafdd9363aa0f50b37ce6a00b64736f6c63430008140033",
  "devdoc": {
    "author": "Peeramid Labs, 2024",
    "details": "This contract implements the IDistribution and CodeIndexer interfaces. It uses the Clones library for address cloning.",
    "errors": {
      "ERC1167FailedCreateClone()": [
        {
          "details": "A clone instance deployment failed."
        }
      ]
    },
    "events": {
      "Distributed(address,address[])": {
        "params": {
          "distributor": "The address of the entity that performed the distribution.",
          "instances": "An array of addresses that were produced."
        }
      }
    },
    "kind": "dev",
    "methods": {
      "constructor": {
        "details": "- retrieves contract addresses from a contract index using the provided identifiers. - checks if the access manager supports the ERC7746 interface. - EIP712 compatible name/version can be extracted with use of LibSemver WARNING: _trustedForwarder functionality hasn't been yet reviewed nor implemented for ACID distribution and if set will affect only OSx DAO setup.",
        "params": {
          "ACIDDIistributionId": "Identifier for the ACID distribution.",
          "accessManagerId": "Identifier for the access manager.",
          "daoFactory": "Address of the Aragons DAO factory.",
          "distributionName": "Name of the distribution.",
          "distributionVersion": "Version of the distribution as a `LibSemver.Version` struct.",
          "governanceERC20BaseId": "Identifier for the governance ERC20 base.",
          "rankTokenCodeId": "Identifier for the rank token code.",
          "tokenVotingPluginRepo": "Address of the token voting plugin repository.",
          "trustedForwarder": "Address of the trusted forwarder."
        }
      },
      "distributionSchema()": {
        "details": "This is only needed to ensure `DistributorArguments` are provided in ABI, as it would be internal otherwise.",
        "returns": {
          "_0": "DistributorArguments The schema of the distribution."
        }
      },
      "get()": {
        "returns": {
          "_1": "The name of the distribution.",
          "_2": "The version of the distribution.",
          "sources": "An array of addresses that are used for instantiation."
        }
      },
      "instantiate(bytes)": {
        "details": "`instances` array contents: DAO, GovernanceToken, Gov Token AccessManager, ACID Diamond, 8x ACID Diamond facets, RankTokenAccessManager, RankToken",
        "params": {
          "data": "The initialization data for the new instance, typeof {DistributorArguments}."
        },
        "returns": {
          "distributionName": "A bytes32 value representing the name of the distribution.",
          "distributionVersion": "A uint256 value representing the version of the distribution.",
          "instances": "An array of addresses representing the new instances."
        }
      }
    },
    "title": "MAODistribution",
    "version": 1
  },
  "userdoc": {
    "events": {
      "Distributed(address,address[])": {
        "notice": "Emitted when a distribution occurs."
      }
    },
    "kind": "user",
    "methods": {
      "constructor": {
        "notice": "Initializes the contract with the provided parameters and performs necessary checks."
      },
      "distributionSchema()": {
        "notice": "Returns the schema of the distribution."
      },
      "get()": {
        "notice": "Retrieves the current distribution sources."
      },
      "instantiate(bytes)": {
        "notice": "Instantiates a new instance with the provided data."
      }
    },
    "notice": "The contract is responsible for creating and managing DAOs and ACID distributions.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}